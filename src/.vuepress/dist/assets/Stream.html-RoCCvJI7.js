import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as i,g as t,f as l,o as n}from"./app-DokaGNO4.js";const r={};function o(p,e){return n(),s("div",null,[e[0]||(e[0]=i("p",null,"流我只用来过滤，分组，处理集合转换等等，涉及复杂业务逻辑都是用for循环写清楚。没毛病吧!",-1)),t(" more "),e[1]||(e[1]=l(`<div class="language-mermaid line-numbers-mode" data-highlighter="shiki" data-ext="mermaid" data-title="mermaid" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">graph TB</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    subgraph Map操作</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    A[&quot;Stream&lt;String&gt;&lt;br/&gt;[apple, banana](&quot;Stream&lt;String&gt;&lt;br/&gt;[apple,%20banana)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    B[&quot;map(s -&gt; s.length())&quot;]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    C[&quot;Stream&lt;Integer&gt;&lt;br/&gt;[5, 6](&quot;Stream&lt;Integer&gt;&lt;br/&gt;[5,%206)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    A --&gt;|&quot;映射转换&quot;| B</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    B --&gt;|&quot;结果&quot;| C</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    subgraph FlatMap操作</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    D[&quot;Stream&lt;String&gt;&lt;br/&gt;[hello, world](&quot;Stream&lt;String&gt;&lt;br/&gt;[hello,%20world)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    E[&quot;flatMap(s -&gt; &lt;br/&gt;Arrays.stream(s.split(&#39;&#39;)))&quot;]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    F[&quot;Stream&lt;String&gt;&lt;br/&gt;[h,e,l,l,o,w,o,r,l,d](&quot;Stream&lt;String&gt;&lt;br/&gt;[h,e,l,l,o,w,o,r,l,d)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    D --&gt;|&quot;拆分并展平&quot;| E</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    E --&gt;|&quot;结果&quot;| F</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    style A fill:#e1f5fe</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    style C fill:#e1f5fe</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    style D fill:#e1f5fe</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    style F fill:#e1f5fe</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    style B fill:#fff3e0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    style E fill:#fff3e0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="map-n-n" tabindex="-1"><a class="header-anchor" href="#map-n-n"><span>map n -&gt; n</span></a></h2><ul><li>输入是一个 Stream</li><li>对每个元素进行 1:1 的转换</li><li>输出仍然是一个 Stream，但元素类型可能改变</li></ul><h2 id="flatmap-n-n-×-m" tabindex="-1"><a class="header-anchor" href="#flatmap-n-n-×-m"><span>flatMap n -&gt; n × m</span></a></h2><ul><li>输入是一个 Stream</li><li>对每个元素进行 1:n 的转换（产生多个结果）</li><li>将所有结果合并成一个扁平的 Stream</li></ul><p>List&lt;<code>Map&lt;Integer, Integer&gt;</code>&gt; -&gt; <code>Map&lt;Integer, Integer&gt;</code></p><table><thead><tr><th></th></tr></thead><tbody><tr><td><code>Map&lt;Integer, Integer&gt;</code> mergedDiscount = sellPromotions.stream() <br>.reduce(Maps.newHashMap(), (merge, map) -&gt; { <br> map.forEach((key, value) -&gt; merge.merge(key, value, (v1, v2) -&gt; nullToZero(v1) + nullToZero(v2))); <br> return merge; <br> });</td></tr></tbody></table><p>这段代码是使用 Java 的 Stream API 来合并一个 <code>sellPromotions</code> 列表中的所有促销折扣信息到一个新的 <code>Map</code> 中。这个列表里的每个元素都是一个 <code>Map&lt;Integer, Integer&gt;</code> 类型，表示的是商品的 ID 和对应的促销折扣值。合并的逻辑是将所有这些 Map 中的键值对加入到一个新的 Map 中，如果出现相同的键（即相同的商品 ID），则将它们的值（促销折扣）相加。如果任何一个值为 <code>null</code>，则在相加之前将其视为 <code>0</code>。</p><p>让我们通过一个例子来说明这段代码的工作原理：</p><p>假设我们有以下的促销折扣列表（<code>sellPromotions</code>）：</p><ul><li>第一个促销折扣 Map：<code>{1=10, 2=20}</code></li><li>第二个促销折扣 Map：<code>{2=5, 3=15}</code></li></ul><p>这里，<code>nullToZero</code> 是一个假设的函数，用于将 <code>sellPromotions</code>0 值转换为 <code>sellPromotions</code>1。这段代码中并没有直接展示这个函数的实现，但其功能是明确的。</p><p>现在，我们使用提供的代码片段来合并这些促销折扣：</p><ol><li>初始化一个新的 HashMap。</li><li>遍历 <code>sellPromotions</code>2 列表中的每一个 Map： <ul><li>对于第一个 Map：将 <code>sellPromotions</code>3 中的键值对添加到新的 Map 中，现在新的 Map 变为 <code>sellPromotions</code>4。</li><li>对于第二个 Map：尝试将 <code>sellPromotions</code>5 中的键值对加入到新的 Map 中。 <ul><li>对于键 <code>sellPromotions</code>6，它在新的 Map 中已存在，因此将两个值相加：<code>sellPromotions</code>7，更新后的 Map 为 <code>sellPromotions</code>8。</li><li>对于键 <code>sellPromotions</code>9，它在新的 Map 中不存在，直接加入，最终 Map 为 <code>Map</code>0。</li></ul></li></ul></li></ol><p>最终结果，新的 Map 包含了所有促销信息的合并，其中相同商品 ID 的促销折扣被累加。</p><p>这段代码的关键是使用 <code>Map</code>1 函数来处理键值对的合并逻辑。<code>Map</code>2 函数接受三个参数：键、要合并的值以及一个合并函数（如果键已经存在）。在这个例子中，合并函数是 <code>Map</code>3，它确保了如果有任何 <code>Map</code>4 值，它们会被当作 <code>Map</code>5 来处理，并将两个值相加。</p>`,16))])}const m=a(r,[["render",o],["__file","Stream.html.vue"]]),h=JSON.parse('{"path":"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/Stream.html","title":"Stream","lang":"zh-CN","frontmatter":{"draw":null,"title":"Stream","tags":[],"date created":"2024-04-03T00:00:00.000Z","date modified":"2024-11-12T00:00:00.000Z","description":"流我只用来过滤，分组，处理集合转换等等，涉及复杂业务逻辑都是用for循环写清楚。没毛病吧! map n -> n 输入是一个 Stream 对每个元素进行 1:1 的转换 输出仍然是一个 Stream，但元素类型可能改变 flatMap n -> n × m 输入是一个 Stream 对每个元素进行 1:n 的转换（产生多个结果） 将所有结果合并成一个...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/Stream.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:title","content":"Stream"}],["meta",{"property":"og:description","content":"流我只用来过滤，分组，处理集合转换等等，涉及复杂业务逻辑都是用for循环写清楚。没毛病吧! map n -> n 输入是一个 Stream 对每个元素进行 1:1 的转换 输出仍然是一个 Stream，但元素类型可能改变 flatMap n -> n × m 输入是一个 Stream 对每个元素进行 1:n 的转换（产生多个结果） 将所有结果合并成一个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-24T17:46:49.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-24T17:46:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Stream\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-24T17:46:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"map n -> n","slug":"map-n-n","link":"#map-n-n","children":[]},{"level":2,"title":"flatMap n -> n × m","slug":"flatmap-n-n-×-m","link":"#flatmap-n-n-×-m","children":[]}],"git":{"createdTime":1732465042000,"updatedTime":1732470409000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":2}]},"readingTime":{"minutes":2.79,"words":836},"filePathRelative":"2 第二大脑/1 节点/CS/编程语言/Java/数据类型/Stream.md","localizedDate":"2024年11月25日","autoDesc":true}');export{m as comp,h as data};
