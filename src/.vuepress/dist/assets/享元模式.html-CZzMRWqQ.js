import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as r,g as o,f as n,o as i}from"./app-DokaGNO4.js";const p={};function l(c,e){return i(),a("div",null,[e[0]||(e[0]=r("p",null,"对象维度的复用，字符串池",-1)),o(" more "),e[1]||(e[1]=n('<h2 id="场景" tabindex="-1"><a class="header-anchor" href="#场景"><span>场景</span></a></h2><p>数字 1 可能在代码中到处要使用，没用就开辟一次空间吗？</p><h2 id="与线程池的区别" tabindex="-1"><a class="header-anchor" href="#与线程池的区别"><span>与线程池的区别</span></a></h2><p>同时使用和重复使用的区别</p><p>IntegerCache 的 -128 到 127，或者串池中的 &quot;a&quot;，都是 immutable 的，可以被两处同时使用。</p><p>线程池中的线程 a，一个时刻只能被一处使用，只是用完不回收，可以被另一处复用</p><h2 id="注意点" tabindex="-1"><a class="header-anchor" href="#注意点"><span>注意点</span></a></h2><p>JVM 的内存回收机制对享元模式不太友好，享元工厂类会一直存在指向享元对象的引用，所以内存永远不会被回收。如果这类对象很多，又不会真的被同时大量使用，可能会占用很大的内存空间。</p>',8))])}const d=t(p,[["render",l],["__file","享元模式.html.vue"]]),E=JSON.parse('{"path":"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F.html","title":"享元模式","lang":"zh-CN","frontmatter":{"draw":null,"title":"享元模式","tags":["1 Dev","信息革命","设计模式"],"date created":"2024-05-08T00:00:00.000Z","date modified":"2024-11-12T00:00:00.000Z","description":"对象维度的复用，字符串池 场景 数字 1 可能在代码中到处要使用，没用就开辟一次空间吗？ 与线程池的区别 同时使用和重复使用的区别 IntegerCache 的 -128 到 127，或者串池中的 \\"a\\"，都是 immutable 的，可以被两处同时使用。 线程池中的线程 a，一个时刻只能被一处使用，只是用完不回收，可以被另一处复用 注意点 JVM 的...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:title","content":"享元模式"}],["meta",{"property":"og:description","content":"对象维度的复用，字符串池 场景 数字 1 可能在代码中到处要使用，没用就开辟一次空间吗？ 与线程池的区别 同时使用和重复使用的区别 IntegerCache 的 -128 到 127，或者串池中的 \\"a\\"，都是 immutable 的，可以被两处同时使用。 线程池中的线程 a，一个时刻只能被一处使用，只是用完不回收，可以被另一处复用 注意点 JVM 的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-24T16:17:22.000Z"}],["meta",{"property":"article:tag","content":"1 Dev"}],["meta",{"property":"article:tag","content":"信息革命"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:modified_time","content":"2024-11-24T16:17:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"享元模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-24T16:17:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"场景","slug":"场景","link":"#场景","children":[]},{"level":2,"title":"与线程池的区别","slug":"与线程池的区别","link":"#与线程池的区别","children":[]},{"level":2,"title":"注意点","slug":"注意点","link":"#注意点","children":[]}],"git":{"createdTime":1732465042000,"updatedTime":1732465042000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":1}]},"readingTime":{"minutes":0.75,"words":225},"filePathRelative":"2 第二大脑/1 节点/CS/软件工程/设计模式/享元模式.md","localizedDate":"2024年11月25日","autoDesc":true}');export{d as comp,E as data};
