import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,f as a,a as l,b as i,d as e,e as t,r,o as h}from"./app-DokaGNO4.js";const c={};function o(k,s){const n=r("RouteLink");return h(),p("div",null,[s[10]||(s[10]=a('<h2 id="比特币突破-10-万美金" tabindex="-1"><a class="header-anchor" href="#比特币突破-10-万美金"><span>比特币突破 10 万美金</span></a></h2><figure><img src="https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F12%2F08%2F23-44-05-281e654d442163be1833b57d0ff9dedd-202412082344323-207020.png" alt="image.png|1000" tabindex="0" loading="lazy"><figcaption>image.png|1000</figcaption></figure><p>背景事件：比特币价格近期创新高，突破 10 万美金</p><p>比特币是一个没有中心机构管理的数字货币系统，全球无数节点共同维护一个账本，但他们是如何在缺乏权威机构的情况下保证每一笔交易记录一致且可信的？这一切的基础是“分布式共识（Distributed Consensus）”。</p><p>上限：无政府、去中心化 下限：目前的金融体系中的一部分资金有去中心化的诉求，BTC 作为金融系统中的润滑剂而存在</p><p>需求：去中心化 解法：分布式共识</p><h2 id="什么是分布式共识" tabindex="-1"><a class="header-anchor" href="#什么是分布式共识"><span>什么是分布式共识？</span></a></h2><p>定义：分布式共识是指在没有中央权威的情况下，使多个独立节点对某个状态或数据达成相同的看法。</p><ul><li>在比特币中的体现：所有节点同步维护一个区块链账本，确认哪条链是“最长链”，从而确认交易的有效性。</li><li>拜占庭将军问题：共识难题的理论根源</li></ul><p><a href="%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%86%E5%86%9B%E9%97%AE%E9%A2%98">拜占庭将军问题</a>：共识难题的理论根源 目的：以拜占庭将军问题为理论基石，说明分布式共识的核心挑战。</p><ul><li>拜占庭将军问题简介：多支军队围攻一座城池，指挥官之间通过不可靠的通讯达成一致行动的难题。一些将军可能是叛徒，对信息进行篡改。</li><li>与网络环境类比：在分布式系统中，一些节点可能故障、延迟或恶意，如何在这种情况下仍然达成一致？</li></ul><p>其他例子：</p><ol><li>桃花源记中的不知有汉 无论魏晋</li><li>有一名日本军官，二战结束后仍在菲律宾孤岛负隅顽抗30年</li></ol><p>不管是比特币解决传统金融的痛点，还是拜占庭将军问题，其核心需求都是解决共识的问题，基于此出现了很多共识算法。</p><ol><li>共识 -&gt; 协作</li><li>女巫</li></ol><h2 id="共识算法" tabindex="-1"><a class="header-anchor" href="#共识算法"><span>共识算法</span></a></h2><table><thead><tr><th>特性</th><th>PoW（工作量证明）</th><th>PoS（权益证明）</th><th>PBFT（实用拜占庭容错）</th><th>Paxos</th><th>Raft</th></tr></thead><tbody><tr><td>场景</td><td>公有区块链（如比特币）</td><td>公有/联盟链（如以太坊）</td><td>联盟链/许可网络</td><td>传统分布式系统</td><td>传统分布式系统（分布式存储、KV服务）</td></tr><tr><td>信任模型</td><td>无中心、匿名节点</td><td>无中心(但依赖持币权益)</td><td>有限规模、已知节点身份</td><td>内部受控集群，有身份控制</td><td>内部受控集群，有身份控制</td></tr><tr><td>容错能力</td><td>抗拜占庭节点（需≥50%算力诚实）</td><td>抗拜占庭节点（需≥50%权益诚实）</td><td>可容忍f个恶意节点 (3f+1节点)</td><td>通常假设节点故障非恶意（可扩展支持拜占庭）</td><td>通常假设节点故障非恶意（崩溃容错）</td></tr><tr><td>确认速度</td><td>慢（需等待多个区块确认）</td><td>相对较快（实现差异大）</td><td>快速（固定轮次达成共识）</td><td>相对较快（有时较复杂）</td><td>较快（通过选举和日志复制机制）</td></tr><tr><td>能耗与成本</td><td>高（大量算力挖矿）</td><td>低（无需大量算力）</td><td>低（消息交换为主）</td><td>低（消息交换与日志复制）</td><td>低（消息交换与日志复制）</td></tr><tr><td>吞吐量与延迟</td><td>低吞吐量，高延迟</td><td>相对较高吞吐、较低延迟</td><td>较高吞吐量、低延迟</td><td>中等吞吐，依实现而定</td><td>较高吞吐量、低延迟，适合小规模集群</td></tr><tr><td>节点规模扩展性</td><td>可非常大（性能受限）</td><td>可较大（仍有性能限制）</td><td>通常小到中规模（几十到数百）</td><td>通常小规模（几台到十几台）</td><td>通常小规模（几台到十几台）</td></tr><tr><td>最终一致性类型</td><td>概率最终一致性（可分叉）</td><td>通常可更快或明确的最终性</td><td>确定最终一致性（达成即不可逆）</td><td>确定最终一致性（决议达成后不可逆）</td><td>确定最终一致性（日志提交后不可逆）</td></tr></tbody></table><p>众所周知，<a href="Paxos">Paxos</a> 是一个非常划时代的共识算法。在 Raft 出现之前的 10 年里，Paxos 几乎统治着共识算法这一领域：因为绝大多数共识算法的实现都是基于 Paxos 或者受其影响，同时 Paxos 也成为了教学领域里讲解共识问题时的示例。但是不幸的是，尽管有很多工作都在尝试降低 Paxos 的复杂性，但是它依然十分难以理解。并且，Paxos 自身的算法结构需要进行大幅的修改才能够应用到实际的系统中。这些都导致了工业界和学术界都对 Paxos 算法感到十分头疼。比如 Google Chubby 的论文就提到，因为 Paxos 的描述和现实差距太大，所以最终人们总会实现一套未经证实的类 Paxos 协议。</p>',18)),l("p",null,[s[1]||(s[1]=i("基于以上背景，Diego Ongaro 在就读博士期间，深入研究 Paxos 协议后提出了 ")),e(n,{to:"/3%20%E5%8D%9A%E5%AE%A2/Raft.html"},{default:t(()=>s[0]||(s[0]=[i("Raft")])),_:1}),s[2]||(s[2]=i(" 协议，旨在提供更为易于理解的共识算法。Raft 的宗旨在于可实践性和可理解性，并且相比 Paxos 几乎没有牺牲多少性能。"))]),s[11]||(s[11]=a(`<ol><li>比特币的共识机制：工作量证明（PoW） 目的：用比特币的实例，描述一种共识算法具体是如何实现的。</li></ol><ul><li>PoW 原理：矿工通过消耗计算资源（电力、算力）来进行哈希碰撞寻找合适解，谁先找到就获得记账权。</li><li>最终一致性（概率性）：最长链代表共识结果，最终确认为不可逆，虽然存在分叉的可能，但随时间推移这种概率会降低。</li><li>优点与缺点：去信任化、去中心化，但能耗巨大，吞吐量和确认时间较慢。</li></ul><p>下面是加入 Raft 后的一张简要对比表格，将 PoW、PoS、PBFT、Paxos、Raft 几种常见共识算法特性进行比较：</p><div class="language-mermaid line-numbers-mode" data-highlighter="shiki" data-ext="mermaid" data-title="mermaid" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">flowchart TD</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    subgraph ConAlgo[&quot;Consensus Algorithms&quot;]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        RAFT[Raft]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        POW[Proof of Work]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ZAB[ZooKeeper Atomic Broadcast]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        PAXOS[Paxos]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    subgraph KeyChar[&quot;Key Characteristics&quot;]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        LEADER[Leader Election]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        CONSISTENCY[Strong Consistency]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        FAULT_TOLERANCE[Fault Tolerance]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    RAFT --&gt; LEADER</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    RAFT --&gt; CONSISTENCY</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    POW --&gt; |Decentralized| FAULT_TOLERANCE</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ZAB --&gt; LEADER</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ZAB --&gt; CONSISTENCY</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    PAXOS --&gt; LEADER</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    PAXOS --&gt; CONSISTENCY</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    RAFT &lt;--&gt; ZAB[&quot;ZAB (特点相似)&quot;]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    PAXOS --&gt; |更复杂的前身| RAFT</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    classDef subgraphStyle fill:#e6f3ff,stroke:#4a90e2,stroke-width:2px</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    classDef algorithmNode fill:#f0f7ff,stroke:#2d6da3,stroke-width:2px</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    classDef characteristicNode fill:#fff0f7,stroke:#d4638f,stroke-width:2px</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    class RAFT,POW,ZAB,PAXOS algorithmNode</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    class LEADER,CONSISTENCY,FAULT_TOLERANCE characteristicNode</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    class ConAlgo,KeyChar subgraphStyle</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    linkStyle default stroke:#666,stroke-width:2px</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="非拜占庭容错-raft" tabindex="-1"><a class="header-anchor" href="#非拜占庭容错-raft"><span>非拜占庭容错-RAFT</span></a></h2><p>下面是一个类比场景，将 MIT 6.824 中的几个实验的实现思路，用「只能用微信点对点私聊、不能群聊」的方式来形象解释。请注意，这只是类比，不是精确的技术描述，但有助于理解分布式系统中所面临的问题和解决方案。</p><h3 id="基本设定" tabindex="-1"><a class="header-anchor" href="#基本设定"><span>基本设定</span></a></h3><p>想象一群同事（节点），平时想协同完成任务，但微信群功能故障，无法建群、无法群聊。每个人只能单独私信给其他人发送消息。整个系统要完成各种分布式任务，而 MIT 6.824 的几个 lab 就是解决这些在“只能单聊”的世界里如何合作达成一致、存储共享数据、分工处理任务。</p><h3 id="lab-1-mapreduce-分工处理信息" tabindex="-1"><a class="header-anchor" href="#lab-1-mapreduce-分工处理信息"><span>Lab 1: MapReduce（分工处理信息）</span></a></h3>`,9)),l("p",null,[e(n,{to:"/3%20%E5%8D%9A%E5%AE%A2/Lab%201%20MapReduce.html"},{default:t(()=>s[3]||(s[3]=[i("Lab 1 MapReduce")])),_:1})]),s[12]||(s[12]=a('<p><strong>场景类比</strong>：<br> 假设老板（Coordinator）想请大家（Workers）统计一大堆文件中的词频。正常情况下可以在群里发任务，让大家分头做、最后在群里汇总结果。但是现在没有群聊，只能私聊。</p><p><strong>实现思路（类比）</strong>：</p><ol><li>老板先把大文件分成小块，然后私信给小张、小李，让他们各自数自己的那部分词频（Map 相当于局部统计）。</li><li>小张和小李统计完后，再私信老板他们统计好的中间结果。</li><li>老板再根据他们的反馈，私信给小王，让小王把所有结果合并（Reduce）成最终的统计结果。</li><li>最终老板收集到结果后再单独私信各人公布最终成绩。</li></ol><p>没有群聊，协调者（老板）就得当中介，一个个分配、收集信息，最终保证数据处理完成。这体现了 MapReduce 的中心协调思想。</p><h3 id="lab-2-raft-一致性复制" tabindex="-1"><a class="header-anchor" href="#lab-2-raft-一致性复制"><span>Lab 2: Raft（一致性复制）</span></a></h3>',5)),l("p",null,[e(n,{to:"/3%20%E5%8D%9A%E5%AE%A2/Lab2%20raft.html"},{default:t(()=>s[4]||(s[4]=[i("Lab2 raft")])),_:1})]),s[13]||(s[13]=a("<p><strong>场景类比</strong>：<br> 有一群同事需要对一个决策达成一致（例如对公司章程文本的每次修订）。正常可以拉个群，全员投票通过就行，但现在只能点对点私聊。</p><p><strong>实现思路（类比）</strong>：</p><ol><li>大家约定好：先选出一个组长（Leader）。但没有群聊，选组长怎么办？大家只能相互私聊投票。当某个人超时没等到组长指令时，就私信给别人说：“要不我来当组长？” 收到多数同意后，他就成为组长。</li><li>作为组长的人，每次有新决策（日志条目）需要大家同意，他就逐个私信给其他人（Follower），收集他们的确认回复。</li><li>只要有过半的人同意，组长就把这条决策定下来，然后再私信告诉大家“决定已经生效”。</li><li>若组长挂了（不回复私信），其他人再次通过私信互相推选新组长，继续达成一致。</li></ol><p>这样的“点对点约定”和“多数确认”就是 Raft 的精髓：有一个 Leader，不断通过单聊确认大家的状态，确保日志同步和一致。</p>",4)),l("p",null,[e(n,{to:"/3%20%E5%8D%9A%E5%AE%A2/%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95.html"},{default:t(()=>s[5]||(s[5]=[i("共识算法")])),_:1}),s[6]||(s[6]=i(" 允许一组节点像一个整体一样一起工作，即使其中一些节点出现故障也能够继续工作下去，其正确性主要源于复制状态机的性质："))]),s[14]||(s[14]=a(`<blockquote><p>任何初始状态一样的状态机，如果执行的命令序列一样，则最终达到的状态也一样。如果将此特性应用在多参与者进行协商共识上，可以理解为系统中存在多个具有完全相同的状态机（参与者），这些状态机能最终保持一致的关键就是起始状态完全一致和执行命令序列完全一致。</p></blockquote><div class="language-mermaid line-numbers-mode" data-highlighter="shiki" data-ext="mermaid" data-title="mermaid" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">flowchart TD</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    subgraph Initial[&quot;初始状态 (完全相同)&quot;]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        S1[[&quot;状态机 A\\n状态: S0&quot;]]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        S2[[&quot;状态机 B\\n状态: S0&quot;]]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        S3[[&quot;状态机 C\\n状态: S0&quot;]]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    subgraph Commands[&quot;命令序列 (通过共识算法保证一致)&quot;]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        CMD1[&quot;命令1&quot;] --&gt; CMD2[&quot;命令2&quot;] --&gt; CMD3[&quot;命令3&quot;]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    subgraph Final[&quot;最终状态 (完全一致)&quot;]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        F1[[&quot;状态机 A\\n状态: S_final&quot;]]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        F2[[&quot;状态机 B\\n状态: S_final&quot;]]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        F3[[&quot;状态机 C\\n状态: S_final&quot;]]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    S1 --&gt; CMD1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    S2 --&gt; CMD1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    S3 --&gt; CMD1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    CMD3 --&gt; F1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    CMD3 --&gt; F2</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    CMD3 --&gt; F3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    classDef stateNode fill:#e1f5fe,stroke:#0288d1,stroke-width:2px</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    classDef commandNode fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    classDef subgraphStyle fill:#f5f5f5,stroke:#616161,stroke-width:2px</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    class S1,S2,S3,F1,F2,F3 stateNode</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    class CMD1,CMD2,CMD3 commandNode</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    class Initial,Commands,Final subgraphStyle</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lab-3-fault-tolerant-key-value-service-基于-raft-的容错-kv-存储" tabindex="-1"><a class="header-anchor" href="#lab-3-fault-tolerant-key-value-service-基于-raft-的容错-kv-存储"><span>Lab 3: Fault-tolerant Key/Value Service（基于 Raft 的容错 KV 存储）</span></a></h3><p><strong>场景类比</strong>：<br> 现在大家需要维护一份共享的钥匙-柜子对照表（KV存储），让团队随时查某把钥匙对应哪个柜子。为了避免单点故障，大家决定每个人都保存一份一模一样的表。</p><p><strong>实现思路（类比）</strong>：</p><ol><li>大家继续用 Raft 的方法：选出一个组长来负责更新KV表。</li><li>有人找组长私信说：“我新买了个柜子，记得更新表格。”</li><li>组长在收到新信息后，一个个私信给其他人让他们更新自己的表，并等待大多数人回复“已更新成功”后，组长再私信广播确认最终版本。</li><li>如果表太大，一条条更新太慢，组长可能会让大家定期拍快照（snapshot）。私聊发一下当前完整表格，确保崩溃恢复后能快速同步。</li></ol><p>这体现了实验中在 Raft 基础上实现分布式一致性存储的思路：用 Leader 协调每次更新，用多数确认保证数据强一致，单聊方式只是让协调成本提高，但基本原理不变。</p><h3 id="lab-4-shard-master-sharded-kv-分片与全局管理" tabindex="-1"><a class="header-anchor" href="#lab-4-shard-master-sharded-kv-分片与全局管理"><span>Lab 4: Shard Master &amp; Sharded KV（分片与全局管理）</span></a></h3><p><strong>场景类比</strong>：<br> 团队越来越大，柜子数量飙升，一个人管理所有柜子的映射表太累。大家想把键值对分片（shard），每个人只管一部分钥匙（类似把通讯录分成多本，每个人维护一部分）。<br> 但是仍然只能单聊！<br> 为了动态调整分片分配，需要一个「分片大师」（Shard Master），它统一规划谁负责哪部分。</p><p><strong>实现思路（类比）</strong>：</p><ol><li>Shard Master 在 Raft 基础上形成一个小团队（依然只能私聊选出组长，存储分片配置）。</li><li>客户端（同事）如果想查某个钥匙，就先私信 Shard Master：“这把钥匙的映射在哪个同事手里？”</li><li>Shard Master 根据当前分片规则，私信回复告诉你去找小张。</li><li>你再私信小张拿到对应的值。</li><li>如果 Shard Master 要调整分片（因为小张任务太多了），它就更新配置，再一对一私信告知各相关人分片变化情况，让他们数据迁移时相互点对点传输分片数据。</li></ol><p>整个流程就像一个没有群聊的公司运转，通过无数次的一对一私信来实现动态重分片和数据查询。虽然麻烦，但逻辑上还是能达成一致和共享状态。</p><hr><p><strong>总结类比</strong>：</p><ul><li><strong>Lab1(MapReduce)</strong>：像老板通过私聊给不同人分配统计任务，汇总结果。</li><li><strong>Lab2(Raft)</strong>：像用私聊投票选出组长，组长通过私聊给大家同步决定，确保所有人笔记本上写下相同决策。</li><li><strong>Lab3(容错KV)</strong>：在 Raft 基础上，组长通过私聊同步数据更新，让大家手头的KV表始终保持一致。</li><li><strong>Lab4(分片管理)</strong>：引入分片管理者，利用私聊来告诉你该去找谁查询数据；分片变化时，各节点也只能点对点地私聊传数据。</li></ul><p>这些过程的核心是：在无法群聊（无法广播）的环境中，通过点对点沟通和多数派确认，一层层搭建出容错、高一致性、高可用的分布式系统。</p><h2 id="拜占庭容错-pow" tabindex="-1"><a class="header-anchor" href="#拜占庭容错-pow"><span>拜占庭容错-POW</span></a></h2><p>首先，在公网的 P2P 系统中，我们必须设计出支持拜占庭容错的共识算法。相比 Raft 等非拜占庭容错的共识算法，区块链算法本质上利用了真实物理硬件的工作量证明 POF(Proof of Work) 而非可以随意捏造的 IP，域名等信息来标识节点从而解决女巫问题，其可以保证：只要网络中的大多数节点是无恶意的，恶意的节点就无法干被大家都承认的坏事。</p><h2 id="需求" tabindex="-1"><a class="header-anchor" href="#需求"><span>需求</span></a></h2><p>货币、账本？ <img src="https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F12%2F11%2F16-22-01-c84261436fb3914a4c3041f45d021ab8-202412111622093-388141.png" alt="image.png|500" loading="lazy"></p><ul><li>有一群完全不信任彼此的人（节点），他们都想维护一份共同的记账本（交易记录表）。</li><li>正常情况下，如果有一个群聊群，大家可以在群里轻松发布各自的交易记录和确认新的“账本版本”，谁赚了钱谁消费了大家一目了然。但现在没有群聊，只能一对一私聊，信息传播变慢且无保障。</li><li>这些人互不相信对方的身份，每个人都有可能是坏人，会试图伪造交易或发布虚假账本版本。</li></ul><h3 id="解法-pow" tabindex="-1"><a class="header-anchor" href="#解法-pow"><span>解法 PoW</span></a></h3><div class="language-mermaid line-numbers-mode" data-highlighter="shiki" data-ext="mermaid" data-title="mermaid" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">flowchart TD</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    subgraph 初始状态和首轮挖矿</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        G[Genesis] --&gt; B1A[Block1-A\\nPoW:0x00f]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    subgraph 多分叉情况</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        B1A --&gt; B2B[Block2-B\\nPoW:0x00e]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        B1A --&gt; B2A[Block2-A\\nPoW:0x00d]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        B1A --&gt; B2E[Block2-E\\nPoW:0x00c]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    subgraph 分叉解决</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        B2B --&gt; B3B[Block3-B\\nPoW:0x00f]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        B3B --&gt; B4C[Block4-C\\nPoW:0x00e]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        B4C --&gt; B5D[Block5-D\\nPoW:0x00d]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        B2A -.-&gt; |放弃分叉|B2B</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        B2E -.-&gt; |放弃分叉|B5D</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    subgraph 最终状态[&quot;最终状态 (所有节点)&quot;]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        B5D_A[Block5-D\\nPoW:0x00d]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        B5D_B[Block5-D\\nPoW:0x00d]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        B5D_C[Block5-D\\nPoW:0x00d]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        B5D_D[Block5-D\\nPoW:0x00d]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        B5D_E[Block5-D\\nPoW:0x00d]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    B5D --&gt; B5D_A</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    B5D --&gt; B5D_B</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    B5D --&gt; B5D_C</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    B5D --&gt; B5D_D</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    B5D --&gt; B5D_E</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    classDef genesis fill:#f9f9f9,stroke:#333,stroke-width:2px</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    classDef active fill:#e3f2fd,stroke:#1565c0,stroke-width:2px</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    classDef abandoned fill:#ffebee,stroke:#c62828,stroke-width:2px,stroke-dasharray: 5 5</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    classDef final fill:#e8f5e9,stroke:#2e7d32,stroke-width:2px</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    class G genesis</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    class B1A,B2B,B3B,B4C,B5D active</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    class B2A,B2E abandoned</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    class B5D_A,B5D_B,B5D_C,B5D_D,B5D_E final</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据结构-账单-branch" tabindex="-1"><a class="header-anchor" href="#数据结构-账单-branch"><span>数据结构：账单 branch</span></a></h2>`,24)),l("p",null,[s[8]||(s[8]=i("区块链是一个每十分钟多一个节点的链表，类似 ")),e(n,{to:"/3%20%E5%8D%9A%E5%AE%A2/Git.html"},{default:t(()=>s[7]||(s[7]=[i("Git")])),_:1}),s[9]||(s[9]=i(" 中的 branch"))]),s[15]||(s[15]=a('<p>每个 revision 是 zip 之后的账单信息，执行 zip 打包的人会被奖励比特币，奖励个数随四年半衰期减半一次，所以 Sum 求极限之后总奖励额度为 2100 万，比特币一共有 2100 万枚，和黄金一样具有稀缺性。</p><h2 id="如何确定谁-commit" tabindex="-1"><a class="header-anchor" href="#如何确定谁-commit"><span>如何确定谁 commit？</span></a></h2><p>工作量证明（Proof of Work）机制，通过穷举哈西函数的入参去 match 设置好的出参的 0 的个数来完成工作，打包权给谁是看 GPU 的计算工作量的，通过调整 0 的个数，进一步能保证十分钟打包一次的节奏。</p><h2 id="双重支付问题-一钱双花问题" tabindex="-1"><a class="header-anchor" href="#双重支付问题-一钱双花问题"><span>双重支付问题，一钱双花问题</span></a></h2><p>a 同时发出给 b 和 c 的账单，会导致分布式网络上不同的节点认知不同，直到打包的时候打包人的认知才会 commit 成所有人的认知。</p><h2 id="分叉问题-多-branch-问题" tabindex="-1"><a class="header-anchor" href="#分叉问题-多-branch-问题"><span>分叉问题，多 branch 问题</span></a></h2><p>链表可能会因为同时打包提交而变成多叉，所有人接收的时候以最长节点数的 branch 为准，因为 commit 是十分钟匀速的，所以其实也就是看哪个 branch 的最后一次提交时间更新鲜。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><ol><li><p><strong>无法信任的环境</strong>：<br> 大家必须在没有共同“老板”或“领导”的情况下更新账本。<br> 在微信单聊世界里，没有一个公认的权威，不存在“组长”角色帮助达成一致。所以，只能靠某种“难以造假”的方式来让大家普遍认可同一版本的账本。</p></li><li><p><strong>难题求解（挖矿）</strong>：<br> 想象每过一段时间（比如10分钟），可以生成一页新的账本页面（区块）来记录最近发生的交易。<br> 但谁来制作这页账本呢？<br> 在没有群聊的情况下，每个人都在自己家偷偷尝试解一道非常困难的数学难题（相当于 PoW 中的哈希碰撞），这个难题需要大量尝试才能解出来（比如不断给账本尾部附加随机数，直到满足某个严格条件）。<br> 解题没有捷径，只能多次尝试（消耗计算资源，就像矿工消耗算力），这样解决难题的人被认为确实投入了真实资源和成本。</p></li><li><p><strong>竞争出块（形成区块）</strong>：<br> 一旦某个节点（矿工）花费巨大努力解出了难题，他就有了“记账的权利”。他会赶紧把他做出的新账本页面（包含一些交易记录和解题结果的证明）通过私聊的方式，尽可能地发送给他认识的其他节点，让更多的人知道“我解出题了，这是最新账本页面”。</p></li><li><p><strong>消息的传播与认可</strong>：<br> 没有群聊的情况下，这个新账本页面的消息需要节点与节点之间一对一地私聊传播。就像谣言在朋友间口口相传一样，消息会慢慢扩散给更多的人。<br> 大家收到这份新账本页面后，会检查难题解答是否正确（校验PoW），如果确认无误，就把这个页面附在自己已有的账本后面，认可这是最新的合法状态。</p></li><li><p><strong>最长链原则（最长的账本版本获胜）</strong>：<br> 由于没有群聊，有可能不同的节点在类似时间各自解决了难题，形成两个版本的账本页面。这时大家就观望：哪个版本会传得更广、接下来有其他节点基于哪个版本继续解下一个难题？<br> 通常，最终会有一条账本链发展得更长（得到更多后续区块的叠加），因为大多数诚实节点只愿意在最多人认可的、难度最高（累计算力最大）的链上继续工作。<br> 当一条链变得更长时，其他分叉自然被人们抛弃。</p></li><li><p><strong>保证安全性</strong>：<br> 恶意节点想要更改过去的账本内容，需要重新解很多之前的难题，这在现实中成本极高。即使他能够一点点私信欺骗一些人，但由于难题求解代价高、时间长，他很难让经过全网传播的正规链被所有人放弃。<br> 最终，PoW 机制保证了在这个“全是私聊、无统一管理”的世界里，每个人只相信难度最高、工作量最大的账本链。这样即便只能一对一传消息，系统仍能在全球范围内达成一个难以篡改的公共账本。</p></li></ol><ul><li>在“只能私聊”的比喻中，比特币的 PoW 像是一个“公开比赛”： <ul><li>每个人暗地里努力“解题”（挖矿），无法走捷径。</li><li>谁先解出题，就获得提议新账本版本的权利。</li><li>其他人用私聊将该版本传播开来，并根据认证难题解答的正确性和链的长度来达成最终共识。</li></ul></li></ul><p>虽然没有群聊，但共识最终通过全网每个节点对工作量证明的认可以及最长链的选择规则慢慢达成，从而在无中心信任的环境中共享一个可靠的账本。</p><h2 id="go-的语法特色" tabindex="-1"><a class="header-anchor" href="#go-的语法特色"><span>GO 的语法特色</span></a></h2><p>总结中</p><h2 id="工具和思考" tabindex="-1"><a class="header-anchor" href="#工具和思考"><span>工具和思考</span></a></h2><ol><li>https://csdiy.wiki （问题）+ github （标准答案） + git（抄作业）</li><li>cursor、claude、o1 pro（好老师） <img src="https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F12%2F08%2F23-11-59-b0470a2b296a5e40d94534e4d6b2ba58-202412082311398-c257ef.png" alt="image.png|1000" loading="lazy"></li></ol><p>思考：</p><ol><li><p>宾利里的老鼠、所有领域的<strong>基本想法</strong>、复用概念 <img src="https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F12%2F11%2F16-26-03-be7298e0722519d9f80c9aa1fe28bdfa-202412111626604-c3a87f.png" alt="image.png|1000" loading="lazy"></p></li><li><p><strong>显学</strong>性质的技术已经无门槛可言，花费时间即可获得，学习曲线平滑。</p></li><li><p>实战和真实场景的意义在于给理论概念排一个真实的优先级，这是只学习理论时无法切实感受到的。</p></li></ol>',17))])}const A=d(c,[["render",o],["__file","比特币、共识算法、RAFT源码剖析.html.vue"]]),b=JSON.parse('{"path":"/3%20%E5%8D%9A%E5%AE%A2/%E6%AF%94%E7%89%B9%E5%B8%81%E3%80%81%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95%E3%80%81RAFT%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90.html","title":"","lang":"zh-CN","frontmatter":{"description":"比特币突破 10 万美金 image.png|1000image.png|1000 背景事件：比特币价格近期创新高，突破 10 万美金 比特币是一个没有中心机构管理的数字货币系统，全球无数节点共同维护一个账本，但他们是如何在缺乏权威机构的情况下保证每一笔交易记录一致且可信的？这一切的基础是“分布式共识（Distributed Consensus）”。 ...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/3%20%E5%8D%9A%E5%AE%A2/%E6%AF%94%E7%89%B9%E5%B8%81%E3%80%81%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95%E3%80%81RAFT%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:description","content":"比特币突破 10 万美金 image.png|1000image.png|1000 背景事件：比特币价格近期创新高，突破 10 万美金 比特币是一个没有中心机构管理的数字货币系统，全球无数节点共同维护一个账本，但他们是如何在缺乏权威机构的情况下保证每一笔交易记录一致且可信的？这一切的基础是“分布式共识（Distributed Consensus）”。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F12%2F08%2F23-44-05-281e654d442163be1833b57d0ff9dedd-202412082344323-207020.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-23T03:18:33.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-23T03:18:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F12%2F08%2F23-44-05-281e654d442163be1833b57d0ff9dedd-202412082344323-207020.png\\",\\"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F12%2F11%2F16-22-01-c84261436fb3914a4c3041f45d021ab8-202412111622093-388141.png\\",\\"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F12%2F08%2F23-11-59-b0470a2b296a5e40d94534e4d6b2ba58-202412082311398-c257ef.png\\",\\"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F12%2F11%2F16-26-03-be7298e0722519d9f80c9aa1fe28bdfa-202412111626604-c3a87f.png\\"],\\"dateModified\\":\\"2024-12-23T03:18:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"比特币突破 10 万美金","slug":"比特币突破-10-万美金","link":"#比特币突破-10-万美金","children":[]},{"level":2,"title":"什么是分布式共识？","slug":"什么是分布式共识","link":"#什么是分布式共识","children":[]},{"level":2,"title":"共识算法","slug":"共识算法","link":"#共识算法","children":[]},{"level":2,"title":"非拜占庭容错-RAFT","slug":"非拜占庭容错-raft","link":"#非拜占庭容错-raft","children":[{"level":3,"title":"基本设定","slug":"基本设定","link":"#基本设定","children":[]},{"level":3,"title":"Lab 1: MapReduce（分工处理信息）","slug":"lab-1-mapreduce-分工处理信息","link":"#lab-1-mapreduce-分工处理信息","children":[]},{"level":3,"title":"Lab 2: Raft（一致性复制）","slug":"lab-2-raft-一致性复制","link":"#lab-2-raft-一致性复制","children":[]},{"level":3,"title":"Lab 3: Fault-tolerant Key/Value Service（基于 Raft 的容错 KV 存储）","slug":"lab-3-fault-tolerant-key-value-service-基于-raft-的容错-kv-存储","link":"#lab-3-fault-tolerant-key-value-service-基于-raft-的容错-kv-存储","children":[]},{"level":3,"title":"Lab 4: Shard Master & Sharded KV（分片与全局管理）","slug":"lab-4-shard-master-sharded-kv-分片与全局管理","link":"#lab-4-shard-master-sharded-kv-分片与全局管理","children":[]}]},{"level":2,"title":"拜占庭容错-POW","slug":"拜占庭容错-pow","link":"#拜占庭容错-pow","children":[]},{"level":2,"title":"需求","slug":"需求","link":"#需求","children":[{"level":3,"title":"解法  PoW","slug":"解法-pow","link":"#解法-pow","children":[]}]},{"level":2,"title":"数据结构：账单 branch","slug":"数据结构-账单-branch","link":"#数据结构-账单-branch","children":[]},{"level":2,"title":"如何确定谁 commit？","slug":"如何确定谁-commit","link":"#如何确定谁-commit","children":[]},{"level":2,"title":"双重支付问题，一钱双花问题","slug":"双重支付问题-一钱双花问题","link":"#双重支付问题-一钱双花问题","children":[]},{"level":2,"title":"分叉问题，多 branch 问题","slug":"分叉问题-多-branch-问题","link":"#分叉问题-多-branch-问题","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]},{"level":2,"title":"GO 的语法特色","slug":"go-的语法特色","link":"#go-的语法特色","children":[]},{"level":2,"title":"工具和思考","slug":"工具和思考","link":"#工具和思考","children":[]}],"git":{"createdTime":1733928507000,"updatedTime":1734923913000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":2}]},"readingTime":{"minutes":18.84,"words":5652},"filePathRelative":"3 博客/比特币、共识算法、RAFT源码剖析.md","localizedDate":"2024年12月11日","autoDesc":true}');export{A as comp,b as data};
