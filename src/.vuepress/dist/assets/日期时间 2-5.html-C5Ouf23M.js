import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as r,g as o,f as n,o as i}from"./app-DokaGNO4.js";const p={};function m(l,e){return i(),a("div",null,[e[0]||(e[0]=r("p",null,"excerpt",-1)),o(" more "),e[1]||(e[1]=n('<h2 id="一、两种时间表示方式" tabindex="-1"><a class="header-anchor" href="#一、两种时间表示方式"><span>一、两种时间表示方式</span></a></h2><h2 id="_1-时区无关型" tabindex="-1"><a class="header-anchor" href="#_1-时区无关型"><span>1. 时区无关型</span></a></h2><p>记录从标准 Java 时代起始点（1970 年 1 月 1 日午夜 UTC）到某一特定时刻的秒数和纳秒数。</p><p><code>java.time.Instant</code> 可以被视为一个时间戳（timestamp）</p><h2 id="_2-时区相关型" tabindex="-1"><a class="header-anchor" href="#_2-时区相关型"><span>2. 时区相关型</span></a></h2><blockquote><p>正例：表示日期和时间的格式如下所示： new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;)</p></blockquote><p>1.【强制】日期格式化时，传入 pattern 中表示年份统一使用小写的 y。日期格式化时，yyyy 表示当天所在的年，而大写的 YYYY 代表是 week in which year（JDK7 之后引入的概念），意思是当天所在的周属于的年份</p><p>2.【强制】在日期格式中分清楚大写的 M 和小写的 m，大写的 H 和小写的 h 分别指代的意义。月份和分钟，24 小时制和 12 小时制</p><p>3.【强制】获取当前毫秒数：System.currentTimeMillis()；而不是 new Date().getTime()。 说明：获取纳秒级时间，则使用 System.nanoTime 的方式。在 JDK8 中，针对统计时间等场景，推荐使用 Instant 类。</p>',9))])}const d=t(p,[["render",m],["__file","日期时间 2-5.html.vue"]]),h=JSON.parse('{"path":"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E9%98%BF%E9%87%8C%E8%A7%84%E8%8C%83/%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%202-5.html","title":"日期时间 2-5","lang":"zh-CN","frontmatter":{"draw":null,"title":"日期时间 2-5","tags":["1 Dev","Java","代码味道","信息革命"],"date created":"2024-04-17T00:00:00.000Z","date modified":"2024-11-12T00:00:00.000Z","description":"excerpt 一、两种时间表示方式 1. 时区无关型 记录从标准 Java 时代起始点（1970 年 1 月 1 日午夜 UTC）到某一特定时刻的秒数和纳秒数。 java.time.Instant 可以被视为一个时间戳（timestamp） 2. 时区相关型 正例：表示日期和时间的格式如下所示： new SimpleDateFormat(\\"yyyy-...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E9%98%BF%E9%87%8C%E8%A7%84%E8%8C%83/%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%202-5.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:title","content":"日期时间 2-5"}],["meta",{"property":"og:description","content":"excerpt 一、两种时间表示方式 1. 时区无关型 记录从标准 Java 时代起始点（1970 年 1 月 1 日午夜 UTC）到某一特定时刻的秒数和纳秒数。 java.time.Instant 可以被视为一个时间戳（timestamp） 2. 时区相关型 正例：表示日期和时间的格式如下所示： new SimpleDateFormat(\\"yyyy-..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-24T16:17:22.000Z"}],["meta",{"property":"article:tag","content":"1 Dev"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"代码味道"}],["meta",{"property":"article:tag","content":"信息革命"}],["meta",{"property":"article:modified_time","content":"2024-11-24T16:17:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"日期时间 2-5\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-24T16:17:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、两种时间表示方式","slug":"一、两种时间表示方式","link":"#一、两种时间表示方式","children":[]},{"level":2,"title":"1. 时区无关型","slug":"_1-时区无关型","link":"#_1-时区无关型","children":[]},{"level":2,"title":"2. 时区相关型","slug":"_2-时区相关型","link":"#_2-时区相关型","children":[]}],"git":{"createdTime":1732465042000,"updatedTime":1732465042000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":1}]},"readingTime":{"minutes":1,"words":299},"filePathRelative":"2 第二大脑/1 节点/CS/编程语言/Java/阿里规范/日期时间 2-5.md","localizedDate":"2024年11月25日","autoDesc":true}');export{d as comp,h as data};
