import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,f as i,o as l}from"./app-DokaGNO4.js";const p={};function n(m,e){return l(),o("div",null,e[0]||(e[0]=[i("<p>在 Python 中，成员方法名前面的下划线有特殊的含义，主要用于表示方法的可见性和使用意图。以下是不同情况的解释：</p><ul><li><p>无下划线（如 <code>method_name</code>）：</p><ul><li><p>这是公共方法。</p></li><li><p>可以在类的外部自由访问和使用。</p></li><li><p>是类的公共 API 的一部分。</p></li></ul></li><li><p>单下划线（如 <code>_method_name</code>）：</p><ul><li><p>这表示该方法是&quot;内部使用&quot;的。</p></li><li><p>虽然技术上仍可以从类外部访问，但按照约定，这被视为私有方法。</p></li><li><p>表示该方法不应该在类外部直接使用，但不是严格强制的。</p></li><li><p>在 from module import * 语句中不会被导入。</p></li></ul></li></ul><ol><li><p>双下划线（如 <code>__method_name</code>）final：</p><ul><li><p>这会触发 Python 的名称改编（name mangling）机制。</p></li><li><p>实际的方法名会被改变为 _ClassName__method_name。</p></li><li><p>使得在继承时更难被子类意外覆盖。</p></li><li><p>提供了更强的私有性建议，虽然仍然可以访问，但需要知道改编后的名称。</p></li></ul></li><li><p>双下划线开头和结尾（如 <code>__method_name__</code>）：</p><ul><li><p>这表示特殊方法或魔术方法。</p></li><li><p>有特殊的用途，如 <strong>init</strong>、<strong>str</strong>、<strong>repr</strong> 等。</p></li><li><p>由 Python 解释器在特定情况下自动调用。</p></li></ul></li></ol><p>在你的 fill_chinese_segment 方法中，没有使用下划线前缀，这表明它是一个公共方法，可以在类的外部自由访问和使用。如果你想表明这个方法主要用于内部使用，你可以考虑将其改名为 _fill_chinese_segment。</p>",4)]))}const d=t(p,[["render",n],["__file","成员方法.html.vue"]]),c=JSON.parse('{"path":"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95.html","title":"成员方法","lang":"zh-CN","frontmatter":{"draw":null,"tags":[],"title":"成员方法","date created":"2024-10-23T00:00:00.000Z","date modified":"2024-11-12T00:00:00.000Z","description":"在 Python 中，成员方法名前面的下划线有特殊的含义，主要用于表示方法的可见性和使用意图。以下是不同情况的解释： 无下划线（如 method_name）： 这是公共方法。 可以在类的外部自由访问和使用。 是类的公共 API 的一部分。 单下划线（如 _method_name）： 这表示该方法是\\"内部使用\\"的。 虽然技术上仍可以从类外部访问，但按照约...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:title","content":"成员方法"}],["meta",{"property":"og:description","content":"在 Python 中，成员方法名前面的下划线有特殊的含义，主要用于表示方法的可见性和使用意图。以下是不同情况的解释： 无下划线（如 method_name）： 这是公共方法。 可以在类的外部自由访问和使用。 是类的公共 API 的一部分。 单下划线（如 _method_name）： 这表示该方法是\\"内部使用\\"的。 虽然技术上仍可以从类外部访问，但按照约..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-24T16:17:22.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-24T16:17:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"成员方法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-24T16:17:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1732465042000,"updatedTime":1732465042000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":1}]},"readingTime":{"minutes":1.27,"words":380},"filePathRelative":"2 第二大脑/1 节点/CS/编程语言/Python/成员方法.md","localizedDate":"2024年11月25日","autoDesc":true}');export{d as comp,c as data};
