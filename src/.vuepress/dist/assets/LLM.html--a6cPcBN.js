import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,f as a,o as n}from"./app-DokaGNO4.js";const t={};function p(o,i){return n(),l("div",null,i[0]||(i[0]=[a(`<p>1.关键词是什么 2.how to send the context 是prompt或者 AI 时代的最关键命题</p><p>technical probpem是最容易解决的</p><p>business conrext 过于个性化甚至是不可言说之物。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p>一直非常惊叹深度学习后的大模型推理编程竟然如此简单，Llama-3 70B，就两个文件，一个140G的参数文件，一个500行左右的C程序，你就可以和一个压缩了15T tokens的大语言模型对话！ https://x.com/TaNGSoFT/status/1784338359068033527</p><h2 id="两个问题" tabindex="-1"><a class="header-anchor" href="#两个问题"><span>两个问题</span></a></h2><h3 id="大模型幻觉" tabindex="-1"><a class="header-anchor" href="#大模型幻觉"><span>大模型幻觉</span></a></h3><p>&quot; 大模型幻觉 &quot; 是指人们在与大语言模型交互时可能产生的一种错觉，即错误地认为这些模型具有真正的理解能力、意识或感知。这种幻觉通常源于模型生成的文本质量非常高，能够流畅、连贯地回答问题或进行对话，使人们感觉就像是在与一个真实的、有理解力的人类交谈。 举一个论坛上的例子，怎么写出更好的 prompt？回答 A 介绍了一堆循序渐进的步骤，但是高赞的回答 B 说到，这一切的前提首先是它是个 prompt 专家！那么它是吗？</p><h3 id="提示词工程有必要吗" tabindex="-1"><a class="header-anchor" href="#提示词工程有必要吗"><span>提示词工程有必要吗？</span></a></h3><p>应用开发中是有用的！以 json 输出为例<br> 个人应用中性价比不高，另外对于一个黑箱，大量场景无法测试收益，设置为 template 嵌入到工具中更高效，核心是人设 + 结果约束</p><ul><li>问题中加上一句我是十岁小孩</li><li>问题中加上一句，不确定的不要瞎编</li></ul><h2 id="两类场景" tabindex="-1"><a class="header-anchor" href="#两类场景"><span>两类场景</span></a></h2><h3 id="ai-决策" tabindex="-1"><a class="header-anchor" href="#ai-决策"><span>AI 决策</span></a></h3><figure><img src="https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F10%2F21%2F14-37-37-fa295975d703324c629da687b0903cef-202410211437508-d16c73.png" alt="image.png|1000" tabindex="0" loading="lazy"><figcaption>image.png|1000</figcaption></figure><p>在旅行规划场景，这是大模型幻觉吗？这个决策过程是科学有效的吗？用户真的去玩了七天后，回来会满意吗？这其实是一个未验证的能力，也可能是未来 AI 发展的魅力所在，因为我们人脑可能也没有那么强的逻辑，解决一个问题时似乎也是产生一个模糊的似是而非的经验性的解决步骤。</p><h3 id="英语对话场景" tabindex="-1"><a class="header-anchor" href="#英语对话场景"><span>英语对话场景</span></a></h3><figure><img src="https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F10%2F21%2F14-37-55-78121c9177f8221dfbda8620fc7a9768-202410211437113-a2a447.png" alt="image.png|1000" tabindex="0" loading="lazy"><figcaption>image.png|1000</figcaption></figure><ul><li>这个工具能够奏效的逻辑起点是：对于中文，gpt 只会说没道理的话，但是不会产生不通顺的话，而通顺正是这个场景下用户的使用目的。</li><li>只是复盘的工具，解决不了沟通的欲望。市面上一些其他的口语 AI 应用，无法让人产生持久的交流欲望<br> 是人类的工具，但是无法提供情感支持</li></ul><h2 id="两种工具" tabindex="-1"><a class="header-anchor" href="#两种工具"><span>两种工具</span></a></h2><pre><code>  有两类工具，第一种是拿来就可以解决问题，实现目标的，比如战场上的一把枪，可以对赤手空拳的敌人降维打击；第二种是拿来可以提高我们自己解决问题的能力的，比如一个哑铃，我们可以通过它练习自己的力量，从而战胜力量不如我们的敌人。
</code></pre><h3 id="第一类工具" tabindex="-1"><a class="header-anchor" href="#第一类工具"><span>第一类工具</span></a></h3><ul><li>基本都是围绕着它的两个核心能力展开的，1: 语义理解 2: 一定能生成一个回答</li><li>检查错别字</li><li>降重改写</li><li>简单的信息检索 <ul><li><ol><li>语义理解</li></ol></li><li><ol start="2"><li>适合个人对于一个新领域的冷启动，适合没有官方文档，或者官方文档不够完整或者不够有趣的前提下，提供一定的词汇扩展和交互性。</li></ol></li><li><ol start="3"><li>但是对于更细分更专门化的知识更好的选择是找到对应的群体</li></ol></li></ul></li></ul><h3 id="第二类工具" tabindex="-1"><a class="header-anchor" href="#第二类工具"><span>第二类工具</span></a></h3><ul><li>语言学习</li><li>对于一个新领域的冷启动，交互式初探</li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><ul><li>当 AI 作为第一类工具时，一定会被各种公司通过商业化制作成简单易上手的产品，对于个人来说，无需焦虑，只需享受，真的好用的 AI 产品一定会快速出圈！ <ul><li>生成 PPT、图片</li></ul></li><li>当 AI 作为第二类工具时，更考验我们的自我规划，自我探索，热爱和自律，一个比较现实的切入点是，尽可能多得保留个人痕迹的数据。 <ul><li>借助 AI 在新领域快速达到 70 分的水平，当这样的领域足够多时，会发生个人能力的『涌现』</li></ul></li></ul><h2 id="function-call" tabindex="-1"><a class="header-anchor" href="#function-call"><span>function call</span></a></h2><p>是的,OpenAI确实支持function calling功能。这是一个强大的特性,允许模型与外部工具和系统进行交互。以下是关于OpenAI function calling的一些关键信息:</p><h3 id="功能概述" tabindex="-1"><a class="header-anchor" href="#功能概述"><span>功能概述</span></a></h3><p>Function calling允许您描述自定义函数或外部API给助手,使助手能够智能地调用这些函数,输出包含相关参数的JSON对象[</p><p>2</p><p>](https://help.openai.com/en/articles/9492280-function-calling-in-the-chat-playground)。</p><h3 id="主要用途" tabindex="-1"><a class="header-anchor" href="#主要用途"><span>主要用途</span></a></h3><p>Function calling适用于多种场景,包括:</p><ol><li><p>使助手能够获取数据,如从内部系统获取最新的客户数据。</p></li><li><p>使助手能够执行操作,如根据用户偏好和日历可用性安排会议。</p></li><li><p>使助手能够进行计算,如数学辅导助手执行数学计算。</p></li><li><p>构建复杂的工作流,如数据提取管道。</p></li><li><p>修改应用程序的UI,如根据用户输入在地图上渲染标记[</p><p>3</p></li></ol><p>](https://platform.openai.com/docs/guides/function-calling)。</p><h3 id="实现方式" tabindex="-1"><a class="header-anchor" href="#实现方式"><span>实现方式</span></a></h3><p>OpenAI提供了多种方式来实现function calling:</p><ol><li><p>Chat Completions API: 这是最常用的方法,允许您在对话中使用function calling[</p><p>3</p></li></ol><p>](https://platform.openai.com/docs/guides/function-calling)。</p><ol start="2"><li><p>Assistants API: 专门为构建AI助手设计的API,也支持function calling[</p><p>4</p></li></ol><p>](https://help.openai.com/en/articles/8555517-function-calling-in-the-openai-api)。</p><ol start="3"><li><p>Batch API: 用于批量处理的API,同样支持function calling[</p><p>3</p></li></ol><p>](https://platform.openai.com/docs/guides/function-calling)。</p><h3 id="特殊功能" tabindex="-1"><a class="header-anchor" href="#特殊功能"><span>特殊功能</span></a></h3><ol><li><p>并行函数调用: 支持同时执行多个函数调用,提高效率[</p><p>1</p></li></ol><p>](https://learn.microsoft.com/pl-pl/azure/ai-services/openai/how-to/function-calling?tabs=non-streaming%2Cpython)[</p><pre><code>2
</code></pre><p>](https://help.openai.com/en/articles/9492280-function-calling-in-the-chat-playground)。</p><ol start="2"><li><p>结构化输出: 通过设置<code>strict: true</code>,确保模型生成的函数调用参数完全匹配您提供的JSON Schema[</p><p>3</p></li></ol><p>](https://platform.openai.com/docs/guides/function-calling)[</p><pre><code>4
</code></pre><p>](https://help.openai.com/en/articles/8555517-function-calling-in-the-openai-api)。</p><h3 id="使用步骤" tabindex="-1"><a class="header-anchor" href="#使用步骤"><span>使用步骤</span></a></h3><ol><li><p>选择您代码库中希望模型能够调用的函数。</p></li><li><p>向模型描述您的函数,使其知道如何调用。</p></li><li><p>调用Chat Completions API,包含您的函数和用户输入。</p></li><li><p>使用模型的响应来调用您的API或函数。</p></li><li><p>再次调用Chat Completions API,包含您函数的响应,以获得最终回答[</p><p>3</p></li></ol><p>](https://platform.openai.com/docs/guides/function-calling)。</p><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h3><ul><li><p>模型本身不会执行函数,它只会生成可用于调用函数的参数。您的应用程序始终保持完全控制[</p><p>3</p></li></ul><p>](https://platform.openai.com/docs/guides/function-calling)。</p><ul><li><p>在Chat Playground中,您可以通过点击右侧配置面板中的&quot;+ Add function&quot;来添加新函数[</p><p>2</p></li></ul><p>](https://help.openai.com/en/articles/9492280-function-calling-in-the-chat-playground)。</p><p>总之,OpenAI的function calling是一个强大的功能,可以显著增强AI模型的能力,使其能够与外部系统和工具无缝集成,从而创建更智能、更实用的应用程序。</p>`,62)]))}const r=e(t,[["render",p],["__file","LLM.html.vue"]]),h=JSON.parse('{"path":"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/AIGC/LLM.html","title":"LLM","lang":"zh-CN","frontmatter":{"draw":null,"tags":[],"title":"LLM","date created":"2024-10-21T00:00:00.000Z","date modified":"2024-11-12T00:00:00.000Z","description":"1.关键词是什么 2.how to send the context 是prompt或者 AI 时代的最关键命题 technical probpem是最容易解决的 business conrext 过于个性化甚至是不可言说之物。 参考资料 一直非常惊叹深度学习后的大模型推理编程竟然如此简单，Llama-3 70B，就两个文件，一个140G的参数文件，一...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/AIGC/LLM.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:title","content":"LLM"}],["meta",{"property":"og:description","content":"1.关键词是什么 2.how to send the context 是prompt或者 AI 时代的最关键命题 technical probpem是最容易解决的 business conrext 过于个性化甚至是不可言说之物。 参考资料 一直非常惊叹深度学习后的大模型推理编程竟然如此简单，Llama-3 70B，就两个文件，一个140G的参数文件，一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F10%2F21%2F14-37-37-fa295975d703324c629da687b0903cef-202410211437508-d16c73.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-27T06:52:25.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-27T06:52:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"LLM\\",\\"image\\":[\\"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F10%2F21%2F14-37-37-fa295975d703324c629da687b0903cef-202410211437508-d16c73.png\\",\\"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F10%2F21%2F14-37-55-78121c9177f8221dfbda8620fc7a9768-202410211437113-a2a447.png\\"],\\"dateModified\\":\\"2024-12-27T06:52:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]},{"level":2,"title":"两个问题","slug":"两个问题","link":"#两个问题","children":[{"level":3,"title":"大模型幻觉","slug":"大模型幻觉","link":"#大模型幻觉","children":[]},{"level":3,"title":"提示词工程有必要吗？","slug":"提示词工程有必要吗","link":"#提示词工程有必要吗","children":[]}]},{"level":2,"title":"两类场景","slug":"两类场景","link":"#两类场景","children":[{"level":3,"title":"AI 决策","slug":"ai-决策","link":"#ai-决策","children":[]},{"level":3,"title":"英语对话场景","slug":"英语对话场景","link":"#英语对话场景","children":[]}]},{"level":2,"title":"两种工具","slug":"两种工具","link":"#两种工具","children":[{"level":3,"title":"第一类工具","slug":"第一类工具","link":"#第一类工具","children":[]},{"level":3,"title":"第二类工具","slug":"第二类工具","link":"#第二类工具","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"function call","slug":"function-call","link":"#function-call","children":[{"level":3,"title":"功能概述","slug":"功能概述","link":"#功能概述","children":[]},{"level":3,"title":"主要用途","slug":"主要用途","link":"#主要用途","children":[]},{"level":3,"title":"实现方式","slug":"实现方式","link":"#实现方式","children":[]},{"level":3,"title":"特殊功能","slug":"特殊功能","link":"#特殊功能","children":[]},{"level":3,"title":"使用步骤","slug":"使用步骤","link":"#使用步骤","children":[]},{"level":3,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]}]}],"git":{"createdTime":1732465042000,"updatedTime":1735282345000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":2}]},"readingTime":{"minutes":6.07,"words":1820},"filePathRelative":"2 第二大脑/1 节点/CS/人工智能/AIGC/LLM.md","localizedDate":"2024年11月25日","autoDesc":true}');export{r as comp,h as data};
