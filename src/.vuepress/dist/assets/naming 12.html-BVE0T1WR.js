import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as t,b as o,g as p,f as r,o as i}from"./app-DokaGNO4.js";const c={};function l(m,e){return i(),n("div",null,[e[0]||(e[0]=t("blockquote",null,[t("p",null,[o("There are only two hard things in Computer Science: cache invalidation and naming things."),t("br"),o(" —Phil Karlton")])],-1)),p(" more "),e[1]||(e[1]=r("<p>1.【强制】所有编程相关的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。</p><blockquote><p>easy</p></blockquote><p>2.【强制】所有编程相关的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。</p><blockquote><p>想到一个 mianSha 报价的命名</p></blockquote><p>3.【强制】代码和注释中都要避免使用任何人类语言中的种族歧视性或侮辱性词语。</p><blockquote><p>别写 fuck</p></blockquote><p>4.【强制】类名使用 UpperCamelCase 风格，以下情形例外：DO / PO / DTO / BO / VO / UID 等。</p><blockquote><p>正例：ForceCode / UserDO / HtmlDTO / XmlService / TcpUdpDeal / TaPromotion<br> 反例：forcecode / UserDo / HTMLDto / XMLService / TCPUDPDeal / TAPromotion<br> Polaris 中所有的 VO 都是 Vo</p></blockquote><p>5.【强制】方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格。</p><blockquote><p>easy</p></blockquote><p>6.【强制】常量命名应该全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。</p><blockquote><p>比如很多开关 switch 的命名，尽量长一点解释清晰一点</p></blockquote><p>7.【强制】抽象类命名使用 Abstract 或 Base 开头；异常类命名使用 Exception 结尾，测试类命名以它要 测试的类的名称开始，以 Test 结尾。</p><blockquote><p>easy</p></blockquote><p>8.【强制】类型与中括号紧挨相连来定义数组。</p><blockquote><p>自己一直就是这个习惯</p></blockquote><p>9.【强制】POJO 类中的任何布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误。</p><blockquote><p>在命名、ORM、数据库等多处规范中都有出现</p></blockquote><p>10.【强制】包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。</p><blockquote><p>包名只单数，类名可复数</p></blockquote><p>11.【强制】避免在子父类的成员变量之间、或者不同代码块的局部变量之问采用完全相同的命名，使可理解性降低。</p><p>12.【强制】杜绝完全不规范的英文缩写，避免望文不知义。</p><blockquote><p>easy</p></blockquote>",23))])}const u=a(c,[["render",l],["__file","naming 12.html.vue"]]),g=JSON.parse('{"path":"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E9%98%BF%E9%87%8C%E8%A7%84%E8%8C%83/naming%2012.html","title":"naming 12","lang":"zh-CN","frontmatter":{"draw":null,"title":"naming 12","tags":["1 Dev","Java","代码味道","信息革命"],"date created":"2024-04-17T00:00:00.000Z","date modified":"2024-11-12T00:00:00.000Z","description":"There are only two hard things in Computer Science: cache invalidation and naming things. —Phil Karlton 1.【强制】所有编程相关的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。 easy 2.【强制】所有编程相关的命名严禁使用拼音与...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E9%98%BF%E9%87%8C%E8%A7%84%E8%8C%83/naming%2012.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:title","content":"naming 12"}],["meta",{"property":"og:description","content":"There are only two hard things in Computer Science: cache invalidation and naming things. —Phil Karlton 1.【强制】所有编程相关的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。 easy 2.【强制】所有编程相关的命名严禁使用拼音与..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-24T16:17:22.000Z"}],["meta",{"property":"article:tag","content":"1 Dev"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"代码味道"}],["meta",{"property":"article:tag","content":"信息革命"}],["meta",{"property":"article:modified_time","content":"2024-11-24T16:17:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"naming 12\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-24T16:17:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1732465042000,"updatedTime":1732465042000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":1}]},"readingTime":{"minutes":1.97,"words":591},"filePathRelative":"2 第二大脑/1 节点/CS/编程语言/Java/阿里规范/naming 12.md","localizedDate":"2024年11月25日","autoDesc":true}');export{u as comp,g as data};
