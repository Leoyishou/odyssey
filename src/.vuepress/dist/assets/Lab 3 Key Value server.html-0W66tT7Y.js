import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,f as t,a as r,d as o,e as n,r as p,o as s,b as d}from"./app-DokaGNO4.js";const u={};function c(m,e){const l=p("RouteLink");return s(),i("div",null,[e[1]||(e[1]=t('<h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2><p><a href="https://tanxinyu.work/raft/" target="_blank" rel="noopener noreferrer">Raft 算法介绍 - 谭新宇的博客 (tanxinyu.work)</a></p><h2 id="过程" tabindex="-1"><a class="header-anchor" href="#过程"><span>过程</span></a></h2>',3)),r("p",null,[o(l,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%AF%BE%E7%A8%8B/MIT6.824/Raft.html"},{default:n(()=>e[0]||(e[0]=[d("Raft")])),_:1})]),e[2]||(e[2]=t("<p>这个实验是关于实现一个单机版的键值存储服务器。以下是这个实验的主要内容和运行方法：</p><ol><li><p>实验目标：</p><ul><li>实现一个键值存储服务器，支持 Put、Append 和 Get 操作。</li><li>确保每个操作只执行一次，即使在网络故障的情况下。</li><li>实现线性化（linearizable）操作。</li></ul></li><li><p>准备工作：</p><ul><li>确保你在 ~/6.5840 目录下。</li><li>使用 git pull 获取最新的实验代码。</li></ul></li><li><p>运行测试： <code>cd ~/6.5840 git pull cd src/kvsrv go test</code></p></li><li><p>实现步骤：</p><ul><li>修改 client.go 中的 Clerk Put/Append/Get 方法，添加 RPC 发送代码。</li><li>在 server.go 中实现 Put、Append 和 Get 的 RPC 处理程序。</li><li>修改代码以处理网络故障（丢包）情况。</li><li>实现重试机制和重复请求过滤。</li></ul></li><li><p>测试通过标准：</p><ul><li>你的实现应该通过所有测试，包括单客户端、多客户端、不可靠网络等情况。</li><li>使用 go test -race 确保代码没有竞态条件。</li></ul></li><li><p>关键实现点：</p><ul><li>确保每个操作只执行一次，即使在重试的情况下。</li><li>实现唯一标识客户端操作的机制。</li><li>考虑服务器需要维护哪些状态来处理重复请求。</li><li>设计一个能快速释放服务器内存的重复检测方案。</li></ul></li></ol><p>这个实验主要挑战在于处理网络不可靠性的同时保证操作的正确性和一致性。你需要仔细考虑如何在客户端和服务器端实现重试和去重机制。</p>",3))])}const E=a(u,[["render",c],["__file","Lab 3 Key Value server.html.vue"]]),y=JSON.parse('{"path":"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%AF%BE%E7%A8%8B/MIT6.824/Lab%203%20Key%20Value%20server.html","title":"Lab 2 Key Value server","lang":"zh-CN","frontmatter":{"draw":null,"tags":[],"title":"Lab 2 Key Value server","date created":"2024-08-07T00:00:00.000Z","date modified":"2024-11-12T00:00:00.000Z","description":"资料 Raft 算法介绍 - 谭新宇的博客 (tanxinyu.work) 过程 这个实验是关于实现一个单机版的键值存储服务器。以下是这个实验的主要内容和运行方法： 实验目标： 实现一个键值存储服务器，支持 Put、Append 和 Get 操作。 确保每个操作只执行一次，即使在网络故障的情况下。 实现线性化（linearizable）操作。 准备工作...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%AF%BE%E7%A8%8B/MIT6.824/Lab%203%20Key%20Value%20server.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:title","content":"Lab 2 Key Value server"}],["meta",{"property":"og:description","content":"资料 Raft 算法介绍 - 谭新宇的博客 (tanxinyu.work) 过程 这个实验是关于实现一个单机版的键值存储服务器。以下是这个实验的主要内容和运行方法： 实验目标： 实现一个键值存储服务器，支持 Put、Append 和 Get 操作。 确保每个操作只执行一次，即使在网络故障的情况下。 实现线性化（linearizable）操作。 准备工作..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-11T14:48:27.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-11T14:48:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Lab 2 Key Value server\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-11T14:48:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]},{"level":2,"title":"过程","slug":"过程","link":"#过程","children":[]}],"git":{"createdTime":1732465042000,"updatedTime":1733928507000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":1}]},"readingTime":{"minutes":1.42,"words":427},"filePathRelative":"2 第二大脑/1 节点/CS/课程/MIT6.824/Lab 3 Key Value server.md","localizedDate":"2024年11月25日","autoDesc":true}');export{E as comp,y as data};
