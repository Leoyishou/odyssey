import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as t,b as r,d as a,e as s,f as p,r as n,o as c}from"./app-DokaGNO4.js";const d={},u={start:"2"};function m(h,e){const o=n("RouteLink");return c(),i("div",null,[e[5]||(e[5]=t("h3",{id:"打印",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#打印"},[t("span",null,"打印")])],-1)),t("ol",u,[e[3]||(e[3]=t("li",null,[t("p",null,"找bug的时候， 我更喜欢用AI自动化的生成很多 print, 然后再根据结构让AI找出问题的地方， 缩小bug范围， 比直接让AI找出bug， 可能更快， 因为有时候我们找不到bug， 提示词本身就有误导")],-1)),t("li",null,[t("p",null,[e[1]||(e[1]=r("从")),a(o,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/2%20%E9%A3%9E%E8%BD%AE/0%20%E5%B7%A5%E5%85%B7%E7%B3%BB%E7%BB%9F/AI%E5%B7%A5%E5%85%B7/Dribbble.html"},{default:s(()=>e[0]||(e[0]=[r("Dribbble")])),_:1}),e[2]||(e[2]=r("找 UI 灵感，截图给 cursor"))])]),e[4]||(e[4]=t("li",null,[t("p",null,"修改 ai 给的第一版错误代码的时候，为了排查原因可以让 ai 加一些日志，然后运行，然后把日志结果给ai，帮助 ai 排查")],-1))]),e[6]||(e[6]=p('<p>https://www.v2ex.com/t/1070302#reply2</p><p>Chat 是有记忆功能的长聊天，Composer 是一次性的对话</p><h2 id="右侧-review" tabindex="-1"><a class="header-anchor" href="#右侧-review"><span>右侧 review</span></a></h2><p>根据 git 内容的变更，来对代码做增两 review</p><h2 id="rag" tabindex="-1"><a class="header-anchor" href="#rag"><span>RAG</span></a></h2><p>两种方式，<code>@</code>或者在setting-feature 里手动加文件<br> 所以，如果做什么屎山项目，可以多试试在提问之前，先把RAG给做了。</p><h2 id="real-world-examples" tabindex="-1"><a class="header-anchor" href="#real-world-examples"><span>Real World Examples</span></a></h2><p>一些函数在 github 里的实际用法案例</p><h2 id="apply-前后版本的-checkout" tabindex="-1"><a class="header-anchor" href="#apply-前后版本的-checkout"><span>apply 前后版本的 checkout</span></a></h2><p>1/ 先头脑风暴，再写代码 Claude/o1在这里是你最好的助手。你应该创建一个包含项目每一个细节的完整文档。</p><ul><li>核心功能</li><li>目标和宗旨</li><li>技术栈和使用的包</li><li>项目文件夹结构</li><li>数据库设计</li><li>登陆页面组件</li><li>配色方案</li><li>文案 将所有这些内容放入一个名为 <code>[http://instruction.md](https://t.co/GzdTkD8jW4)</code> 的文件（名字随便起），这样Cursor可以随时进行索引。</li></ul><p>2/ 获取一个 <code>.cursorrules</code> 文件 很多人忽略了这一步。我理解，编写 <code>.cursorrules</code> 文件可能让人望而生畏，但它确实能带来极大帮助。这是一个我总是推荐的优秀仓库，可以帮助你入门。选择你的技术栈，并根据你的偏好进行编辑： https://github.com/PatrickJS/awesome-cursorrules?tab=readme-ov-file 这个网站提供了很多最佳实践</p><p>3/ 使用 v0 构建登陆页面 从你的 <code>[http://instructions.md](https://t.co/dpTHYqzjIN)</code> 文件中获取核心功能、配色方案和组件。额外提示：可以参考其他登陆页面的截图，以便让 v0 更好地理解你的想法。使用组件库，我推荐 shadcn，因为 v0 与它配合良好。我也常用 MagicUI。记住，你不需要让 v0 完美无缺。你只需要一个足够好的基础，便于你后续在 Cursor 中进一步编辑和优化。</p><p>4/ 聊天 vs 编辑器 使用聊天功能完成较小的任务，解释代码/命令。可以用它来提问和导航。用编辑器（Composer）来写代码，始终在编辑器中标记你的 <code>[http://instructions.md](https://t.co/dpTHYqzjIN)</code> 文件，并告诉它随着项目进展进行更新。每次只让编辑器执行一个任务，逐步进行更改。如果你让它编辑多个文件，它可能会产生幻觉，导致你失去控制。在批准更改之前，始终检查代码是否干净整洁。将你的Claude积分留给编辑器，使用GPT-4o-mini来进行聊天。</p><ol><li>Docs 标记你的文档 复制你所使用框架的文档。进入Cursor设置 &gt; 功能 &gt; 文档 粘贴这些链接，并在聊天/编辑器中通过 <code>@ Docs</code> 使用它们。</li></ol>',15))])}const g=l(d,[["render",m],["__file","cursor.html.vue"]]),B=JSON.parse('{"path":"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/2%20%E9%A3%9E%E8%BD%AE/0%20%E5%B7%A5%E5%85%B7%E7%B3%BB%E7%BB%9F/AI%E5%B7%A5%E5%85%B7/cursor.html","title":"cursor","lang":"zh-CN","frontmatter":{"draw":null,"tags":[],"title":"cursor","date created":"2024-09-09T00:00:00.000Z","date modified":"2024-11-12T00:00:00.000Z","description":"打印 找bug的时候， 我更喜欢用AI自动化的生成很多 print, 然后再根据结构让AI找出问题的地方， 缩小bug范围， 比直接让AI找出bug， 可能更快， 因为有时候我们找不到bug， 提示词本身就有误导 从找 UI 灵感，截图给 cursor 修改 ai 给的第一版错误代码的时候，为了排查原因可以让 ai 加一些日志，然后运行，然后把日志结果...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/2%20%E9%A3%9E%E8%BD%AE/0%20%E5%B7%A5%E5%85%B7%E7%B3%BB%E7%BB%9F/AI%E5%B7%A5%E5%85%B7/cursor.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:title","content":"cursor"}],["meta",{"property":"og:description","content":"打印 找bug的时候， 我更喜欢用AI自动化的生成很多 print, 然后再根据结构让AI找出问题的地方， 缩小bug范围， 比直接让AI找出bug， 可能更快， 因为有时候我们找不到bug， 提示词本身就有误导 从找 UI 灵感，截图给 cursor 修改 ai 给的第一版错误代码的时候，为了排查原因可以让 ai 加一些日志，然后运行，然后把日志结果..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-23T03:18:33.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-23T03:18:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"cursor\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-23T03:18:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":3,"title":"打印","slug":"打印","link":"#打印","children":[]},{"level":2,"title":"右侧 review","slug":"右侧-review","link":"#右侧-review","children":[]},{"level":2,"title":"RAG","slug":"rag","link":"#rag","children":[]},{"level":2,"title":"Real World Examples","slug":"real-world-examples","link":"#real-world-examples","children":[]},{"level":2,"title":"apply 前后版本的 checkout","slug":"apply-前后版本的-checkout","link":"#apply-前后版本的-checkout","children":[]}],"git":{"createdTime":1732465042000,"updatedTime":1734923913000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":1}]},"readingTime":{"minutes":2.74,"words":821},"filePathRelative":"2 第二大脑/2 飞轮/0 工具系统/AI工具/cursor.md","localizedDate":"2024年11月25日","autoDesc":true}');export{g as comp,B as data};
