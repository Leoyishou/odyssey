import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,f as l,o as n}from"./app-DokaGNO4.js";const t={};function e(h,i){return n(),a("div",null,i[0]||(i[0]=[l(`<h1 id="java中的协变性-covariance-详解" tabindex="-1"><a class="header-anchor" href="#java中的协变性-covariance-详解"><span>Java中的协变性(Covariance)详解</span></a></h1><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h2><p>协变(covariant)定义：如果类型Son是类型Father的子类型，那么复合类型Son[]也是Father[]的子类型。</p><h3 id="数组与list的协变性比较" tabindex="-1"><a class="header-anchor" href="#数组与list的协变性比较"><span>数组与List的协变性比较</span></a></h3><ul><li><strong>数组是协变的</strong>：Array[父类]是Array[子类]的父类型</li><li><strong>List不是协变的</strong>：List&lt;父类&gt;不是List&lt;子类&gt;的父类型</li></ul><h2 id="设计原因" tabindex="-1"><a class="header-anchor" href="#设计原因"><span>设计原因</span></a></h2><p>Java的这种设计主要基于历史原因：</p><ol><li><p><strong>早期设计决策</strong></p><ul><li>Java 1.0和1.1时期没有泛型</li><li>数组作为主要集合类型，设计成协变提供了更大灵活性</li></ul></li><li><p><strong>向后兼容性</strong></p><ul><li>Java 5(2004年)引入泛型时</li><li>为保持兼容性，保留了数组的协变特性</li></ul></li></ol><h2 id="协变的优缺点" tabindex="-1"><a class="header-anchor" href="#协变的优缺点"><span>协变的优缺点</span></a></h2><h3 id="优点-提供灵活性" tabindex="-1"><a class="header-anchor" href="#优点-提供灵活性"><span>优点：提供灵活性</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 数组协变示例 - 合法代码</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Animal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Dog</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Animal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AnimalShelter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Animal</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">[] </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getAnimals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Animal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DogShelter</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AnimalShelter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Dog</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">[] </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getAnimals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {    </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 这里是合法的</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Dog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="缺点-类型安全问题" tabindex="-1"><a class="header-anchor" href="#缺点-类型安全问题"><span>缺点：类型安全问题</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 数组协变的安全隐患</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Number</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] numbers </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     // 编译通过</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">numbers[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3.14</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                     // 运行时抛出ArrayStoreException</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// List不允许协变 - 编译期就能发现问题</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Number</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> numberList </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 编译错误</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="泛型擦除的影响" tabindex="-1"><a class="header-anchor" href="#泛型擦除的影响"><span>泛型擦除的影响</span></a></h2><p><code>List&lt;T&gt;</code>在运行时会发生类型擦除：</p><ul><li>数组<code>T[]</code>在运行时保留元素类型信息</li><li><code>List&lt;T&gt;</code>在运行时不保留泛型类型信息</li></ul><h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践"><span>最佳实践</span></a></h2><ol><li>优先使用List而不是数组，因为List提供了更好的类型安全性</li><li>如果需要协变性，考虑使用通配符（例如：<code>List&lt;? extends Animal&gt;</code>）</li><li>理解到数组的协变特性是一个历史遗留问题，在新代码中应当谨慎使用</li></ol>`,18)]))}const r=s(t,[["render",e],["__file","协变.html.vue"]]),d=JSON.parse('{"path":"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E5%8D%8F%E5%8F%98.html","title":"协变","lang":"zh-CN","frontmatter":{"aliases":["covariant"],"draw":null,"tags":[],"title":"协变","date created":"2024-09-18T00:00:00.000Z","date modified":"2024-11-12T00:00:00.000Z","description":"Java中的协变性(Covariance)详解 基本概念 协变(covariant)定义：如果类型Son是类型Father的子类型，那么复合类型Son[]也是Father[]的子类型。 数组与List的协变性比较 数组是协变的：Array[父类]是Array[子类]的父类型 List不是协变的：List<父类>不是List<子类>的父类型 设计原因 J...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E5%8D%8F%E5%8F%98.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:title","content":"协变"}],["meta",{"property":"og:description","content":"Java中的协变性(Covariance)详解 基本概念 协变(covariant)定义：如果类型Son是类型Father的子类型，那么复合类型Son[]也是Father[]的子类型。 数组与List的协变性比较 数组是协变的：Array[父类]是Array[子类]的父类型 List不是协变的：List<父类>不是List<子类>的父类型 设计原因 J..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-24T18:07:06.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-24T18:07:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"协变\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-24T18:07:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[{"level":3,"title":"数组与List的协变性比较","slug":"数组与list的协变性比较","link":"#数组与list的协变性比较","children":[]}]},{"level":2,"title":"设计原因","slug":"设计原因","link":"#设计原因","children":[]},{"level":2,"title":"协变的优缺点","slug":"协变的优缺点","link":"#协变的优缺点","children":[{"level":3,"title":"优点：提供灵活性","slug":"优点-提供灵活性","link":"#优点-提供灵活性","children":[]},{"level":3,"title":"缺点：类型安全问题","slug":"缺点-类型安全问题","link":"#缺点-类型安全问题","children":[]}]},{"level":2,"title":"泛型擦除的影响","slug":"泛型擦除的影响","link":"#泛型擦除的影响","children":[]},{"level":2,"title":"最佳实践","slug":"最佳实践","link":"#最佳实践","children":[]}],"git":{"createdTime":1732465042000,"updatedTime":1732471626000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":3}]},"readingTime":{"minutes":1.5,"words":451},"filePathRelative":"2 第二大脑/1 节点/CS/编程语言/Java/协变.md","localizedDate":"2024年11月25日","autoDesc":true}');export{r as comp,d as data};
