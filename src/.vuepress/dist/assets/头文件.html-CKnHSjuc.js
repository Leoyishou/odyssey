import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,f as a,o as c}from"./app-DokaGNO4.js";const r={};function n(i,e){return c(),o("div",null,e[0]||(e[0]=[a("<p>在 C 语言里，我们通常把某个“模块”或“类”拆成 <code>.h</code>（头文件）和 <code>.c</code>（源文件）两个部分：</p><ul><li><strong><code>.h</code></strong> 里放数据结构声明、函数原型、宏常量等“对外可见的接口”。</li><li><strong><code>.c</code></strong> 里放具体的函数实现、内部逻辑、私有变量等。</li></ul><p>而在 Java 里，并没有单独的“头文件”概念，通常是<strong>一个类写在一个 <code>.java</code> 文件里</strong>，既包含类名、方法声明，又包含具体实现。可以粗略类比为：</p><ul><li><strong><code>.h</code></strong> 对应 Java 代码中“类的签名和对外公开的方法、字段等接口”。</li><li><strong><code>.c</code></strong> 对应 Java 类中“方法体和实现细节”。</li></ul><p>只是 Java 在一个 <code>.java</code> 文件中就把“声明”和“实现”都写完了，不需要像 C/C++ 一样拆成两个文件。</p><p>如果硬要找种“更像 .h 和 .c 分开的形式”，则可以把 Java <strong><code>interface</code></strong>（接口）类比为 C 语言里的头文件（只声明了要实现的方法），再把实现该 interface 的 <strong><code>class</code></strong> 类比为对应的 <code>.c</code> 文件（提供了这些方法的实际代码）。不过依旧不完全相同，因为 Java 的接口和类是两个不同的概念，而 C 里头文件和源文件本质上还是同一个“模块”的两部分。</p>",6)]))}const p=t(r,[["render",n],["__file","头文件.html.vue"]]),l=JSON.parse('{"path":"/1%20%E4%B8%80%E5%88%87%E7%9A%86%E9%A1%B9%E7%9B%AE/Q2%EF%BC%9A%E5%81%9ACS%E7%9A%84%E7%BB%8F%E5%85%B8lab/MIT%206.828/C/%E5%A4%B4%E6%96%87%E4%BB%B6.html","title":"","lang":"zh-CN","frontmatter":{"description":"在 C 语言里，我们通常把某个“模块”或“类”拆成 .h（头文件）和 .c（源文件）两个部分： .h 里放数据结构声明、函数原型、宏常量等“对外可见的接口”。 .c 里放具体的函数实现、内部逻辑、私有变量等。 而在 Java 里，并没有单独的“头文件”概念，通常是一个类写在一个 .java 文件里，既包含类名、方法声明，又包含具体实现。可以粗略类比为：...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/1%20%E4%B8%80%E5%88%87%E7%9A%86%E9%A1%B9%E7%9B%AE/Q2%EF%BC%9A%E5%81%9ACS%E7%9A%84%E7%BB%8F%E5%85%B8lab/MIT%206.828/C/%E5%A4%B4%E6%96%87%E4%BB%B6.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:description","content":"在 C 语言里，我们通常把某个“模块”或“类”拆成 .h（头文件）和 .c（源文件）两个部分： .h 里放数据结构声明、函数原型、宏常量等“对外可见的接口”。 .c 里放具体的函数实现、内部逻辑、私有变量等。 而在 Java 里，并没有单独的“头文件”概念，通常是一个类写在一个 .java 文件里，既包含类名、方法声明，又包含具体实现。可以粗略类比为：..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-27T06:52:25.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-27T06:52:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-27T06:52:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1735282345000,"updatedTime":1735282345000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":1}]},"readingTime":{"minutes":1.07,"words":321},"filePathRelative":"1 一切皆项目/Q2：做CS的经典lab/MIT 6.828/C/头文件.md","localizedDate":"2024年12月27日","autoDesc":true}');export{p as comp,l as data};
