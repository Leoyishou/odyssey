import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,a as s,d as a,e as t,b as l,f as e,r as h,o as r}from"./app-DokaGNO4.js";const o={};function k(g,i){const n=h("RouteLink");return r(),d("div",null,[s("table",null,[s("thead",null,[s("tr",null,[s("th",null,[a(n,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E5%89%8D%E7%AB%AF/vue/%E7%BB%84%E4%BB%B6.html"},{default:t(()=>i[0]||(i[0]=[l("组件")])),_:1})]),s("th",null,[i[3]||(i[3]=l("- Components ")),i[4]||(i[4]=s("code",null,"Basics<br>",-1)),i[5]||(i[5]=l("- Components In-")),i[6]||(i[6]=s("code",null,"Depth<br>",-1)),i[7]||(i[7]=l("- ")),i[8]||(i[8]=s("code",null,"Registration<br>",-1)),i[9]||(i[9]=l("- ")),a(n,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E5%89%8D%E7%AB%AF/vue/props.html"},{default:t(()=>i[1]||(i[1]=[l("props")])),_:1}),i[10]||(i[10]=s("br",null,null,-1)),i[11]||(i[11]=l("- ")),i[12]||(i[12]=s("code",null,"Events<br>",-1)),i[13]||(i[13]=l("- Component v-")),i[14]||(i[14]=s("code",null,"model<br>",-1)),i[15]||(i[15]=l("- Fallthrough ")),i[16]||(i[16]=s("code",null,"Attributes<br>",-1)),i[17]||(i[17]=l("- ")),a(n,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E5%89%8D%E7%AB%AF/vue/Slots.html"},{default:t(()=>i[2]||(i[2]=[l("Slots")])),_:1}),i[18]||(i[18]=s("br",null,null,-1)),i[19]||(i[19]=l("- Provide / ")),i[20]||(i[20]=s("code",null,"inject<br>",-1)),i[21]||(i[21]=l("- Async Components"))]),i[22]||(i[22]=s("th",null,null,-1))])])]),i[36]||(i[36]=e('<h2 id="两种风格" tabindex="-1"><a class="header-anchor" href="#两种风格"><span>两种风格</span></a></h2><p>Composition API/组合式 比 Options API / 选项式</p><ul><li>使用 <code>&lt;script setup&gt;</code> 代替了 <code>export default { setup() {... } }</code>。</li><li>所有的变量和函数都直接在顶层定义,不需要放在 <code>setup()</code> 函数中。</li><li>不需要显式地返回要暴露给模板的变量和函数,它们会自动暴露。</li></ul><h2 id="响应式" tabindex="-1"><a class="header-anchor" href="#响应式"><span>响应式</span></a></h2>',4)),s("p",null,[a(n,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E5%89%8D%E7%AB%AF/vue/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.html"},{default:t(()=>i[23]||(i[23]=[l("观察者模式")])),_:1})]),s("ul",null,[i[31]||(i[31]=s("li",null,[l("被观察的数据（Ref/Reactive对象） "),s("ul",null,[s("li",null,"保存实际的数据"),s("li",null,"维护一个依赖列表（Dep）"),s("li",null,"当数据变化时通知依赖列表中的所有观察者")])],-1)),s("li",null,[i[30]||(i[30]=l("观察者（Effect） ")),s("ul",null,[s("li",null,[i[25]||(i[25]=l("可以是")),a(n,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E5%89%8D%E7%AB%AF/vue/%E6%A8%A1%E6%9D%BF%E6%B8%B2%E6%9F%93.html"},{default:t(()=>i[24]||(i[24]=[l("模板渲染")])),_:1}),i[26]||(i[26]=l("函数"))]),i[27]||(i[27]=s("li",null,"可以是watch回调",-1)),i[28]||(i[28]=s("li",null,"可以是computed计算属性",-1)),i[29]||(i[29]=s("li",null,"响应数据变化并执行相应的更新操作",-1))])])]),i[37]||(i[37]=e(`<p>一个简单的 ref 对象在内部大概是这样的:</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;value&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;实际的值&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;__v_isRef&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;__v_isShallow&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;dep&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;w&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;n&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;m&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="父子双向通信" tabindex="-1"><a class="header-anchor" href="#父子双向通信"><span>父子双向通信</span></a></h2>`,3)),s("ul",null,[s("li",null,[a(n,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E5%89%8D%E7%AB%AF/vue/props.html"},{default:t(()=>i[32]||(i[32]=[l("props")])),_:1}),i[33]||(i[33]=l(" 是父组件给子组件的数据"))]),s("li",null,[a(n,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E5%89%8D%E7%AB%AF/vue/Emits.html"},{default:t(()=>i[34]||(i[34]=[l("Emits")])),_:1}),i[35]||(i[35]=l(" 是子组件给父组件暴露的按钮、事件"))])]),i[38]||(i[38]=e(`<p>这两种机制一起，形成了 Vue 组件之间的双向通信系统，使得组件可以很好地协同工作，同时保持相对独立和可复用。</p><h3 id="父组件" tabindex="-1"><a class="header-anchor" href="#父组件"><span>父组件</span></a></h3><ol><li>导入组件</li><li>注册组件，将导入的组件注册到当前组件的 <code>components</code> 选项中，使其可以在模板中使用。</li><li>使用组件，并传递了多个 props 和事件处理函数。</li></ol><figure><img src="https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F10%2F21%2F11-41-45-2a473bb4e3d287bfbda313689e585d93-202410211141318-8ea198.png" alt="image.png|1000" tabindex="0" loading="lazy"><figcaption>image.png|1000</figcaption></figure><h3 id="子组件" tabindex="-1"><a class="header-anchor" href="#子组件"><span>子组件</span></a></h3><h3 id="数据-冒号开头" tabindex="-1"><a class="header-anchor" href="#数据-冒号开头"><span>数据，冒号开头</span></a></h3><ol><li>provide/inject 方式:</li></ol><ul><li>用于跨多层组件传递数据</li><li>子组件可以直接修改值（如果传递的是 ref/reactive）</li><li>耦合性较强，子组件需要知道依赖注入的具体名称</li><li>适用于深层组件通信</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 父组件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    provide</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;showResults&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">showResults</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 提供响应式引用</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 子组件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> showResults</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> inject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;showResults&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 获取响应式引用</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>Props 方式:</li></ol><p>- 用于父子组件之间的直接通信</p><ul><li>遵循单向数据流，子组件不能直接修改 props</li><li>更明确的组件接口定义</li><li>更容易追踪数据流向</li><li>适用于直接的父子组件通信</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 父组件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">MappingGridCard</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> :show-results=&quot;showResults.value&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 子组件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> props</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> defineProps</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      showResults</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> Boolean</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    });</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="动作-开头" tabindex="-1"><a class="header-anchor" href="#动作-开头"><span>动作，@开头</span></a></h3><ol><li>事件函数 <ol><li>子组件触发 &#39;search&#39; 事件。</li><li>父组件的 handleSearch 方法被调用。</li><li>handleSearch 执行异步操作（调用 querySuccess）。</li><li>子组件的 await emit(...) 等待这个异步操作完成。</li><li>异步操作完成后，子组件继续执行，重置 isSearching 状态。</li></ol></li></ol><figure><img src="https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F10%2F21%2F12-10-51-12bbf7ff11c96941ba71e65266536938-202410211210399-48a036.png" alt="image.png|1000" tabindex="0" loading="lazy"><figcaption>image.png|1000</figcaption></figure><figure><img src="https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F10%2F21%2F12-10-11-d05e160966dfc0d832896b7833d1d506-202410211210246-65e3d7.png" alt="image.png|1000" tabindex="0" loading="lazy"><figcaption>image.png|1000</figcaption></figure><h2 id="如何在父中改造子组件" tabindex="-1"><a class="header-anchor" href="#如何在父中改造子组件"><span>如何在父中改造子组件？</span></a></h2><p><a href="%E6%8F%92%E6%A7%BDv-slot">插槽v-slot</a></p>`,19))])}const u=p(o,[["render",k],["__file","组件.html.vue"]]),E=JSON.parse('{"path":"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E5%89%8D%E7%AB%AF/vue/%E7%BB%84%E4%BB%B6.html","title":"组件","lang":"zh-CN","frontmatter":{"draw":null,"aliases":["component"],"title":"组件","tags":[],"date created":"2024-06-23T00:00:00.000Z","date modified":"2024-11-12T00:00:00.000Z","description":"两种风格 Composition API/组合式 比 Options API / 选项式 使用 <script setup> 代替了 export default { setup() {... } }。 所有的变量和函数都直接在顶层定义,不需要放在 setup() 函数中。 不需要显式地返回要暴露给模板的变量和函数,它们会自动暴露。 响应式 被观察的数...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E5%89%8D%E7%AB%AF/vue/%E7%BB%84%E4%BB%B6.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:title","content":"组件"}],["meta",{"property":"og:description","content":"两种风格 Composition API/组合式 比 Options API / 选项式 使用 <script setup> 代替了 export default { setup() {... } }。 所有的变量和函数都直接在顶层定义,不需要放在 setup() 函数中。 不需要显式地返回要暴露给模板的变量和函数,它们会自动暴露。 响应式 被观察的数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F10%2F21%2F11-41-45-2a473bb4e3d287bfbda313689e585d93-202410211141318-8ea198.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-24T17:46:49.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-24T17:46:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"组件\\",\\"image\\":[\\"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F10%2F21%2F11-41-45-2a473bb4e3d287bfbda313689e585d93-202410211141318-8ea198.png\\",\\"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F10%2F21%2F12-10-51-12bbf7ff11c96941ba71e65266536938-202410211210399-48a036.png\\",\\"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F10%2F21%2F12-10-11-d05e160966dfc0d832896b7833d1d506-202410211210246-65e3d7.png\\"],\\"dateModified\\":\\"2024-11-24T17:46:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"两种风格","slug":"两种风格","link":"#两种风格","children":[]},{"level":2,"title":"响应式","slug":"响应式","link":"#响应式","children":[]},{"level":2,"title":"父子双向通信","slug":"父子双向通信","link":"#父子双向通信","children":[{"level":3,"title":"父组件","slug":"父组件","link":"#父组件","children":[]},{"level":3,"title":"子组件","slug":"子组件","link":"#子组件","children":[]},{"level":3,"title":"数据，冒号开头","slug":"数据-冒号开头","link":"#数据-冒号开头","children":[]},{"level":3,"title":"动作，@开头","slug":"动作-开头","link":"#动作-开头","children":[]}]},{"level":2,"title":"如何在父中改造子组件？","slug":"如何在父中改造子组件","link":"#如何在父中改造子组件","children":[]}],"git":{"createdTime":1732465042000,"updatedTime":1732470409000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":2}]},"readingTime":{"minutes":2.53,"words":759},"filePathRelative":"2 第二大脑/1 节点/CS/软件工程/前端/vue/组件.md","localizedDate":"2024年11月25日","autoDesc":true}');export{u as comp,E as data};
