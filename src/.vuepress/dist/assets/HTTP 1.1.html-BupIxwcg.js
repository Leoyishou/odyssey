import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a,b as s,d as e,e as l,f as t,r as k,o as r}from"./app-DokaGNO4.js";const d={};function o(g,i){const n=k("RouteLink");return r(),h("div",null,[i[9]||(i[9]=a("p",null,[s("Web 开发必须掌握的三个技术：Token、Cookie、Session - 华为云开发者联盟的文章 - 知乎"),a("br"),s(" https://zhuanlan.zhihu.com/p/171787680"),a("br"),s(" 还分不清 Cookie、Session、Token、JWT？- 老刘的文章 - 知乎"),a("br"),s(" https://zhuanlan.zhihu.com/p/164696755")],-1)),a("p",null,[e(n,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BD%91%E7%BB%9C/token.html"},{default:l(()=>i[0]||(i[0]=[s("token")])),_:1}),i[1]||(i[1]=s()),i[2]||(i[2]=a("a",{href:"cookie"},"cookie",-1)),i[3]||(i[3]=s(" 和 ")),i[4]||(i[4]=a("a",{href:"session"},"session",-1)),i[5]||(i[5]=s("、")),i[6]||(i[6]=a("a",{href:"JWT"},"JWT",-1)),i[7]||(i[7]=s(" 都是为了解决 http 无状态的问题。"))]),i[10]||(i[10]=t(`<figure><img src="https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F10%2F02%2F16-27-45-2c1c8f819a61783f47d2aa147dac634c-202410021627346-e5533d.png" alt="image.png|1000" tabindex="0" loading="lazy"><figcaption>image.png|1000</figcaption></figure><h2 id="为什么永远只用-post" tabindex="-1"><a class="header-anchor" href="#为什么永远只用-post"><span>为什么永远只用 POST</span></a></h2><p>支持 POST 包裹rpc的方式与后台交互，一份api文档前后端通用。RESTful这玩意就是自 high，一结合业务就拧巴、纠结，碰上杠精挑刺更是痛不欲生，而且还割裂了前后端的语义。 曾经我也是 rest 的拥趸，谁用谁难受。接口调用的本质是 RPC。 <img src="https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F11%2F03%2F22-04-39-550660c31548ff82acecc91e7b1ab380-202411032204948-cdf794.png" alt="image.png|1000" loading="lazy"></p><p>GET 跟 POST 相比有什么优势呢？答曰：GET 接口返回的内容可以被缓存！（有人可能会说 GET 不能附加 body，其实这是不对的。GET 请求也可以像 POST 那样提交数据。）也就说，GET 比 POST 唯一的区别是 GET 请求的结果可以被缓存。这恰恰有很大的问题。我们对外提供接口，内容一般是动态的。如果中间节点缓存了结果，就可能出现意想不到的结果。所以说，在动态接口*领域，GET 的这个缓存特性反而是缺点，而非优点。</p><p>方法用 POST，路径表示接口，body 传输请求内容。从这个角度上讲，http 协议只不过是 RPC 调用的一种承载方式。RPC 要解决的问题无非就是接口映射+（也就调哪个接口）和编码问题（json/pb等）。至于具体的 http 请求类型，则不是很重要，只要不给大家带来麻烦就好。</p><p>而前面说过，GET 可能有一些问题，所以不如 POST。现在比较流行的grpc本质上也是 http post 请求</p><h2 id="_1-1的四个升级" tabindex="-1"><a class="header-anchor" href="#_1-1的四个升级"><span>1.1的四个升级</span></a></h2><p>1、HTTP/1.0 短链接 用一次建立一次 HTTP/1.1 长连接 Connection:keep-alive 一段时间内一直用一条连接<br> 2、更多的错误状态响应码:在HTTP1.1中新增了24个错误状态响应码<br> 3、更多可供选择的缓存头来表示相应的缓存策略<br> 4、允许只请求资源的某个部分，充分利⽤带宽和连接</p><ol><li>HTTP 请求方式<br> HTTP（Hypertext Transfer Protocol）是一种在计算机网络中用于传输超媒体文档的应用层协议。HTTP 协议定义了客户端和服务器之间的通信规则，并规定了客户端向服务器发送请求时需要采用的请求方法（请求方式）。</li></ol><p>常见的 HTTP 请求方式有四种：</p><p>POST（添加） GET（查询） DELETE（删除） PUT（修改） 下面将分别对这四种请求方式进行详细介绍。</p><ol><li>POST 请求<br> POST 请求用于向指定资源提交数据，通常会导致服务器端的状态发生变化。例如，在 Web 表单中填写用户信息并提交时，就是使用 POST 请求方式将表单数据提交到服务器存储。</li></ol><p>使用 POST 请求方式提交的数据会被包含在请求体中，而不像 GET 请求方式那样包含在 URL 中。因此，POST 请求可以提交比 GET 更大的数据量，并且相对更安全。</p><p>2.1. 例子<br> 下面是一个 POST 请求的例子：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">POST </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">api</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">user HTTP</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Host</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> example</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">com</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Content</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Type</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> application</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">json  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Content</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Length</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 123</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">{  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   &quot;name&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;John Doe&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   &quot;email&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;johndoe@example.com&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   &quot;age&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 30</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码表示向 example.com 的 /api/user 资源发送一个 POST 请求，请求体中包含了一个 JSON 格式的用户信息。</p><p>2.2. 优缺点<br> POST 请求的优点包括：</p><p>可以提交比 GET 更大的数据量。 相对更安全，因为请求参数不会被包含在 URL 中。 POST 请求的缺点包括：</p><p>对服务器性能的影响较大。 不适用于对同一资源进行多次操作。 2.3. 应用场景<br> 向服务器提交表单数据。 向服务器上传文件。 创建资源或提交数据到服务器。 3. GET 请求<br> GET 请求用于向指定资源发出请求，请求中包含了资源的 URL 和请求参数。服务器端通过解析请求参数来返回相应的资源，不会修改服务器端的状态。</p><p>使用 GET 请求方式提交的数据会被包含在 URL 中，因此易于被缓存和浏览器保存，但也因此不适合用于提交敏感数据。</p><p>3.1. 例子<br> 下面是一个 GET 请求的例子：</p><p>GET /api/user?id=123 HTTP/1.1<br> Host: example.com<br> 上述代码表示向 example.com 的 /api/user 资源发送一个 GET 请求，请求参数中包含了用户的 ID。</p><p>3.2. 优缺点<br> GET 请求的优点包括：</p><p>可以被缓存和浏览器保存。 对服务器性能的影响较小。 GET 请求的缺点包括：</p><p>不适合用于提交敏感数据。 仅适用于对资源进行查询操作，不能修改服务器端的状态。 3.3. 应用场景<br> 获取资源信息。 对资源进行查询操作。</p><div class="language-http line-numbers-mode" data-highlighter="shiki" data-ext="http" data-title="http" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">请求行</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">GET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /api/example?param1=value1&amp;param2=value2 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">HTTP</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">请求头</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Host</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> www.example.com</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">User-Agent</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## 表明数据类型</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Accept</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## 表明语言</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Accept-Language</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> en-US,en;q=0.5</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## 表明压缩算法</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Accept-Encoding</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gzip, deflate, br</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## 流式输出和固定长度输出，二选一</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Transfer-Encoding</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> chunked”</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Content-Length：1000</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## 表明字符集</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Accept-Charset</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gbk, utf-8</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Connection</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> keep-alive</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Upgrade-Insecure-Requests</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F06%2F05%2F20-47-27-18d404bb7fff4dec8234fe518bf79e79-20240605204725-23c952.png" alt="image.png#pic_center|650" tabindex="0" loading="lazy"><figcaption>image.png#pic_center|650</figcaption></figure><h2 id="请求头" tabindex="-1"><a class="header-anchor" href="#请求头"><span>请求头</span></a></h2><div class="language-http line-numbers-mode" data-highlighter="shiki" data-ext="http" data-title="http" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">GET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /index.html </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">HTTP</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.1</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Host</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> www.example.com</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">User-Agent</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Accept</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Accept-Language</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> en-US,en;q=0.5</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Accept-Encoding</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gzip, deflate, br</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Connection</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> keep-alive</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Cookie</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> session_id=abc123; user_id=789</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-通用头部" tabindex="-1"><a class="header-anchor" href="#_1-通用头部"><span>1. 通用头部</span></a></h3><ul><li><strong>Host</strong>: 指定请求的服务器域名和端口号</li><li><strong>User-Agent</strong>: 标识发送请求的客户端软件的应用类型、操作系统、软件开发商以及版本号</li><li><strong>Accept</strong>: 指定客户端能够接受的内容类型</li><li><strong>Accept-Language</strong>: 指定客户端可以接受的语言</li><li><strong>Accept-Encoding</strong>: 指定客户端可以接受的内容编码方式，如gzip</li><li><strong>Connection</strong>: 指定与连接相关的属性，如 Keep-Alive</li></ul><h3 id="_2-请求特定头部" tabindex="-1"><a class="header-anchor" href="#_2-请求特定头部"><span>2. 请求特定头部</span></a></h3><ul><li><strong>Referer</strong>: 标识请求的来源页面</li><li><strong>Origin</strong>: 在跨域请求中，标识请求的来源</li><li><strong>Cookie</strong>: 包含先前由服务器通过 Set-Cookie 发送的 HTTP cookie</li><li><strong>Cache-Control</strong>: 指定请求和响应遵循的缓存机制</li></ul><h3 id="_3-实体头部" tabindex="-1"><a class="header-anchor" href="#_3-实体头部"><span>3. 实体头部</span></a></h3><ul><li><strong>Content-Type</strong>: 请求体的 MIME 类型 (用于POST和PUT请求)</li><li><strong>Content-Length</strong>: 请求体的长度，以字节为单位</li></ul><h2 id="_4-安全相关头部" tabindex="-1"><a class="header-anchor" href="#_4-安全相关头部"><span>4. 安全相关头部</span></a></h2><ul><li><strong>Authorization</strong>: 包含用于验证用户代理身份的凭证</li><li><strong>X-CSRF-Token</strong>: 用于防止跨站请求伪造（CSRF）攻击</li></ul><h3 id="_5-其他常见头部" tabindex="-1"><a class="header-anchor" href="#_5-其他常见头部"><span>5. 其他常见头部</span></a></h3><ul><li><strong>If-Modified-Since</strong>: 只有当内容在指定日期之后被修改才返回</li><li><strong>If-None-Match</strong>: 比较实体标记（ETag）</li><li><strong>Upgrade</strong>: 要求服务器升级到另一个协议</li></ul>`,39)),a("p",null,[e(n,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BD%91%E7%BB%9C/%E9%94%99%E8%AF%AF%E7%A0%81.html"},{default:l(()=>i[8]||(i[8]=[s("错误码")])),_:1})]),i[11]||(i[11]=t('<h2 id="url" tabindex="-1"><a class="header-anchor" href="#url"><span>URL</span></a></h2><p>需要对JSON数据进行URL编码（也称为百分号编码）处理主要有以下几个原因：</p><ol><li><p>特殊字符处理： URL中有许多字符是保留的或有特殊含义的，比如 <code>&amp;</code>, <code>=</code>, <code>?</code>, <code>/</code> 等。JSON数据中可能包含这些字符，如果不进行编码，可能会导致URL解析错误。</p></li><li><p>空格和换行符： JSON数据中的空格、换行符等在URL中是不允许直接使用的。编码可以将这些字符转换为合法的URL字符。</p></li><li><p>非ASCII字符： 如果JSON数据中包含非ASCII字符（如中文），编码可以确保这些字符被正确传输和解析。</p></li><li><p>避免歧义： 编码可以避免服务器在解析参数时产生歧义。例如，未编码的JSON中的冒号可能被误解为URL中的端口分隔符。</p></li><li><p>安全性： 编码可以防止一些基于注入的攻击，因为它会转义潜在的危险字符。</p></li><li><p>兼容性： 不同的服务器和客户端可能对URL中允许的字符有不同的限制。编码可以提高跨平台兼容性。</p></li></ol><p>在你的具体例子中，JSON数据包含了大量的特殊字符（如 <code>{}</code>, <code>&quot;</code>, <code>:</code> 等），这些都需要被编码以确保它们能作为一个完整的参数值被正确传递和解析。</p><p>虽然对于小型的、简单的数据，直接在URL中传递未编码的数据可能也能工作，但对于复杂的JSON数据，编码处理是一个更安全、更可靠的做法。这也是为什么在之前的回答中，我建议使用POST请求，将JSON数据放在请求体中，而不是直接放在URL中，因为这样可以避免URL长度限制，并且更适合传输大量复杂数据。</p>',5))])}const m=p(d,[["render",o],["__file","HTTP 1.1.html.vue"]]),y=JSON.parse('{"path":"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BD%91%E7%BB%9C/HTTP%201.1.html","title":"HTTP 1.1","lang":"zh-CN","frontmatter":{"draw":null,"title":"HTTP 1.1","tags":[],"date created":"2024-06-04T00:00:00.000Z","date modified":"2024-11-12T00:00:00.000Z","description":"Web 开发必须掌握的三个技术：Token、Cookie、Session - 华为云开发者联盟的文章 - 知乎 https://zhuanlan.zhihu.com/p/171787680 还分不清 Cookie、Session、Token、JWT？- 老刘的文章 - 知乎 https://zhuanlan.zhihu.com/p/164696755 ...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BD%91%E7%BB%9C/HTTP%201.1.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:title","content":"HTTP 1.1"}],["meta",{"property":"og:description","content":"Web 开发必须掌握的三个技术：Token、Cookie、Session - 华为云开发者联盟的文章 - 知乎 https://zhuanlan.zhihu.com/p/171787680 还分不清 Cookie、Session、Token、JWT？- 老刘的文章 - 知乎 https://zhuanlan.zhihu.com/p/164696755 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F10%2F02%2F16-27-45-2c1c8f819a61783f47d2aa147dac634c-202410021627346-e5533d.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-24T16:17:22.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-24T16:17:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HTTP 1.1\\",\\"image\\":[\\"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F10%2F02%2F16-27-45-2c1c8f819a61783f47d2aa147dac634c-202410021627346-e5533d.png\\",\\"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F11%2F03%2F22-04-39-550660c31548ff82acecc91e7b1ab380-202411032204948-cdf794.png\\",\\"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F06%2F05%2F20-47-27-18d404bb7fff4dec8234fe518bf79e79-20240605204725-23c952.png\\"],\\"dateModified\\":\\"2024-11-24T16:17:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"为什么永远只用 POST","slug":"为什么永远只用-post","link":"#为什么永远只用-post","children":[]},{"level":2,"title":"1.1的四个升级","slug":"_1-1的四个升级","link":"#_1-1的四个升级","children":[]},{"level":2,"title":"请求头","slug":"请求头","link":"#请求头","children":[{"level":3,"title":"1. 通用头部","slug":"_1-通用头部","link":"#_1-通用头部","children":[]},{"level":3,"title":"2. 请求特定头部","slug":"_2-请求特定头部","link":"#_2-请求特定头部","children":[]},{"level":3,"title":"3. 实体头部","slug":"_3-实体头部","link":"#_3-实体头部","children":[]}]},{"level":2,"title":"4. 安全相关头部","slug":"_4-安全相关头部","link":"#_4-安全相关头部","children":[{"level":3,"title":"5. 其他常见头部","slug":"_5-其他常见头部","link":"#_5-其他常见头部","children":[]}]},{"level":2,"title":"URL","slug":"url","link":"#url","children":[]}],"git":{"createdTime":1732465042000,"updatedTime":1732465042000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":1}]},"readingTime":{"minutes":7.63,"words":2289},"filePathRelative":"2 第二大脑/1 节点/CS/网络/HTTP 1.1.md","localizedDate":"2024年11月25日","autoDesc":true}');export{m as comp,y as data};
