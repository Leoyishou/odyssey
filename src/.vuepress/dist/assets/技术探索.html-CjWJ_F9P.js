import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a,g as r,f as i,o as n}from"./app-DokaGNO4.js";const l={};function p(s,e){return n(),o("div",null,[e[0]||(e[0]=a("p",null,"excerpt",-1)),r(" more "),e[1]||(e[1]=i('<h2 id="二、技术探索" tabindex="-1"><a class="header-anchor" href="#二、技术探索"><span>二、技术探索</span></a></h2><ol><li>protobuf 比 kryo 在速度上</li><li>CI：每当你添加一块乐高砖，你都要确保它正确地适应其他部分，不会导致房子倒塌；CD (Continuous Delivery)：确保它随时都可以上架被展示给其他人；CD (Continuous Deployment)：上架的过程（切环境），无需繁琐易错的手动操作。</li><li>拼团需求中存在一个复杂对象复制的场景，代码调用手动复制的方案开发成本高，不易维护；序列化的方案面对一些无默认构造器的工具类会抛异常，即使目前 ignore，也无法保证以后的开发者在更改类的结构时注意这一点。查阅资料，通过调研整理了深拷贝的一些常用手段，发现 Kryo 工具的方式可以通过调用底层 unsafe 函数来解这个问题，并且性能优于 Json 序列化的方式，如果后期需要多处复制，可以考虑替换为这个方案。输出：复杂对象深拷贝的最佳实践 on 2023-11-06</li><li>完成了 Hackathon 比赛，在这种带 DDL 的开发中，进度确实飞快。对 python 开发技能与各 AI 模型的调用，以及目前常见的大模型开发框架，前端模版，python 项目的部署都有了更多的了解。经历的很多环节也能给工作中的开发一些启发。最大的感受是编程思维在各个项目中的通用性以及信息检索，阅读理解速度对于快速掌握一门新技术的重要性。结合这次的开发经验和自己过去写的口语复盘工具，准备之后将其完整部署，并且邀请一些朋友去用，自己经营一个线上项目，培养自己项目全生命周期的思维。</li><li>阅读 naos 系统中 EngineContext 的范型设计、Guava 中 Maps 的一些方法设计。</li><li>学习了 protobuf 序列化工具定义数据结构，编译执行的一些细节。</li><li>本需求阅读代码中，发现底层调用 NotifyToCallrtService 时，使用了 guava 的 rateLimiter 工具，据此去了解了单机限流与集群限流的不同方案，写了 guava 的 rateLimiter 的学习 demo，同时注意到我们代码中使用了两层限流，第一层是对每个 wrapper 的限流，第二层是总数限流，前者是为了避免过多的请求影响代理商服务的正常运行，后者是为了避免影响我们自己的服务以及下游 spa 那边的服务。</li><li>之前在查询 redis 中的 wrapper 服务成本时看到了系统中的 redis 切片集群情况，查阅资料了解了几种主流的切片方案，和其与大内存云主机方案的优劣。</li><li>sirius 异常处理部分，为了避免产生大量超时日志，没有单独设置超时异常，将其放在了最后的 Exception 中，也没有 log.error，只是打了监控。</li></ol>',2))])}const d=t(l,[["render",p],["__file","技术探索.html.vue"]]),u=JSON.parse('{"path":"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2.html","title":"技术探索","lang":"zh-CN","frontmatter":{"draw":null,"title":"技术探索","tags":["1 Dev","Java","信息革命"],"date created":"2024-04-09T00:00:00.000Z","date modified":"2024-11-12T00:00:00.000Z","description":"excerpt 二、技术探索 protobuf 比 kryo 在速度上 CI：每当你添加一块乐高砖，你都要确保它正确地适应其他部分，不会导致房子倒塌；CD (Continuous Delivery)：确保它随时都可以上架被展示给其他人；CD (Continuous Deployment)：上架的过程（切环境），无需繁琐易错的手动操作。 拼团需求中存在一...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:title","content":"技术探索"}],["meta",{"property":"og:description","content":"excerpt 二、技术探索 protobuf 比 kryo 在速度上 CI：每当你添加一块乐高砖，你都要确保它正确地适应其他部分，不会导致房子倒塌；CD (Continuous Delivery)：确保它随时都可以上架被展示给其他人；CD (Continuous Deployment)：上架的过程（切环境），无需繁琐易错的手动操作。 拼团需求中存在一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-24T16:17:22.000Z"}],["meta",{"property":"article:tag","content":"1 Dev"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"信息革命"}],["meta",{"property":"article:modified_time","content":"2024-11-24T16:17:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"技术探索\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-24T16:17:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"二、技术探索","slug":"二、技术探索","link":"#二、技术探索","children":[]}],"git":{"createdTime":1732465042000,"updatedTime":1732465042000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":1}]},"readingTime":{"minutes":2.68,"words":804},"filePathRelative":"2 第二大脑/1 节点/CS/编程语言/Java/技术探索.md","localizedDate":"2024年11月25日","autoDesc":true}');export{d as comp,u as data};
