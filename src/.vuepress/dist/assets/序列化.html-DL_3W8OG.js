import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as r,d as a,e as s,f as i,r as l,o as p,b as c}from"./app-DokaGNO4.js";const m={};function d(E,t){const e=l("RouteLink");return p(),n("div",null,[r("p",null,[a(e,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/protobuf.html"},{default:s(()=>t[0]||(t[0]=[c("protobuf")])),_:1})]),t[1]||(t[1]=i("<p>在使用 Java 对 JSON 数据进行解析的时候，您不一定需要将整个 JSON 数据结构中每一个字段都严格定义为对应的类和属性。通常有以下几种策略和考虑点：</p><ol><li><p><strong>完整建模</strong>：<br> 您可以像示例中一样，将 JSON 中的每个层级、每个数据结构都定义成相应的 Java 类，并通过 Jackson、Gson 等 JSON 库实现与类之间的自动映射。这种方式有以下特点：</p><ul><li><strong>优点</strong>：类型安全、代码可读性和可维护性较高，后期扩展方便。</li><li><strong>缺点</strong>：初期建模工作量较大，需要对 JSON 结构有较为清晰的认识。如果 JSON 结构经常变化或者不稳定，需要频繁改动类。</li></ul></li><li><p><strong>按需定义</strong>：<br> 如果您只关心 JSON 数据中的一部分字段，或者业务逻辑只需要处理某些关键数据，那么您可以只为需要的数据结构定义对应的属性和类。Jackson 和 Gson 等常用 JSON 库在反序列化时，对于类中未定义的字段会自动忽略。</p><ul><li><strong>优点</strong>：简化初期开发，无需全面定义整个结构，减少冗余代码。</li><li><strong>缺点</strong>：后期如果需求变动，需要再次修改类结构。如果 JSON 结构变动不大而需求频繁增加，会导致不断补全类字段。</li></ul></li><li><p><strong>使用 Map 或 JsonNode 等通用数据结构</strong>：<br> 在有些情况下，如果 JSON 数据结构非常灵活或者不确定，您可以先将数据解析到一个通用的结构（如 <code>Map&lt;String, Object&gt;</code> 或 <code>com.fasterxml.jackson.databind.JsonNode</code>）中，然后在运行时根据需要进行数据提取和类型转换。这种方案往往与部分定义类结合起来使用。</p><ul><li><strong>优点</strong>：灵活性极强，适合处理动态、未知或频繁变动的 JSON 数据结构。</li><li><strong>缺点</strong>：需要编写更多自定义逻辑来从通用结构中提取所需信息；类型安全性和可维护性较弱。</li></ul></li></ol><p><strong>总结</strong>：</p><ul><li>如果您的 JSON 数据结构相对稳定，您也希望代码可读、可维护，那么推荐像示例中一样对数据结构进行完整建模。</li><li>如果您只对部分数据感兴趣，且不想一次性定义所有字段，那么就可以选择只定义所需的那部分字段对应的类属性，未定义的字段在解析时会被忽略。</li><li>如有更复杂或变动频繁的场景，可以在部分定义类的基础上，用 <code>Map</code> 或 <code>JsonNode</code> 等通用结构灵活解析剩余字段。</li></ul>",4))])}const u=o(m,[["render",d],["__file","序列化.html.vue"]]),A=JSON.parse('{"path":"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E5%BA%8F%E5%88%97%E5%8C%96.html","title":"","lang":"zh-CN","frontmatter":{"description":"在使用 Java 对 JSON 数据进行解析的时候，您不一定需要将整个 JSON 数据结构中每一个字段都严格定义为对应的类和属性。通常有以下几种策略和考虑点： 完整建模： 您可以像示例中一样，将 JSON 中的每个层级、每个数据结构都定义成相应的 Java 类，并通过 Jackson、Gson 等 JSON 库实现与类之间的自动映射。这种方式有以下特点...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E5%BA%8F%E5%88%97%E5%8C%96.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:description","content":"在使用 Java 对 JSON 数据进行解析的时候，您不一定需要将整个 JSON 数据结构中每一个字段都严格定义为对应的类和属性。通常有以下几种策略和考虑点： 完整建模： 您可以像示例中一样，将 JSON 中的每个层级、每个数据结构都定义成相应的 Java 类，并通过 Jackson、Gson 等 JSON 库实现与类之间的自动映射。这种方式有以下特点..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-23T03:18:33.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-23T03:18:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-23T03:18:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1733928507000,"updatedTime":1734923913000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":2}]},"readingTime":{"minutes":2.23,"words":670},"filePathRelative":"2 第二大脑/1 节点/CS/软件工程/序列化.md","localizedDate":"2024年12月11日","autoDesc":true}');export{u as comp,A as data};
