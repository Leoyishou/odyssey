import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as e,g as l,f as r,o as n}from"./app-DokaGNO4.js";const B={};function s(o,t){return n(),i("div",null,[t[0]||(t[0]=e("figure",null,[e("img",{src:"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Ftmp%2F千图_二进制文件在线搜索代码放大镜_图片编号69890404%2F2024%2F05%2F02%2F15-28-24-4d32c6186a8465f253c9ff0fd51e9105-IST_1183_99214-7bf59a.png",alt:"IST_1183_99214.png|400",tabindex:"0",loading:"lazy"}),e("figcaption",null,"IST_1183_99214.png|400")],-1)),t[1]||(t[1]=e("p",null,'在 Java 中十万个长度为 "beijing_123132" 的字符串是多少 M？',-1)),l(" more "),t[2]||(t[2]=r('<ul><li><a href="#%E4%B8%89%E4%B8%AA%E9%95%BF%E5%BA%A6%E5%8D%95%E5%85%83">三个长度单元</a><ul><li><a href="#%E5%AD%97%E7%AC%A6%20character%20%E7%BB%B4%E5%BA%A6">字符 character 维度</a></li><li><a href="#%E5%AD%97%E8%8A%82%20Byte%20%E7%BB%B4%E5%BA%A6">字节 Byte 维度</a></li><li><a href="#KB%EF%BC%8CMB">KB，MB</a></li><li><a href="#%E4%BD%8D%E6%95%B0%20Bit%20%E7%BB%B4%E5%BA%A6">位数 Bit 维度</a></li></ul></li><li><a href="#%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90">案例分析</a><ul><li><a href="#%E6%99%AE%E9%80%9A%E6%83%85%E5%86%B5">普通情况</a></li><li><a href="#JVM%20%E4%B8%AD">JVM 中</a><ul><li><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%98%E5%82%A8%E5%88%86%E6%9E%90">字符串存储分析</a></li><li><a href="#JVM%20%E4%B8%AD%E4%B8%A4%E7%99%BE%E4%B8%87%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%80%BB%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8">JVM 中两百万个字符串的总内存占用</a></li><li><a href="#%E6%B3%A8%E6%84%8F">注意</a></li></ul></li></ul></li></ul><h2 id="三个长度单元" tabindex="-1"><a class="header-anchor" href="#三个长度单元"><span>三个长度单元</span></a></h2><h3 id="字符-character-维度" tabindex="-1"><a class="header-anchor" href="#字符-character-维度"><span>字符 character 维度</span></a></h3><p>字符不分中西！比如，字符串 &quot; 我爱 b&quot; 由三个字符组成：两个中文字符 &quot; 我 &quot; 和 &quot; 爱 &quot;，以及一个英文字符 &quot;b&quot;。总计，这个字符串是由三个字符构成的。在编码中，字符的数量是指字符串中的元素总数，不论这些字符是属于<em>哪种语言或符号系统</em>。</p><h3 id="字节-byte-维度" tabindex="-1"><a class="header-anchor" href="#字节-byte-维度"><span>字节 Byte 维度</span></a></h3><table><thead><tr><th>类型</th><th>字符示例</th><th>ASCII 字节数</th><th>UTF-8 字节数</th><th>UTF-16 字节数</th></tr></thead><tbody><tr><td>英文字符</td><td>A, z, 1</td><td>1 字节</td><td><em>1 字节</em></td><td>2 字节</td></tr><tr><td>中文字符</td><td>中, 文</td><td>不适用</td><td><em>3 字节</em></td><td>2 字节</td></tr><tr><td>特殊符号</td><td>@, #, $</td><td>1 字节</td><td>1 字节</td><td>2 字节</td></tr><tr><td>特殊符号</td><td>€, ©, ¼</td><td>不适用</td><td>2-3 字节</td><td>2 字节</td></tr><tr><td>表情符号</td><td>😊, 🚀</td><td>不适用</td><td>4 字节</td><td>4 字节</td></tr></tbody></table><p>UTF-8 里一个中文字符需要 3 字节，Java 里一个 char 是 2byte，如果用 UTF-8 岂不是就不够了，所以其实 Java 用的是 UTF-16</p><h3 id="kb-mb" tabindex="-1"><a class="header-anchor" href="#kb-mb"><span>KB，MB</span></a></h3><p>知道字节就可以算我们常说的 KB 和 MB 了</p><ol><li><strong>1 Kilobyte (KB)</strong>: <ul><li><strong>在二进制计数系统中</strong>，1 KB 等于 210210 字节，也就是 1024 字节。</li><li>因此，1 KB 等于 1024×8=81921024×8=8192 bits。</li></ul></li><li><strong>1 Megabyte (MB)</strong>: <ul><li><strong>在二进制计数系统中</strong>，1 MB 等于 220220 字节，也就是 1,048,576 字节。</li><li>因此，1 MB 等于 1,048,576×8=8,388,6081,048,576×8=8,388,608 bits。</li></ul></li></ol><h3 id="位数-bit-维度" tabindex="-1"><a class="header-anchor" href="#位数-bit-维度"><span>位数 Bit 维度</span></a></h3><p>1 byte = 8 bits</p><p>不管啥字符集，1 byte = 8 bits，代表 256 种变换，所以表示英文绰绰有余<br> UTF-16 里， 2 byte = 16 bits，代表 6w 种变换，表示中文也绰绰有余了<br> UTF-8 里， 3 byte = 24 bits，代表 1600w 种变换，表示中文 更富裕了</p><h2 id="案例分析" tabindex="-1"><a class="header-anchor" href="#案例分析"><span>案例分析</span></a></h2><blockquote><p>&quot;beijing_11352&quot; 是多少字符，多少 byte，多少 bit？多少 KB？多少 MB？</p></blockquote><h3 id="普通情况" tabindex="-1"><a class="header-anchor" href="#普通情况"><span>普通情况</span></a></h3><p>200w（个数）* 12（字符数）* 2（由字符集决定）= 40000000 byte = 40MB</p><h3 id="jvm-中" tabindex="-1"><a class="header-anchor" href="#jvm-中"><span>JVM 中</span></a></h3><p>在 Java 虚拟机（JVM）中处理两百万个 &quot;beijing_11352&quot; 字符串的内存占用，还需要考虑到 JVM 对字符串的特殊处理和管理。这包括字符串对象的开销、字符串池的可能影响（如果字符串被内部化），以及字符数组本身的存储开销。</p><h4 id="字符串存储分析" tabindex="-1"><a class="header-anchor" href="#字符串存储分析"><span>字符串存储分析</span></a></h4><ol><li><p><strong>基本存储</strong>：</p><ul><li>一个 &quot;beijing_11352&quot; 字符串由 12 个字符组成，使用 UTF-16 编码（Java 的默认字符编码）。在 UTF-16 中，大多数字符（包括所有基本多语言平面（BMP）的字符）占用 2 个字节。因此，每个字符串的字符数组需要 12×2=2412×2=24 bytes。</li></ul></li><li><p><strong>字符串对象的开销</strong>：</p><ul><li>每个 Java 对象都有一个对象头。在大多数 64 位 JVM 上，对象头通常占用 12 bytes。另外，对于数组对象，还需要额外的空间来存储长度信息，通常是 4 bytes。</li><li>因此，每个字符串对象的总开销包括对象头和字符数组的开销：12+4+24=4012+4+24=40 bytes。</li></ul></li></ol><h4 id="jvm-中两百万个字符串的总内存占用" tabindex="-1"><a class="header-anchor" href="#jvm-中两百万个字符串的总内存占用"><span>JVM 中两百万个字符串的总内存占用</span></a></h4><ol><li><p><strong>总内存开销</strong>：</p><ul><li>如果没有字符串内部化或优化（比如字符串去重），每个字符串的存储开销为 40 bytes，两百万个字符串则需要：40 bytes×2,000,000=80,000,000 bytes40bytes×2,000,000=80,000,000bytes</li></ul></li><li><p><strong>转换为 KB 和 MB</strong>：</p><ul><li>80,000,000 bytes1024≈78,125 KB102480,000,000bytes​≈78,125KB</li><li>80,000,000 bytes1024×1024≈76.294 MB1024×102480,000,000bytes​≈76.294MB</li></ul></li></ol><h4 id="注意" tabindex="-1"><a class="header-anchor" href="#注意"><span>注意</span></a></h4><ul><li><strong>字符串池</strong>：在 Java 中，字符串字面量自动被内部化，存储在 JVM 的字符串池中。如果这些字符串是动态生成的并且不被显式地内部化（使用 <code>String.intern()</code>），则每个字符串都将占用独立的内存空间。如果使用字符串字面量或已内部化的字符串，那么内存占用可能会减少，因为多个字符串引用将指向内存中的同一对象。</li><li><strong>压缩指针</strong>：在较新的 JVM 实现中，如果堆大小小于 32GB，通常可以使用压缩指针，这可能减少对象引用所需的空间，从而略微降低每个字符串对象的内存占用。</li></ul><p>总结来说，两百万个 &quot;beijing_11352&quot; 字符串在没有特别优化的情况下，大约需要 76.294 MB 的内存，这考虑了每个字符串实例和字符数组的存储需求。</p><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> java 中的字符串为什么从 char 数组换成了 byte 数组 ⏰ 2024-04-30 📅 2024-04-30</label></li></ul>',27))])}const c=a(B,[["render",s],["__file","字符，字节，位数，KB，MB.html.vue"]]),h=JSON.parse('{"path":"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE/%E5%AD%97%E7%AC%A6%EF%BC%8C%E5%AD%97%E8%8A%82%EF%BC%8C%E4%BD%8D%E6%95%B0%EF%BC%8CKB%EF%BC%8CMB.html","title":"字符，字节，位数，KB，MB","lang":"zh-CN","frontmatter":{"draw":null,"title":"字符，字节，位数，KB，MB","tags":["信息革命","数据"],"date created":"2024-04-28T00:00:00.000Z","date modified":"2024-11-12T00:00:00.000Z","description":"IST_1183_99214.png|400IST_1183_99214.png|400 在 Java 中十万个长度为 \\"beijing_123132\\" 的字符串是多少 M？ 三个长度单元 字符 character 维度 字节 Byte 维度 KB，MB 位数 Bit 维度 案例分析 普通情况 JVM 中 字符串存储分析 JVM 中两百万个字符串的总内...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE/%E5%AD%97%E7%AC%A6%EF%BC%8C%E5%AD%97%E8%8A%82%EF%BC%8C%E4%BD%8D%E6%95%B0%EF%BC%8CKB%EF%BC%8CMB.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:title","content":"字符，字节，位数，KB，MB"}],["meta",{"property":"og:description","content":"IST_1183_99214.png|400IST_1183_99214.png|400 在 Java 中十万个长度为 \\"beijing_123132\\" 的字符串是多少 M？ 三个长度单元 字符 character 维度 字节 Byte 维度 KB，MB 位数 Bit 维度 案例分析 普通情况 JVM 中 字符串存储分析 JVM 中两百万个字符串的总内..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Ftmp%2F%E5%8D%83%E5%9B%BE_%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E5%9C%A8%E7%BA%BF%E6%90%9C%E7%B4%A2%E4%BB%A3%E7%A0%81%E6%94%BE%E5%A4%A7%E9%95%9C_%E5%9B%BE%E7%89%87%E7%BC%96%E5%8F%B769890404%2F2024%2F05%2F02%2F15-28-24-4d32c6186a8465f253c9ff0fd51e9105-IST_1183_99214-7bf59a.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-24T16:17:22.000Z"}],["meta",{"property":"article:tag","content":"信息革命"}],["meta",{"property":"article:tag","content":"数据"}],["meta",{"property":"article:modified_time","content":"2024-11-24T16:17:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"字符，字节，位数，KB，MB\\",\\"image\\":[\\"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Ftmp%2F%E5%8D%83%E5%9B%BE_%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E5%9C%A8%E7%BA%BF%E6%90%9C%E7%B4%A2%E4%BB%A3%E7%A0%81%E6%94%BE%E5%A4%A7%E9%95%9C_%E5%9B%BE%E7%89%87%E7%BC%96%E5%8F%B769890404%2F2024%2F05%2F02%2F15-28-24-4d32c6186a8465f253c9ff0fd51e9105-IST_1183_99214-7bf59a.png\\"],\\"dateModified\\":\\"2024-11-24T16:17:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"三个长度单元","slug":"三个长度单元","link":"#三个长度单元","children":[{"level":3,"title":"字符 character 维度","slug":"字符-character-维度","link":"#字符-character-维度","children":[]},{"level":3,"title":"字节 Byte 维度","slug":"字节-byte-维度","link":"#字节-byte-维度","children":[]},{"level":3,"title":"KB，MB","slug":"kb-mb","link":"#kb-mb","children":[]},{"level":3,"title":"位数 Bit 维度","slug":"位数-bit-维度","link":"#位数-bit-维度","children":[]}]},{"level":2,"title":"案例分析","slug":"案例分析","link":"#案例分析","children":[{"level":3,"title":"普通情况","slug":"普通情况","link":"#普通情况","children":[]},{"level":3,"title":"JVM 中","slug":"jvm-中","link":"#jvm-中","children":[]}]}],"git":{"createdTime":1732465042000,"updatedTime":1732465042000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":1}]},"readingTime":{"minutes":4.84,"words":1452},"filePathRelative":"2 第二大脑/1 节点/CS/软件工程/数据库/数据/字符，字节，位数，KB，MB.md","localizedDate":"2024年11月25日","autoDesc":true}');export{c as comp,h as data};
