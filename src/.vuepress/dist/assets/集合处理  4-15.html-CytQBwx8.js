import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as t,g as i,f as n,o as r}from"./app-DokaGNO4.js";const s={};function p(l,e){return r(),a("div",null,[e[0]||(e[0]=t("figure",null,[t("img",{src:"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fliuyishou%2Ftmp%2F2024%2F04%2F17%2F17-23-07-410c3e7f6221df9447563d5979704567-download-89b210.png?x-oss-process=image/resize,l_400",alt:"download.png|400",tabindex:"0",loading:"lazy"}),t("figcaption",null,"download.png|400")],-1)),i(" more "),e[1]||(e[1]=n("<p>1.【强制】set 和 map-key，需要同时重写 hashCode 和 equals 方法</p><blockquote><p>说明：String 因为覆写了 hashCode 和 equals 方法，所以可以愉快地将 String 对象作为 key 来使用。 本质是需要自己定义什么是相等，@Data 包括了 @EqualsAndHashCode</p></blockquote><p>2.【强制】判断所有集合内部的元素是否为空，使用 isEmpty() 方法，而不是 size() == 0 的方式。</p><p>14.【强制】不要在 foreach 循环里进行元素的 remove / add 操作。remove 元素请使用 iterator 方式，如果并发操作，需要对 iterator 对象加锁。</p><p>21.【参考】利用 Set 元素唯一的特性，可以快速对一个集合进行去重操作，避免使用 List 的 contains() 进行遍历去重或者判断包含操作。</p><blockquote><p>List - List 或者 List - set removeAll 的语义都是除种类，而不是减库存<br> [苹果，苹果，香蕉，香蕉，香蕉]-[苹果，香蕉，香蕉]=[苹果，香蕉] list.removeAll(List) -&gt; List.removeAll(set)</p></blockquote><p>List 里可以有多少个 null？</p><blockquote><p><code>List</code> 实现如 <code>ArrayList</code> 和 <code>LinkedList</code> 在理论上允许你添加多达 <code>Integer.MAX_VALUE</code> 个 <code>null</code> 元素，</p></blockquote><p>18.【推荐】使用 entrySet 遍历 Map 类集合 KV，而不是 keySet 方式进行遍历。 说明：keySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出 key 所对应的 value。而<br> entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效率更高。如果是 JDK8，使用 Map.forEach 方法。 正例：values() 返回的是 V 值集合，是一个 list 集合对象；keySet() 返回的是 K 值集合，是一个 Set 集合对象； entrySet() 返回的是 K-V 值组合的 Set 集合。</p><ol><li>类似库存这种 <code>Map&lt;E, Integer&gt;</code> 的场景，可以使用 Guava 的 <code>Multiset</code></li></ol>",10))])}const m=o(s,[["render",p],["__file","集合处理  4-15.html.vue"]]),g=JSON.parse('{"path":"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E9%98%BF%E9%87%8C%E8%A7%84%E8%8C%83/%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86%20%204-15.html","title":"集合处理  4-15","lang":"zh-CN","frontmatter":{"draw":null,"title":"集合处理  4-15","tags":["1 Dev","Java","代码味道","信息革命"],"date created":"2024-04-17T00:00:00.000Z","date modified":"2024-11-12T00:00:00.000Z","description":"download.png|400download.png|400 1.【强制】set 和 map-key，需要同时重写 hashCode 和 equals 方法 说明：String 因为覆写了 hashCode 和 equals 方法，所以可以愉快地将 String 对象作为 key 来使用。 本质是需要自己定义什么是相等，@Data 包括了 @Equ...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E9%98%BF%E9%87%8C%E8%A7%84%E8%8C%83/%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86%20%204-15.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:title","content":"集合处理  4-15"}],["meta",{"property":"og:description","content":"download.png|400download.png|400 1.【强制】set 和 map-key，需要同时重写 hashCode 和 equals 方法 说明：String 因为覆写了 hashCode 和 equals 方法，所以可以愉快地将 String 对象作为 key 来使用。 本质是需要自己定义什么是相等，@Data 包括了 @Equ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fliuyishou%2Ftmp%2F2024%2F04%2F17%2F17-23-07-410c3e7f6221df9447563d5979704567-download-89b210.png?x-oss-process=image/resize,l_400"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-24T16:17:22.000Z"}],["meta",{"property":"article:tag","content":"1 Dev"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"代码味道"}],["meta",{"property":"article:tag","content":"信息革命"}],["meta",{"property":"article:modified_time","content":"2024-11-24T16:17:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"集合处理  4-15\\",\\"image\\":[\\"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fliuyishou%2Ftmp%2F2024%2F04%2F17%2F17-23-07-410c3e7f6221df9447563d5979704567-download-89b210.png?x-oss-process=image/resize,l_400\\"],\\"dateModified\\":\\"2024-11-24T16:17:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1732465042000,"updatedTime":1732465042000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":1}]},"readingTime":{"minutes":1.6,"words":481},"filePathRelative":"2 第二大脑/1 节点/CS/编程语言/Java/阿里规范/集合处理  4-15.md","localizedDate":"2024年11月25日","autoDesc":true}');export{m as comp,g as data};
