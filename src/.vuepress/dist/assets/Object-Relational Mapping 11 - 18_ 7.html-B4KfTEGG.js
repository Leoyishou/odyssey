import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a,g as e,f as l,o as n}from"./app-DokaGNO4.js";const d={};function h(p,i){return n(),t("div",null,[i[0]||(i[0]=a("p",null,"excerpt",-1)),e(" more "),i[1]||(i[1]=l(`<p>在后端开发中，OOP（面向对象编程）规约指的是一组实践原则和设计模式，</p><h2 id="表数与表意" tabindex="-1"><a class="header-anchor" href="#表数与表意"><span>表数与表意</span></a></h2><p>8.【强制】任何货币金额，均以最小货币单位且为整型类型进行存储。</p><p>7.【强制】所有整型包装类对象之间值的比较，全部使用 equals 方法比较。</p><blockquote><p>因为整数常量池的存在</p></blockquote><p>9.【强制】浮点数之间的等值判断，基本数据类型不能使用 == 进行比较，包装数据类型不能使用 equals 进行判断。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)指定一个误差范围，两个浮点数的差值在此范围之内，则认为是相等的。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">float</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1.0F</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0.9F</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">float</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> b </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0.9F</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0.8F</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">float</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> diff </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1e-6F</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">abs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b)</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> diff) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">	System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;true&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)使用 BigDecimal 来定义值，再进行浮点数的运算操作。</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BigDecimal</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BigDecimal</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1.0&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BigDecimal</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> b </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BigDecimal</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0.9&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BigDecimal</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> c </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BigDecimal</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0.8&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BigDecimal</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">subtract</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(b);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BigDecimal</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> y </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">subtract</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(c);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">compareTo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(y)</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">	System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;true&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>10.【强制】BigDecimal 的等值比较应使用 compareTo() 方法，而不是 equals() 方法。</p><p>12.【强制】禁止使用构造方法 BigDecimal(double) 的方式把 double 值转化为 BigDecimal 对象。</p><blockquote><p>正例：优先推荐<strong>入参为 String</strong> 的构造方法，或使用 BigDecimal 的 valueOf 方法，此方法内部其实执行了 Double 的<br> toString，而 Double 的 toString 按 double 的实际能表达的精度对尾数进行了截断。 BigDecimal recommend1 = new BigDecimal(&quot;0.1&quot;);<br> BigDecimal recommend2 = BigDecimal.valueOf(0.1);</p></blockquote><h2 id="pojo" tabindex="-1"><a class="header-anchor" href="#pojo"><span>POJO</span></a></h2><p>16.【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。</p><p>13.【强制】所有的 POJO 类属性必须使用包装数据类型。</p><p>14.【强制】定义 DO / PO / DTO / VO 等 POJO 类时，不要设定任何属性默认值</p><p>18.【强制】禁止在 POJO 类中，同时存在对应属性 xxx 的 isXxx() 和 getXxx() 方法。</p><p>17.【强制】POJO 类必须写 toString 方法。使用 IDE 中的工具 source &gt; generate toString 时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString()。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">com</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">qunar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">dzs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">hotelsearch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">polaris</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">domain</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">entity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">price</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MakePriceSubrule</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">7c29daf3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">MakePriceSubrule</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(subruleType</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> priceRangeLowerLimit</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> priceRangeUpperLimit</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> beatRate</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> defRate</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> maxRate</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> minRate</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> beatMaxRate</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> beatMinRate</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> maxBeatMoney</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="do" tabindex="-1"><a class="header-anchor" href="#do"><span>DO</span></a></h2><p>11.【强制】定义数据对象 DO 类时，属性类型要与数据库字段类型相匹配。</p><table><thead><tr><th>MySQL Type</th><th>JDBCType</th><th>JavaType</th></tr></thead><tbody><tr><td>CHAR, VARCHAR</td><td>CHAR, VARCHAR</td><td>String</td></tr><tr><td><em>TEXT</em>, MEDIUMTEXT, LONGTEXT</td><td><em>LONGVARCHAR</em></td><td>String</td></tr><tr><td>DECIMAL, NUMERIC</td><td>NUMERIC, DECIMAL</td><td>java.math.BigDecimal</td></tr><tr><td>TINYINT(1)</td><td>BIT, BOOLEAN</td><td>boolean</td></tr><tr><td>TINYINT</td><td>TINYINT</td><td>byte</td></tr><tr><td>SMALLINT</td><td>SMALLINT</td><td>short</td></tr><tr><td>INT</td><td>INTEGER</td><td>int</td></tr><tr><td>BIGINT</td><td>BIGINT</td><td>long</td></tr><tr><td>FLOAT</td><td>REAL</td><td>float</td></tr><tr><td>FLOAT, DOUBLE</td><td>FLOAT, DOUBLE</td><td>double</td></tr><tr><td>BINARY, VARBINARY</td><td>BINARY, VARBINARY</td><td>byte[]</td></tr><tr><td>BLOB, MEDIUMBLOB, LONGBLOB</td><td>LONGVARBINARY</td><td>byte[]</td></tr><tr><td>BINARY, VARBINARY, BLOB</td><td>BINARY, VARBINARY, LONGVARBINARY</td><td>byte[]</td></tr><tr><td>DATE</td><td>DATE</td><td>java.sql.Date</td></tr><tr><td>TIME</td><td>TIME</td><td>java.sql.Time</td></tr><tr><td>TIMESTAMP</td><td>TIMESTAMP</td><td>java.sql.Timestamp</td></tr><tr><td>TEXT</td><td>CLOB</td><td>Clob</td></tr><tr><td>BLOB, MEDIUMBLOB, LONGBLOB</td><td>BLOB</td><td>Blob</td></tr><tr><td></td><td>ARRAY</td><td>Array</td></tr><tr><td></td><td>DISTINCT</td><td>mapping of underlying type</td></tr><tr><td></td><td>STRUCT</td><td>Struct</td></tr><tr><td></td><td>REF</td><td>Ref</td></tr><tr><td></td><td>DATALINK</td><td>java.net.URL</td></tr></tbody></table><table><thead><tr><th>MySQL</th><th>JDBCType</th><th>JavaType</th></tr></thead><tbody><tr><td></td><td>CHAR</td><td>String</td></tr><tr><td></td><td>VARCHAR</td><td>String</td></tr><tr><td><em>Text</em></td><td>LONGVARCHAR</td><td>String</td></tr><tr><td></td><td>NUMERIC</td><td>java.math.BigDecimal</td></tr><tr><td></td><td>DECIMAL</td><td>java.math.BigDecimal</td></tr><tr><td></td><td>BIT</td><td>boolean</td></tr><tr><td></td><td>BOOLEAN</td><td>boolean</td></tr><tr><td></td><td>TINYINT</td><td>byte</td></tr><tr><td></td><td>SMALLINT</td><td>short</td></tr><tr><td></td><td>INTEGER</td><td>int</td></tr><tr><td></td><td>BIGINT</td><td>long</td></tr><tr><td></td><td>REAL</td><td>float</td></tr><tr><td></td><td>FLOAT</td><td>double</td></tr><tr><td></td><td>DOUBLE</td><td>double</td></tr><tr><td></td><td>BINARY</td><td>byte[]</td></tr><tr><td></td><td>VARBINARY</td><td>byte[]</td></tr><tr><td></td><td>LONGVARBINARY</td><td>byte[]</td></tr><tr><td></td><td>DATE</td><td>java.sql.Date</td></tr><tr><td></td><td>TIME</td><td>java.sql.Time</td></tr><tr><td></td><td>TIMESTAMP</td><td>java.sql.Timestamp</td></tr><tr><td></td><td>CLOB</td><td>Clob</td></tr><tr><td></td><td>BLOB</td><td>Blob</td></tr><tr><td></td><td>ARRAY</td><td>Array</td></tr><tr><td></td><td>DISTINCT</td><td>mapping of underlying type</td></tr><tr><td></td><td>STRUCT</td><td>Struct</td></tr><tr><td></td><td>REF</td><td>Ref</td></tr><tr><td></td><td>DATALINK</td><td>java.net.URL</td></tr></tbody></table><hr><p>1.【强制】在表查询中，一律不要使用 * 作为查询的字段列表，需要哪些字段必须明确写明。</p><p>2.【强制】POJO 类的布尔属性不能加 is，而数据库字段必须加 is_，要求在 resultMap 中进行字段与属<br> 性之间的映射。</p><p>3.【强制】不要用 resultClass 当返回参数，即使所有类属性名与数据库字段一一对应，也需要定义 resultMap；反过来，每一个表也必然有一个 resultMap 与之对应。</p><p>4.【强制】sql.xml 配置参数使用：#{}，#param# 不要使用 \${} 此种方式容易出现 SQL 注入。</p><p>5.【强制】iBATIS 自带的 queryForList(String statementName，int start，int size) 不推荐使用。</p><p>6.【强制】不允许直接拿 HashMap 与 Hashtable 作为查询结果集的输出。</p><blockquote><p>道理类似于 extendMap 透传字段，和数据库交互用自定义的对象接</p></blockquote><p>7.【强制】更新数据表记录时，必须同时更新记录对应的 update_time 字段值为当前时间。</p><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串"><span>字符串</span></a></h2><p>占位符的问题</p><p>在 Java 标准库中，<code>String.format</code> 方法确实不支持 <code>{}</code> 作为占位符。这种占位符风格主要来自于诸如 SLF4J 这样的日志库，这些库在内部实现了自己的字符串格式化机制，允许使用 <code>{}</code> 作为占位符。如果你在代码中使用日志记录（比如使用 SLF4J 或 Logback），你确实可以直接使用 <code>{}</code> 占位符来格式化消息。但在普通的字符串处理中，如使用 <code>String.format</code>，你需要使用 <code>%s</code>（字符串）、<code>%d</code>（整数）、<code>%f</code>（浮点数）等格式化占位符</p><h2 id="为什么一般不需要实现-serializable-什么时候才需要实现-serializable" tabindex="-1"><a class="header-anchor" href="#为什么一般不需要实现-serializable-什么时候才需要实现-serializable"><span>为什么一般不需要实现 serializable？什么时候才需要实现 serializable</span></a></h2><ol><li><p>给前端的 VO，一般不需要实现 Serializable 接口。 我们返回给前端的数据，通常是 JSON 和 XML，但是实际上这是一个 String，String 是实现了 java。io。Serializable 的，所以我们的 DTO 是不需要实现 java。io。Serializable 接口的。</p></li><li><p>给数据库的 DAO，一般需要实现 Serializable 接口<br> 除非你要将一个对象写入文件，此时就需要继承 Serializable。这个接口不用实现任何方法，就是一个标识作用， Jvm 在做序列化操作的时候会去检查目标类有没有实现 java.io.Serializable 接口，没有实现的话，根据情况抛出异常：java.io.NotSerializableException</p></li></ol>`,35))])}const A=s(d,[["render",h],["__file","Object-Relational Mapping 11 - 18_ 7.html.vue"]]),g=JSON.parse('{"path":"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E9%98%BF%E9%87%8C%E8%A7%84%E8%8C%83/Object-Relational%20Mapping%2011%20-%2018_%207.html","title":"Object-Relational Mapping 11 - 18+ 7","lang":"zh-CN","frontmatter":{"draw":null,"title":"Object-Relational Mapping 11 - 18+ 7","tags":["1 Dev","Java","代码味道","信息革命"],"date created":"2024-04-17T00:00:00.000Z","date modified":"2024-11-12T00:00:00.000Z","description":"excerpt 在后端开发中，OOP（面向对象编程）规约指的是一组实践原则和设计模式， 表数与表意 8.【强制】任何货币金额，均以最小货币单位且为整型类型进行存储。 7.【强制】所有整型包装类对象之间值的比较，全部使用 equals 方法比较。 因为整数常量池的存在 9.【强制】浮点数之间的等值判断，基本数据类型不能使用 == 进行比较，包装数据类型不...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E9%98%BF%E9%87%8C%E8%A7%84%E8%8C%83/Object-Relational%20Mapping%2011%20-%2018_%207.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:title","content":"Object-Relational Mapping 11 - 18+ 7"}],["meta",{"property":"og:description","content":"excerpt 在后端开发中，OOP（面向对象编程）规约指的是一组实践原则和设计模式， 表数与表意 8.【强制】任何货币金额，均以最小货币单位且为整型类型进行存储。 7.【强制】所有整型包装类对象之间值的比较，全部使用 equals 方法比较。 因为整数常量池的存在 9.【强制】浮点数之间的等值判断，基本数据类型不能使用 == 进行比较，包装数据类型不..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-24T16:17:22.000Z"}],["meta",{"property":"article:tag","content":"1 Dev"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"代码味道"}],["meta",{"property":"article:tag","content":"信息革命"}],["meta",{"property":"article:modified_time","content":"2024-11-24T16:17:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Object-Relational Mapping 11 - 18+ 7\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-24T16:17:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"表数与表意","slug":"表数与表意","link":"#表数与表意","children":[]},{"level":2,"title":"POJO","slug":"pojo","link":"#pojo","children":[]},{"level":2,"title":"DO","slug":"do","link":"#do","children":[]},{"level":2,"title":"字符串","slug":"字符串","link":"#字符串","children":[]},{"level":2,"title":"为什么一般不需要实现 serializable？什么时候才需要实现 serializable","slug":"为什么一般不需要实现-serializable-什么时候才需要实现-serializable","link":"#为什么一般不需要实现-serializable-什么时候才需要实现-serializable","children":[]}],"git":{"createdTime":1732465042000,"updatedTime":1732465042000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":1}]},"readingTime":{"minutes":4.43,"words":1329},"filePathRelative":"2 第二大脑/1 节点/CS/编程语言/Java/阿里规范/Object-Relational Mapping 11 - 18+ 7.md","localizedDate":"2024年11月25日","autoDesc":true}');export{A as comp,g as data};
