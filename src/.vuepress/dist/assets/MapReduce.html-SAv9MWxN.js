import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as i,g as o,f as n,o as l}from"./app-DokaGNO4.js";const p={};function s(g,e){return l(),t("div",null,[e[0]||(e[0]=i("figure",null,[i("img",{src:"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F07%2F28%2F17-58-18-a630259d341bb3f30076abf7ae563b59-20240728175817-c677c1.png",alt:"image.png|1000",tabindex:"0",loading:"lazy"}),i("figcaption",null,"image.png|1000")],-1)),o(" more "),e[1]||(e[1]=n('<p>以统计一段长文本的各单词词频为例</p><ol><li>split 任意切分原始输入——总的大文本是可以任意分割的</li><li>map 无依赖的计算——逐个统计就好，是无状态的</li><li>Shuffle 整理牌，把相同 key 的放一起</li><li>reduce 有依赖的计算——按照同一个单词作为 key 进行规约</li><li>MR 容错—矩阵（包括数据）</li></ol><figure><img src="https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F07%2F29%2F10-47-40-c77de7f51ed2973f17e76e1fed9e1d52-20240729104739-183e3a.png" alt="image.png|1000" tabindex="0" loading="lazy"><figcaption>image.png|1000</figcaption></figure><p>1、内存和磁盘使用方面 <a href="Spark">Spark</a> vs MapReduce 不等于内存 vs 磁盘，Spark 和 MapReduce 的计算都发生在内存中，区别在于：•MapReduce 需要将每次计算的结果写入磁盘，然后再从磁盘读取数据，从而导致了频繁的磁盘 10。•Spark 通常不需要将计算的结果写入磁盘，可以在内存中进行迭代计算 Q。这得益于 Spark 的 RDD 和 DAG（有向无环图 Q），其中 DAG 记录了 job 的 stage 以及在 job 执行过程中父 RDD 和子 RDD 之间的依赖关系。中间结果能够以 RDD 的形式存放在内存中，极大减少了磁盘 I0Q。 2、Shuffle 上的不同 Spark 和 MapReduce 在计算过程中通常都不可避免的会进行 Shuffle，Shuffle 都会落盘，但：• MapReduce 在 Shuffle 时需要花费大量时间进行排序，排序在 MapReduce 的 Shuffle 中似乎是不可避免的；• Spark 在 Shuffle 时则只有部分场景才需要排序，支持基于 Hash 的分布式聚合，更加省时；</p><h2 id="特性" tabindex="-1"><a class="header-anchor" href="#特性"><span>特性</span></a></h2><p>MapReduce的核心在于其任务的可分性和可规约性：</p><ol><li><strong>可分性</strong>：问题可以被分解为多个独立的子任务。</li><li><strong>可规约性</strong>：这些子任务的结果可以被合并得到最终结果。</li></ol><h2 id="那么反面是啥-什么任务是不可规约的" tabindex="-1"><a class="header-anchor" href="#那么反面是啥-什么任务是不可规约的"><span>那么反面是啥，什么任务是不可规约的？</span></a></h2><p>反过来说，不适合MapReduce的任务通常具有以下特征：</p><ol><li><strong>强依赖性</strong>：任务中的步骤彼此强烈依赖，无法并行处理。</li><li><strong>顺序性</strong>：必须按特定顺序执行的任务。</li><li><strong>全局状态依赖</strong>：需要访问或修改全局状态的任务。</li><li><strong>迭代性</strong>：需要多次迭代的算法，每次迭代依赖于前一次的结果。</li><li><strong>实时性要求</strong>：需要快速响应的实时或近实时处理任务。</li><li><strong>小数据量</strong>：数据量较小，分布式处理的开销可能超过其带来的收益。</li><li><strong>复杂的数据关系</strong>：涉及复杂的数据关系或图结构的任务。</li></ol><h2 id="具体例子" tabindex="-1"><a class="header-anchor" href="#具体例子"><span>具体例子</span></a></h2><ol><li><strong>图算法</strong>：如PageRank，需要多次迭代且每个节点依赖于其他节点的状态。</li><li><strong>机器学习算法</strong>：许多机器学习算法需要多次迭代和全局状态。</li><li><strong>事务处理</strong>：需要保持全局一致性的数据库事务。</li><li><strong>自然语言处理</strong>：某些NLP任务需要考虑整个文本的上下文。</li><li><strong>实时流处理</strong>：需要立即处理和响应的数据流。</li></ol><h2 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h2><p>虽然MapReduce强大且适用于许多大数据处理场景，但它并非万能的。对于具有强依赖性、顺序性、全局状态需求或迭代性的任务，可能需要考虑其他分布式计算模型，如图计算框架（如Pregel）、流处理系统（如Apache Flink）或更通用的分布式计算框架（如Apache Spark）。</p>',14))])}const d=a(p,[["render",s],["__file","MapReduce.html.vue"]]),m=JSON.parse('{"path":"/1%20%E4%B8%80%E5%88%87%E7%9A%86%E9%A1%B9%E7%9B%AE/Q2%EF%BC%9A%E5%81%9ACS%E7%9A%84%E7%BB%8F%E5%85%B8lab/MapReduce.html","title":"MapReduce","lang":"zh-CN","frontmatter":{"draw":"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fliuyishou%2Ftmp%2F2024%2F07%2F29%2F14-29-11-250102658e306624126296f0a23acee6-mapreduce.drawio-e226df.png","aliases":["拆解-规约"],"tags":[],"title":"MapReduce","date created":"2024-07-11T00:00:00.000Z","date modified":"2024-11-12T00:00:00.000Z","description":"image.png|1000image.png|1000 以统计一段长文本的各单词词频为例 split 任意切分原始输入——总的大文本是可以任意分割的 map 无依赖的计算——逐个统计就好，是无状态的 Shuffle 整理牌，把相同 key 的放一起 reduce 有依赖的计算——按照同一个单词作为 key 进行规约 MR 容错—矩阵（包括数据） im...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/1%20%E4%B8%80%E5%88%87%E7%9A%86%E9%A1%B9%E7%9B%AE/Q2%EF%BC%9A%E5%81%9ACS%E7%9A%84%E7%BB%8F%E5%85%B8lab/MapReduce.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:title","content":"MapReduce"}],["meta",{"property":"og:description","content":"image.png|1000image.png|1000 以统计一段长文本的各单词词频为例 split 任意切分原始输入——总的大文本是可以任意分割的 map 无依赖的计算——逐个统计就好，是无状态的 Shuffle 整理牌，把相同 key 的放一起 reduce 有依赖的计算——按照同一个单词作为 key 进行规约 MR 容错—矩阵（包括数据） im..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F07%2F28%2F17-58-18-a630259d341bb3f30076abf7ae563b59-20240728175817-c677c1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-11T14:48:27.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-11T14:48:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MapReduce\\",\\"image\\":[\\"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F07%2F28%2F17-58-18-a630259d341bb3f30076abf7ae563b59-20240728175817-c677c1.png\\",\\"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F07%2F29%2F10-47-40-c77de7f51ed2973f17e76e1fed9e1d52-20240729104739-183e3a.png\\"],\\"dateModified\\":\\"2024-12-11T14:48:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"特性","slug":"特性","link":"#特性","children":[]},{"level":2,"title":"那么反面是啥，什么任务是不可规约的？","slug":"那么反面是啥-什么任务是不可规约的","link":"#那么反面是啥-什么任务是不可规约的","children":[]},{"level":2,"title":"具体例子","slug":"具体例子","link":"#具体例子","children":[]},{"level":2,"title":"结论","slug":"结论","link":"#结论","children":[]}],"git":{"createdTime":1732465042000,"updatedTime":1733928507000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":1}]},"readingTime":{"minutes":3.08,"words":925},"filePathRelative":"1 一切皆项目/Q2：做CS的经典lab/MapReduce.md","localizedDate":"2024年11月25日","autoDesc":true}');export{d as comp,m as data};
