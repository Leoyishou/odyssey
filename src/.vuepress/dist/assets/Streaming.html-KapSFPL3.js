import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,f as n,o as t}from"./app-DokaGNO4.js";const a={};function l(r,e){return t(),s("div",null,e[0]||(e[0]=[n(`<p>OpenAI 的流式输出（Streaming）主要有两种实现方式：Server-Sent Events (SSE) 和 HTTP Chunked Transfer Encoding。让我用图表来说明这两种方式。</p><div class="language-mermaid line-numbers-mode" data-highlighter="shiki" data-ext="mermaid" data-title="mermaid" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sequenceDiagram</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    participant Client</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    participant Server</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Note over Client,Server: 方式一：Server-Sent Events (SSE)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Client-&gt;&gt;Server: HTTP GET 请求&lt;br/&gt;Headers: Accept: text/event-stream</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    activate Server</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Note right of Server: 开始生成响应</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Server-&gt;&gt;Client: data: {&quot;content&quot;: &quot;Hello&quot;}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Server-&gt;&gt;Client: data: {&quot;content&quot;: &quot; World&quot;}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Server-&gt;&gt;Client: data: {&quot;content&quot;: &quot;!&quot;}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Server-&gt;&gt;Client: data: [DONE]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    deactivate Server</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Note over Client,Server: 方式二：HTTP Chunked Transfer</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Client-&gt;&gt;Server: HTTP POST 请求&lt;br/&gt;Headers: Transfer-Encoding: chunked</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    activate Server</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Note right of Server: 分块发送数据</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Server-&gt;&gt;Client: 5\\r\\nHello\\r\\n</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Server-&gt;&gt;Client: 6\\r\\n World\\r\\n</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Server-&gt;&gt;Client: 1\\r\\n!\\r\\n</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Server-&gt;&gt;Client: 0\\r\\n\\r\\n</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    deactivate Server</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两种实现方式的详细解释：</p><ol><li><p>Server-Sent Events (SSE)</p><ul><li>基于 HTTP 协议</li><li>客户端发送请求时带上 <code>Accept: text/event-stream</code> 头</li><li>服务器会保持连接打开</li><li>使用特定的文本格式发送数据（data: 开头的行）</li><li>适合单向数据推送</li><li>自动重连机制</li><li>OpenAI API 默认使用这种方式</li></ul></li><li><p>HTTP Chunked Transfer Encoding</p><ul><li>同样基于 HTTP 协议</li><li>服务器通过分块发送数据</li><li>每个块前面有该块的大小（十六进制）</li><li>以大小为0的块表示传输结束</li><li>没有自动重连机制</li></ul></li></ol><p>与 WebSocket 相比的主要区别：</p><ul><li>这两种方式都是基于 HTTP 的单向流式传输</li><li>不需要像 WebSocket 那样建立特殊的连接</li><li>更轻量级，适合单向的数据流推送</li><li>服务器实现更简单，不需要维护长连接状态</li></ul><p>实际应用中的选择考虑：</p><ol><li>如果只需要服务器到客户端的数据流，SSE 是很好的选择</li><li>如果需要双向实时通信，则应该选择 WebSocket</li><li>如果是简单的数据流传输，Chunked Transfer 也是可行的方案</li></ol>`,8)]))}const c=i(a,[["render",l],["__file","Streaming.html.vue"]]),h=JSON.parse('{"path":"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BD%91%E7%BB%9C/Streaming.html","title":"","lang":"zh-CN","frontmatter":{"description":"OpenAI 的流式输出（Streaming）主要有两种实现方式：Server-Sent Events (SSE) 和 HTTP Chunked Transfer Encoding。让我用图表来说明这两种方式。 两种实现方式的详细解释： Server-Sent Events (SSE) 基于 HTTP 协议 客户端发送请求时带上 Accept: tex...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BD%91%E7%BB%9C/Streaming.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:description","content":"OpenAI 的流式输出（Streaming）主要有两种实现方式：Server-Sent Events (SSE) 和 HTTP Chunked Transfer Encoding。让我用图表来说明这两种方式。 两种实现方式的详细解释： Server-Sent Events (SSE) 基于 HTTP 协议 客户端发送请求时带上 Accept: tex..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-24T16:17:22.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-24T16:17:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-24T16:17:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1732465042000,"updatedTime":1732465042000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":1}]},"readingTime":{"minutes":1.51,"words":452},"filePathRelative":"2 第二大脑/1 节点/CS/网络/Streaming.md","localizedDate":"2024年11月25日","autoDesc":true}');export{c as comp,h as data};
