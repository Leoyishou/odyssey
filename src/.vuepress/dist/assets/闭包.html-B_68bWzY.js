import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as e,b as o,d as r,e as i,f as p,r as E,o as m}from"./app-DokaGNO4.js";const s={};function d(A,t){const l=E("RouteLink");return m(),n("div",null,[e("blockquote",null,[e("p",null,[t[1]||(t[1]=o("[!核心定义] Lambda表达式能够捕获外部作用域的变量（即")),r(l,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E9%97%AD%E5%8C%85.html"},{default:i(()=>t[0]||(t[0]=[o("闭包")])),_:1}),t[2]||(t[2]=o("）"))])]),t[6]||(t[6]=e("ul",null,[e("li",null,"如果从实现上来看的话，匿名函数如果没有捕捉自由变量，那么它其实可以被实现为一个函数指针，或者直接内联到调用点，"),e("li",null,"如果它捕捉了自由变量那么它将是一个闭包；而闭包则意味着同时包括函数指针和环境两个关键元素。"),e("li",null,[o("在编译优化当中，没有捕捉自由变量的闭包可以被优化成普通函数，这样就无需分配闭包结构体，这种编译技巧被称为"),e("a",{href:"https://zh.wikipedia.org/w/index.php?title=%E5%87%BD%E6%95%B0%E8%B7%83%E5%8D%87&action=edit&redlink=1",target:"_blank",rel:"noopener noreferrer"},"函数跃升"),o("。")])],-1)),e("p",null,[t[4]||(t[4]=o("闭包（Closure）是编程语言中的一个重要概念，特别是在")),r(l,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B.html"},{default:i(()=>t[3]||(t[3]=[o("函数式编程")])),_:1}),t[5]||(t[5]=o('中。 闭包是一个函数，它可以访问其词法作用域之外的变量。换句话说，闭包 " 封闭 " 了其周围的状态。 闭包支持意味着编程语言允许创建和使用这样的函数。在 Groovy 中，闭包是一等公民，这意味着它们可以：'))]),t[7]||(t[7]=p("<ul><li>被赋值给变量</li><li>作为参数传递给函数</li><li>从函数返回</li><li>在运行时创建</li></ul><p>闭包的强大之处在于它可以捕获和保持其创建时的上下文，即使在不同的作用域中执行也是如此。 让我给您一个 Groovy 中闭包的简单例子： Groovy Closure ExampleClick to open code<br> 在这个例子中：</p><p>createMultiplier 函数返回一个闭包。 这个闭包捕获了 factor 参数。 我们创建了两个闭包：doubler 和 tripler。 每个闭包都记住了它被创建时的 factor 值。</p><p>闭包支持使得代码更加灵活和强大。它们在很多场景下非常有用，比如：</p><ul><li>延迟执行</li><li>回调函数</li><li>事件处理</li><li>函数式编程模式</li></ul><p>在 Groovy 中，闭包还被广泛用于集合操作、DSL 构建等场景，大大提高了代码的表达能力和简洁性。</p>",6))])}const B=a(s,[["render",d],["__file","闭包.html.vue"]]),c=JSON.parse('{"path":"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E9%97%AD%E5%8C%85.html","title":"闭包","lang":"zh-CN","frontmatter":{"aliases":["Closure"],"draw":null,"tags":[],"title":"闭包","date created":"2024-08-19T00:00:00.000Z","date modified":"2024-11-12T00:00:00.000Z","description":"[!核心定义] Lambda表达式能够捕获外部作用域的变量（即） 如果从实现上来看的话，匿名函数如果没有捕捉自由变量，那么它其实可以被实现为一个函数指针，或者直接内联到调用点， 如果它捕捉了自由变量那么它将是一个闭包；而闭包则意味着同时包括函数指针和环境两个关键元素。 在编译优化当中，没有捕捉自由变量的闭包可以被优化成普通函数，这样就无需分配闭包结构体...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E9%97%AD%E5%8C%85.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:title","content":"闭包"}],["meta",{"property":"og:description","content":"[!核心定义] Lambda表达式能够捕获外部作用域的变量（即） 如果从实现上来看的话，匿名函数如果没有捕捉自由变量，那么它其实可以被实现为一个函数指针，或者直接内联到调用点， 如果它捕捉了自由变量那么它将是一个闭包；而闭包则意味着同时包括函数指针和环境两个关键元素。 在编译优化当中，没有捕捉自由变量的闭包可以被优化成普通函数，这样就无需分配闭包结构体..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-24T16:17:22.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-24T16:17:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"闭包\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-24T16:17:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1732465042000,"updatedTime":1732465042000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":1}]},"readingTime":{"minutes":1.82,"words":546},"filePathRelative":"2 第二大脑/1 节点/CS/编程语言/Java/闭包.md","localizedDate":"2024年11月25日","autoDesc":true}');export{B as comp,c as data};
