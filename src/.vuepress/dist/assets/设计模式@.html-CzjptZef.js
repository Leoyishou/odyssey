import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,f as n,g as r,a as A,d as i,e as B,b as l,r as s,o as g}from"./app-DokaGNO4.js";const d={};function p(C,E){const t=s("RouteLink");return g(),e("div",null,[E[71]||(E[71]=n("<p>设计模式的概念最早是由 <code>克里斯托佛·亚历山大</code> 在其著作 <code>《建筑模式语言》</code> 中首次提出的。本书介绍了城市设计的 &quot; 语言 &quot;，提供了 253 个描述城镇、邻里、住宅、花园、房间及西部构造的模式，而此类 &quot; 语言 &quot; 的基本单元就是模式。后来，<code>埃里希·伽玛</code>、 <code>约翰·弗利赛德斯</code>、 <code>拉尔夫·约翰逊</code> 和 <code>理查德·赫尔姆</code> 这四位作者接受了模式的概念。1994 年，他们出版了 <code>《设计模式： 可复用面向对象软件的基础》</code> 一书，将设计模式的概念应用到程序开发领域中。</p><p>其实有一部分人并没有仔细阅读过设计模式的相关书籍和资料，但依旧可以编写出优秀的代码。这主要是由于在经过众多项目的锤炼和对程序设计的不断追求，从而在多年编程历程上提炼出来的心得体会。而这份经验最终会与设计模式提到的内容几乎一致，同样会要求高内聚、低耦合、可扩展、可复用。你可能也遇到类似的经历，在学习一些框架的源码时，发现它里的某些设计和你在做开发时一样。</p><p>为软件开发中相同表征的问题，抽象出的可重复利用的解决方案。</p>",3)),r(" more "),E[72]||(E[72]=n('<h2 id="一、设计模式或者说面向对象的本质是啥" tabindex="-1"><a class="header-anchor" href="#一、设计模式或者说面向对象的本质是啥"><span>一、设计模式或者说面向对象的本质是啥？</span></a></h2><ol><li>设计模式往往解决的不是程序运行的效率，因为无论怎样的类或者方法之间的关系，跑起来都是一样的。当然单例、享元等可以节省内存或时间。设计模式更多优化的是程序员开发的效率，通过解耦的方式降低程序的复杂度，抑制熵增。使得本来需要 5 天开发，现在可能需要 3 天就够了。 &quot;the machine does not care, I care!&quot;</li><li>Design patterns are repeatable, template-based approaches that facilitate developers&#39; productive collaboration across several projects. 记得之前面试顺丰的时候，面试官也认为设计模式的掌握优先级是最高的，因为这是程序员之间的共同语言，能够降低沟通的成本。</li></ol><h2 id="二、设计模式或者面向对象的原则是啥" tabindex="-1"><a class="header-anchor" href="#二、设计模式或者面向对象的原则是啥"><span>二、设计模式或者面向对象的原则是啥？</span></a></h2><ol><li>迪米特法则/最少知识原则 <ol><li>最少依赖，一个类中依赖的其他类要尽量少</li><li>分层设计 比如 controller service dao</li></ol></li><li>合成/聚合复用原则 <ul><li>成员变量实现复用，优先于继承实现复用，本质是：依赖注入的组装优于内部创建对象</li></ul></li><li>继承：里氏代换原则、单一职责原则 <ul><li>继承是为了代码复用，实现开闭是利用多态的默认搜索功能去扩展</li><li>里氏的意思是，要多态的时候父类一定是抽象的空的，如果有具体的功能就会改变父类，导致一些场景把父类换成子类后就不能用了</li><li>单一的意思是，一个类只负责一个领域的职责</li></ul></li><li>实现：接口隔离原则</li><li>开闭原则</li><li>依赖倒转</li></ol><h2 id="三、各对应哪些场景-是哪些现实世界的抽象" tabindex="-1"><a class="header-anchor" href="#三、各对应哪些场景-是哪些现实世界的抽象"><span>三、各对应哪些场景，是哪些现实世界的抽象？</span></a></h2><p>不需要特别学院派，一定把各种模式，比如工厂模式、建造者模式分得那么清楚。更重要的是每个模式对应了什么痛点、什么场景，为什么这么设计，能解决什么问题。了解了这些最本质的东西，就可以灵活应用，甚至可以混用各种模式创造出新的模式，来解决特定场景的问题。</p><h3 id="创建型-简化对象的创建过程" tabindex="-1"><a class="header-anchor" href="#创建型-简化对象的创建过程"><span>创建型：简化对象的创建过程</span></a></h3>',7)),A("p",null,[i(t,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html"},{default:B(()=>E[0]||(E[0]=[l("工厂模式")])),_:1}),E[4]||(E[4]=l(" 华为全家桶、苹果全家桶")),E[5]||(E[5]=A("br",null,null,-1)),i(t,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html"},{default:B(()=>E[1]||(E[1]=[l("单例模式")])),_:1}),E[6]||(E[6]=l(" 一个市只需要一家警察局")),E[7]||(E[7]=A("br",null,null,-1)),i(t,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F.html"},{default:B(()=>E[2]||(E[2]=[l("建造者模式")])),_:1}),E[8]||(E[8]=l(" 一个乐高就需要几千个零件")),E[9]||(E[9]=A("br",null,null,-1)),i(t,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F.html"},{default:B(()=>E[3]||(E[3]=[l("原型模式")])),_:1}),E[10]||(E[10]=l(" 成员变量维度的复用，复制报价"))]),E[73]||(E[73]=A("h3",{id:"类间-结构型-field-复用比-extends-复用更灵活",tabindex:"-1"},[A("a",{class:"header-anchor",href:"#类间-结构型-field-复用比-extends-复用更灵活"},[A("span",null,"类间 - 结构型：field 复用比 extends 复用更灵活")])],-1)),A("p",null,[i(t,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F.html"},{default:B(()=>E[11]||(E[11]=[l("享元模式")])),_:1}),E[14]||(E[14]=l(" 对象维度的复用，字符串池")),E[15]||(E[15]=A("br",null,null,-1)),i(t,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F.html"},{default:B(()=>E[12]||(E[12]=[l("门面模式")])),_:1}),E[16]||(E[16]=l(" 事前筹划，用统一的 Monitor 门面，防止以后替换别的 monitor 实现")),E[17]||(E[17]=A("br",null,null,-1)),i(t,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F.html"},{default:B(()=>E[13]||(E[13]=[l("组合模式")])),_:1}),E[18]||(E[18]=l(" 可以抽象为多叉树的对象"))]),E[74]||(E[74]=A("h3",{id:"wrapper-型模式-下边四个实现原理都是聚合",tabindex:"-1"},[A("a",{class:"header-anchor",href:"#wrapper-型模式-下边四个实现原理都是聚合"},[A("span",null,"Wrapper 型模式，下边四个实现原理都是聚合")])],-1)),A("p",null,[i(t,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html"},{default:B(()=>E[19]||(E[19]=[l("代理模式")])),_:1}),E[23]||(E[23]=l(" 主要目的是 AOP 一些非功能性的需求，而非")),E[24]||(E[24]=A("em",null,"核心业务功能",-1)),E[25]||(E[25]=l(" 加强，这是它跟装饰器模式最大的不同。 ")),i(t,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.html"},{default:B(()=>E[20]||(E[20]=[l("桥接模式")])),_:1}),E[26]||(E[26]=l(" 两个 channel 发四种类型的消息，类的双维度扩展")),E[27]||(E[27]=A("br",null,null,-1)),E[28]||(E[28]=A("img",{src:"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F05%2F09%2F23-31-50-292d0171eff85dff962f91864a2bbd18-20240509233149-a6f017.png",alt:"image.png|650",loading:"lazy"},null,-1)),E[29]||(E[29]=A("br",null,null,-1)),i(t,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F.html"},{default:B(()=>E[21]||(E[21]=[l("装饰器模式")])),_:1}),E[30]||(E[30]=l(" 核心业务功能加强 + 嵌套使用")),E[31]||(E[31]=A("br",null,null,-1)),i(t,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.html"},{default:B(()=>E[22]||(E[22]=[l("适配器模式")])),_:1}),E[32]||(E[32]=l(" 事后补救，适配器提供跟原始类不同的接口，而代理模式、装饰器模式提供的都是跟原始类相同的接口。"))]),E[75]||(E[75]=A("h3",{id:"方法间-动作间-行为型-解耦动作-a-和动作-b-的黏连-不管是前后依赖-还是平行选择-都要解耦",tabindex:"-1"},[A("a",{class:"header-anchor",href:"#方法间-动作间-行为型-解耦动作-a-和动作-b-的黏连-不管是前后依赖-还是平行选择-都要解耦"},[A("span",null,"方法间/动作间 - 行为型：解耦动作 A 和动作 B 的黏连，不管是前后依赖，还是平行选择，都要解耦")])],-1)),A("p",null,[i(t,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A8%A1%E7%89%88%E6%A8%A1%E5%BC%8F.html"},{default:B(()=>E[33]||(E[33]=[l("模版模式")])),_:1}),E[44]||(E[44]=l(" 多个行为之间有一些相同的套路")),E[45]||(E[45]=A("br",null,null,-1)),E[46]||(E[46]=A("img",{src:"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F05%2F09%2F22-48-32-2848c020f4162cc43c86e78a3a374d4a-20240509224831-df2bad.png",alt:"image.png|650",loading:"lazy"},null,-1)),E[47]||(E[47]=A("br",null,null,-1)),i(t,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F.html"},{default:B(()=>E[34]||(E[34]=[l("状态模式")])),_:1}),E[48]||(E[48]=l(" 用查表法来实现有限状态机的状态转移")),E[49]||(E[49]=A("br",null,null,-1)),i(t,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F.html"},{default:B(()=>E[35]||(E[35]=[l("命令模式")])),_:1}),E[50]||(E[50]=l(" 把函数当作变量传递来传递去，策略模式不同策略是平行的，命令模式不同策略是迥异的")),E[51]||(E[51]=A("br",null,null,-1)),i(t,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html"},{default:B(()=>E[36]||(E[36]=[l("策略模式")])),_:1}),E[52]||(E[52]=l(" 简单策略模式用枚举")),E[53]||(E[53]=A("br",null,null,-1)),E[54]||(E[54]=A("img",{src:"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F05%2F09%2F21-59-11-5f6779e792be0e23e156e8f6b6b16723-20240509215910-8a13f2.png",alt:"image.png|650",loading:"lazy"},null,-1)),E[55]||(E[55]=A("br",null,null,-1)),i(t,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.html"},{default:B(()=>E[37]||(E[37]=[l("观察者模式")])),_:1}),E[56]||(E[56]=l(" 核心就是动作之间的 attach")),E[57]||(E[57]=A("br",null,null,-1)),E[58]||(E[58]=A("img",{src:"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F05%2F09%2F22-23-42-373cd81c2253eb76f1af3de77ec2912c-20240509222341-26226a.png",alt:"image.png|650",loading:"lazy"},null,-1)),E[59]||(E[59]=A("br",null,null,-1)),i(t,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F.html"},{default:B(()=>E[38]||(E[38]=[l("责任链模式")])),_:1}),E[60]||(E[60]=l(" 按时间顺序把大动作拆成小动作")),E[61]||(E[61]=A("br",null,null,-1)),E[62]||(E[62]=A("img",{src:"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F05%2F09%2F21-48-45-8f2313fbae089bb1b882e75871de9640-20240509214844-c7379f.png",alt:"image.png|650",loading:"lazy"},null,-1)),E[63]||(E[63]=A("br",null,null,-1)),i(t,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F.html"},{default:B(()=>E[39]||(E[39]=[l("迭代器模式")])),_:1}),E[64]||(E[64]=l(" 集合的底层数据结构可能不同")),E[65]||(E[65]=A("br",null,null,-1)),i(t,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F.html"},{default:B(()=>E[40]||(E[40]=[l("访问者模式")])),_:1}),E[66]||(E[66]=A("br",null,null,-1)),i(t,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F.html"},{default:B(()=>E[41]||(E[41]=[l("备忘录模式")])),_:1}),E[67]||(E[67]=A("br",null,null,-1)),i(t,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F.html"},{default:B(()=>E[42]||(E[42]=[l("解释器模式")])),_:1}),E[68]||(E[68]=l(" 从表意的字符串中读取出运算逻辑")),E[69]||(E[69]=A("br",null,null,-1)),i(t,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%B8%AD%E4%BB%8B%E6%A8%A1%E5%BC%8F.html"},{default:B(()=>E[43]||(E[43]=[l("中介模式")])),_:1}),E[70]||(E[70]=l(" 一堆微服务中，注册中心可以理解为广义的中介模式，防止各个服务间错综复杂的调用"))]),E[76]||(E[76]=A("h2",{id:"参考",tabindex:"-1"},[A("a",{class:"header-anchor",href:"#参考"},[A("span",null,"参考")])],-1)),E[77]||(E[77]=A("p",null,[A("a",{href:"https://time.geekbang.org/column/intro/100039001?utm_campaign=geektime_search&utm_content=geektime_search&utm_medium=geektime_search&utm_source=geektime_search&utm_term=geektime_search&tab=catalog",target:"_blank",rel:"noopener noreferrer"},"设计模式之美 (geekbang.org)")],-1))])}const F=o(d,[["render",p],["__file","设计模式@.html.vue"]]),u=JSON.parse('{"path":"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F@.html","title":"设计模式@","lang":"zh-CN","frontmatter":{"draw":null,"title":"设计模式@","tags":["Dev","信息革命","设计模式"],"date created":"2024-04-17T00:00:00.000Z","date modified":"2024-11-12T00:00:00.000Z","description":"设计模式的概念最早是由 克里斯托佛·亚历山大 在其著作 《建筑模式语言》 中首次提出的。本书介绍了城市设计的 \\" 语言 \\"，提供了 253 个描述城镇、邻里、住宅、花园、房间及西部构造的模式，而此类 \\" 语言 \\" 的基本单元就是模式。后来，埃里希·伽玛、 约翰·弗利赛德斯、 拉尔夫·约翰逊 和 理查德·赫尔姆 这四位作者接受了模式的概念。1994 年，...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F@.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:title","content":"设计模式@"}],["meta",{"property":"og:description","content":"设计模式的概念最早是由 克里斯托佛·亚历山大 在其著作 《建筑模式语言》 中首次提出的。本书介绍了城市设计的 \\" 语言 \\"，提供了 253 个描述城镇、邻里、住宅、花园、房间及西部构造的模式，而此类 \\" 语言 \\" 的基本单元就是模式。后来，埃里希·伽玛、 约翰·弗利赛德斯、 拉尔夫·约翰逊 和 理查德·赫尔姆 这四位作者接受了模式的概念。1994 年，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F05%2F09%2F23-31-50-292d0171eff85dff962f91864a2bbd18-20240509233149-a6f017.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-24T16:17:22.000Z"}],["meta",{"property":"article:tag","content":"Dev"}],["meta",{"property":"article:tag","content":"信息革命"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:modified_time","content":"2024-11-24T16:17:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式@\\",\\"image\\":[\\"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F05%2F09%2F23-31-50-292d0171eff85dff962f91864a2bbd18-20240509233149-a6f017.png\\",\\"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F05%2F09%2F22-48-32-2848c020f4162cc43c86e78a3a374d4a-20240509224831-df2bad.png\\",\\"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F05%2F09%2F21-59-11-5f6779e792be0e23e156e8f6b6b16723-20240509215910-8a13f2.png\\",\\"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F05%2F09%2F22-23-42-373cd81c2253eb76f1af3de77ec2912c-20240509222341-26226a.png\\",\\"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F05%2F09%2F21-48-45-8f2313fbae089bb1b882e75871de9640-20240509214844-c7379f.png\\"],\\"dateModified\\":\\"2024-11-24T16:17:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、设计模式或者说面向对象的本质是啥？","slug":"一、设计模式或者说面向对象的本质是啥","link":"#一、设计模式或者说面向对象的本质是啥","children":[]},{"level":2,"title":"二、设计模式或者面向对象的原则是啥？","slug":"二、设计模式或者面向对象的原则是啥","link":"#二、设计模式或者面向对象的原则是啥","children":[]},{"level":2,"title":"三、各对应哪些场景，是哪些现实世界的抽象？","slug":"三、各对应哪些场景-是哪些现实世界的抽象","link":"#三、各对应哪些场景-是哪些现实世界的抽象","children":[{"level":3,"title":"创建型：简化对象的创建过程","slug":"创建型-简化对象的创建过程","link":"#创建型-简化对象的创建过程","children":[]},{"level":3,"title":"类间 - 结构型：field 复用比 extends 复用更灵活","slug":"类间-结构型-field-复用比-extends-复用更灵活","link":"#类间-结构型-field-复用比-extends-复用更灵活","children":[]},{"level":3,"title":"Wrapper 型模式，下边四个实现原理都是聚合","slug":"wrapper-型模式-下边四个实现原理都是聚合","link":"#wrapper-型模式-下边四个实现原理都是聚合","children":[]},{"level":3,"title":"方法间/动作间 - 行为型：解耦动作 A 和动作 B 的黏连，不管是前后依赖，还是平行选择，都要解耦","slug":"方法间-动作间-行为型-解耦动作-a-和动作-b-的黏连-不管是前后依赖-还是平行选择-都要解耦","link":"#方法间-动作间-行为型-解耦动作-a-和动作-b-的黏连-不管是前后依赖-还是平行选择-都要解耦","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1732465042000,"updatedTime":1732465042000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":1}]},"readingTime":{"minutes":5.86,"words":1757},"filePathRelative":"2 第二大脑/1 节点/CS/软件工程/设计模式/设计模式@.md","localizedDate":"2024年11月25日","autoDesc":true}');export{F as comp,u as data};
