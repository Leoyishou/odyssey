import{_ as B}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as e,g as l,d as A,e as r,b as E,r as i,o as s}from"./app-DokaGNO4.js";const a={};function m(p,t){const o=i("RouteLink");return s(),n("div",null,[t[11]||(t[11]=e("p",null,"一堆微服务中，注册中心可以理解为广义的中介模式，防止各个服务间错综复杂的调用",-1)),l(" more "),e("p",null,[A(o,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Bus%E6%80%BB%E7%BA%BF.html"},{default:r(()=>t[0]||(t[0]=[E("Bus总线")])),_:1}),t[1]||(t[1]=E("的核心功能"))]),e("ol",null,[t[7]||(t[7]=e("li",null,"事件编排：就像你说的，bus 确实起到了事件编排的作用。它决定了哪些事情应该先发生，哪些事情应该后发生，以及它们之间如何相互关联。",-1)),t[8]||(t[8]=e("li",null,[E("顺序控制：在代码中，你可以看到 "),e("code",null,".start()"),E(" 和 "),e("code",null,".then()"),E(' 这样的方法。这就像是在给 bus 安排行程表，告诉它："先去这里，然后去那里"。')],-1)),t[9]||(t[9]=e("li",null,"依赖管理：通过这种方式，bus 可以确保某个服务在它所依赖的其他服务都准备好之后才启动。",-1)),t[10]||(t[10]=e("li",null,"解耦：使用 bus 可以让系统的不同部分不需要直接了解彼此，它们只需要和 bus 打交道就行了。这样使得系统更容易维护和扩展。",-1)),e("li",null,[t[4]||(t[4]=E("错误处理：如果在启动过程中出现问题，bus 可以统一处理这些错误，而不是让错误在系统的各个部分散布。 事件驱动架构（Event-Driven Architecture）：总线通常用于实现")),A(o,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BA%8B%E4%BB%B6.html"},{default:r(()=>t[2]||(t[2]=[E("事件")])),_:1}),t[5]||(t[5]=E("驱动的系统，其中组件可以发布和订阅事件（")),A(o,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.html"},{default:r(()=>t[3]||(t[3]=[E("观察者模式")])),_:1}),t[6]||(t[6]=E("）。"))])])])}const C=B(a,[["render",m],["__file","中介模式.html.vue"]]),g=JSON.parse('{"path":"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%B8%AD%E4%BB%8B%E6%A8%A1%E5%BC%8F.html","title":"中介模式","lang":"zh-CN","frontmatter":{"draw":null,"title":"中介模式","tags":["1 Dev","信息革命","设计模式"],"date created":"2024-05-08T00:00:00.000Z","date modified":"2024-11-12T00:00:00.000Z","description":"一堆微服务中，注册中心可以理解为广义的中介模式，防止各个服务间错综复杂的调用 的核心功能 事件编排：就像你说的，bus 确实起到了事件编排的作用。它决定了哪些事情应该先发生，哪些事情应该后发生，以及它们之间如何相互关联。 顺序控制：在代码中，你可以看到 .start() 和 .then() 这样的方法。这就像是在给 bus 安排行程表，告诉它：\\"先去这...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%B8%AD%E4%BB%8B%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:title","content":"中介模式"}],["meta",{"property":"og:description","content":"一堆微服务中，注册中心可以理解为广义的中介模式，防止各个服务间错综复杂的调用 的核心功能 事件编排：就像你说的，bus 确实起到了事件编排的作用。它决定了哪些事情应该先发生，哪些事情应该后发生，以及它们之间如何相互关联。 顺序控制：在代码中，你可以看到 .start() 和 .then() 这样的方法。这就像是在给 bus 安排行程表，告诉它：\\"先去这..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-24T16:17:22.000Z"}],["meta",{"property":"article:tag","content":"1 Dev"}],["meta",{"property":"article:tag","content":"信息革命"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:modified_time","content":"2024-11-24T16:17:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"中介模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-24T16:17:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1732465042000,"updatedTime":1732465042000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":1}]},"readingTime":{"minutes":1.22,"words":365},"filePathRelative":"2 第二大脑/1 节点/CS/软件工程/设计模式/中介模式.md","localizedDate":"2024年11月25日","autoDesc":true}');export{C as comp,g as data};
