import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,g as i,f as p,o as t}from"./app-DokaGNO4.js";const r={};function l(o,e){return t(),a("div",null,[e[0]||(e[0]=n("p",null,"excerpt",-1)),i(" more "),e[1]||(e[1]=p('<h2 id="怎么取环境变量" tabindex="-1"><a class="header-anchor" href="#怎么取环境变量"><span>怎么取环境变量</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">QmqConsumer</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">prefix</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;${qmq.hotel.data.team.min.price.update.prefix}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> onMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Message</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> message) { } </span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">这个${}中取redis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">properties的配置</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">，是怎么实现的，谁来帮忙实现的？</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Value</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;${abnormal.standard.price.redis.namespace}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)  </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> adrPriceRedisNamespace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Java 应用程序中，特别是在使用 Spring 框架时，<code>${}</code> 这种占位符通常用于从外部配置文件中动态地读取配置值。在你提供的代码示例中，<code>@QmqConsumer(prefix = &quot;${qmq.hotel.data.team.min.price.update.prefix}&quot;)</code> 这行代码使用了这种占位符机制来设置注解的属性值。</p><p>具体到如何实现这一功能，一般由以下几个组件协作完成：</p><ol><li><p><strong>属性文件</strong>（如 <code>redis.properties</code>）：这是一个包含了应用程序各种配置的文件。这个文件中的每一个属性可以通过其唯一的键来访问，例如 <code>qmq.hotel.data.team.min.price.update.prefix</code>。</p></li><li><p><strong>Spring 的环境抽象</strong>：Spring 框架提供了一个环境抽象 (<code>Environment</code>)，它是一个用于访问属性的接口，可以从多个来源读取属性，如 JVM 属性、系统环境变量和属性文件等。</p></li><li><p><strong>属性源配置</strong>（<code>PropertySources</code>）：在 Spring 应用程序中，属性文件（如 <code>application.properties</code>, <code>redis.properties</code> 等）被加载到环境的属性源中。这通常是通过配置类中的 ```shell mvn -U -V clean package dependency:tree -Dverbose -DoutputFile=cm_build_dependency.tree -Denforcer.skip=false -Denforcer.requireBom.level=error -Denforcer.requireBom.recordBomVersion=true -Denforcer.bds.deployType=beta -Dbds.deployType=beta -Dgit.srcRoot=http://gitlab.xx.git -Dgit.branchName=FD-243950 -Dmaven.test.skip=true -DskipTests -Dbds.username=yishou.liu -T 4 -DcheckDeployRelease_skip=true -P betanoahrouter -pl h_polaris_web -am</p></li></ol><p>mvn -U -V clean package dependency:tree -Dverbose -DoutputFile=cm_build_dependency.tree -Denforcer.skip=true -Denforcer.bds.deployType=beta -Dbds.deployType=beta -Dgit.srcRoot=http://gitlab.xx.git -Dgit.branchName=FD-243950 -Dmaven.test.skip=true -DskipTests -Dbds.username=yishou.liu -T 4 -DcheckDeployRelease_skip=true -P betanoah -pl h_polaris_web -am</p><div class="language-0 line-numbers-mode" data-highlighter="shiki" data-ext="0" data-title="0" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>    </span></span>\n<span class="line"><span>4. **```shell</span></span>\n<span class="line"><span>mvn -U -V clean package dependency:tree -Dverbose -DoutputFile=cm_build_dependency.tree -Denforcer.skip=false -Denforcer.requireBom.level=error -Denforcer.requireBom.recordBomVersion=true -Denforcer.bds.deployType=beta -Dbds.deployType=beta -Dgit.srcRoot=http://gitlab.xx.git -Dgit.branchName=FD-243950 -Dmaven.test.skip=true -DskipTests -Dbds.username=yishou.liu -T 4 -DcheckDeployRelease_skip=true -P betanoahrouter -pl h_polaris_web -am</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>mvn -U -V clean package dependency:tree -Dverbose -DoutputFile=cm_build_dependency.tree -Denforcer.skip=true -Denforcer.bds.deployType=beta -Dbds.deployType=beta -Dgit.srcRoot=http://gitlab.xx.git -Dgit.branchName=FD-243950 -Dmaven.test.skip=true -DskipTests -Dbds.username=yishou.liu -T 4 -DcheckDeployRelease_skip=true -P betanoah -pl h_polaris_web -am</span></span>\n<span class="line"><span>```1 注解或 ```shell</span></span>\n<span class="line"><span>mvn -U -V clean package dependency:tree -Dverbose -DoutputFile=cm_build_dependency.tree -Denforcer.skip=false -Denforcer.requireBom.level=error -Denforcer.requireBom.recordBomVersion=true -Denforcer.bds.deployType=beta -Dbds.deployType=beta -Dgit.srcRoot=http://gitlab.xx.git -Dgit.branchName=FD-243950 -Dmaven.test.skip=true -DskipTests -Dbds.username=yishou.liu -T 4 -DcheckDeployRelease_skip=true -P betanoahrouter -pl h_polaris_web -am</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>mvn -U -V clean package dependency:tree -Dverbose -DoutputFile=cm_build_dependency.tree -Denforcer.skip=true -Denforcer.bds.deployType=beta -Dbds.deployType=beta -Dgit.srcRoot=http://gitlab.xx.git -Dgit.branchName=FD-243950 -Dmaven.test.skip=true -DskipTests -Dbds.username=yishou.liu -T 4 -DcheckDeployRelease_skip=true -P betanoah -pl h_polaris_web -am</span></span>\n<span class="line"><span>```2**：这些是 Spring 提供的注解，用于将配置文件中的值注入到 Spring 管理的 bean 中。在你的示例中，属性值通过 ```shell</span></span>\n<span class="line"><span>mvn -U -V clean package dependency:tree -Dverbose -DoutputFile=cm_build_dependency.tree -Denforcer.skip=false -Denforcer.requireBom.level=error -Denforcer.requireBom.recordBomVersion=true -Denforcer.bds.deployType=beta -Dbds.deployType=beta -Dgit.srcRoot=http://gitlab.xx.git -Dgit.branchName=FD-243950 -Dmaven.test.skip=true -DskipTests -Dbds.username=yishou.liu -T 4 -DcheckDeployRelease_skip=true -P betanoahrouter -pl h_polaris_web -am</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>mvn -U -V clean package dependency:tree -Dverbose -DoutputFile=cm_build_dependency.tree -Denforcer.skip=true -Denforcer.bds.deployType=beta -Dbds.deployType=beta -Dgit.srcRoot=http://gitlab.xx.git -Dgit.branchName=FD-243950 -Dmaven.test.skip=true -DskipTests -Dbds.username=yishou.liu -T 4 -DcheckDeployRelease_skip=true -P betanoah -pl h_polaris_web -am</span></span>\n<span class="line"><span>```3 注解动态注入到了前缀属性中。</span></span>\n<span class="line"><span>    </span></span>\n<span class="line"><span>5. **解析占位符**：Spring 的 ```shell</span></span>\n<span class="line"><span>mvn -U -V clean package dependency:tree -Dverbose -DoutputFile=cm_build_dependency.tree -Denforcer.skip=false -Denforcer.requireBom.level=error -Denforcer.requireBom.recordBomVersion=true -Denforcer.bds.deployType=beta -Dbds.deployType=beta -Dgit.srcRoot=http://gitlab.xx.git -Dgit.branchName=FD-243950 -Dmaven.test.skip=true -DskipTests -Dbds.username=yishou.liu -T 4 -DcheckDeployRelease_skip=true -P betanoahrouter -pl h_polaris_web -am</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>mvn -U -V clean package dependency:tree -Dverbose -DoutputFile=cm_build_dependency.tree -Denforcer.skip=true -Denforcer.bds.deployType=beta -Dbds.deployType=beta -Dgit.srcRoot=http://gitlab.xx.git -Dgit.branchName=FD-243950 -Dmaven.test.skip=true -DskipTests -Dbds.username=yishou.liu -T 4 -DcheckDeployRelease_skip=true -P betanoah -pl h_polaris_web -am</span></span>\n<span class="line"><span>```4 是一个 bean 后处理器，它对容器中所有 bean 的属性和构造函数参数中的占位符进行解析和替换。</span></span>\n<span class="line"><span>    </span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>在你的示例中，这一过程通常是由 Spring 框架自动完成的，开发者只需确保正确配置属性源并使用正确的注解。如果你使用的是 Spring Boot，这个过程会更加自动化和简化，因为 Spring Boot 有一个内置的机制来自动配置和加载属性文件。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>## 一个 springboot 项目怎么确定走哪套配置环境</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>mvn 编译的时候会传一个参数，</span></span>\n<span class="line"><span>**```shell</span></span>\n<span class="line"><span>mvn -U -V clean package dependency:tree -Dverbose -DoutputFile=cm_build_dependency.tree -Denforcer.skip=false -Denforcer.requireBom.level=error -Denforcer.requireBom.recordBomVersion=true -Denforcer.bds.deployType=beta -Dbds.deployType=beta -Dgit.srcRoot=http://gitlab.xx.git -Dgit.branchName=FD-243950 -Dmaven.test.skip=true -DskipTests -Dbds.username=yishou.liu -T 4 -DcheckDeployRelease_skip=true -P betanoahrouter -pl h_polaris_web -am</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>mvn -U -V clean package dependency:tree -Dverbose -DoutputFile=cm_build_dependency.tree -Denforcer.skip=true -Denforcer.bds.deployType=beta -Dbds.deployType=beta -Dgit.srcRoot=http://gitlab.xx.git -Dgit.branchName=FD-243950 -Dmaven.test.skip=true -DskipTests -Dbds.username=yishou.liu -T 4 -DcheckDeployRelease_skip=true -P betanoah -pl h_polaris_web -am</span></span>\n<span class="line"><span>```5** - 指定一个构建配置文件（Profile），例如，```shell</span></span>\n<span class="line"><span>mvn -U -V clean package dependency:tree -Dverbose -DoutputFile=cm_build_dependency.tree -Denforcer.skip=false -Denforcer.requireBom.level=error -Denforcer.requireBom.recordBomVersion=true -Denforcer.bds.deployType=beta -Dbds.deployType=beta -Dgit.srcRoot=http://gitlab.xx.git -Dgit.branchName=FD-243950 -Dmaven.test.skip=true -DskipTests -Dbds.username=yishou.liu -T 4 -DcheckDeployRelease_skip=true -P betanoahrouter -pl h_polaris_web -am</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>mvn -U -V clean package dependency:tree -Dverbose -DoutputFile=cm_build_dependency.tree -Denforcer.skip=true -Denforcer.bds.deployType=beta -Dbds.deployType=beta -Dgit.srcRoot=http://gitlab.xx.git -Dgit.branchName=FD-243950 -Dmaven.test.skip=true -DskipTests -Dbds.username=yishou.liu -T 4 -DcheckDeployRelease_skip=true -P betanoah -pl h_polaris_web -am</span></span>\n<span class="line"><span>```6 在生产配置下执行安装。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>```shell</span></span>\n<span class="line"><span>mvn -U -V clean package dependency:tree -Dverbose -DoutputFile=cm_build_dependency.tree -Denforcer.skip=false -Denforcer.requireBom.level=error -Denforcer.requireBom.recordBomVersion=true -Denforcer.bds.deployType=beta -Dbds.deployType=beta -Dgit.srcRoot=http://gitlab.xx.git -Dgit.branchName=FD-243950 -Dmaven.test.skip=true -DskipTests -Dbds.username=yishou.liu -T 4 -DcheckDeployRelease_skip=true -P betanoahrouter -pl h_polaris_web -am</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>mvn -U -V clean package dependency:tree -Dverbose -DoutputFile=cm_build_dependency.tree -Denforcer.skip=true -Denforcer.bds.deployType=beta -Dbds.deployType=beta -Dgit.srcRoot=http://gitlab.xx.git -Dgit.branchName=FD-243950 -Dmaven.test.skip=true -DskipTests -Dbds.username=yishou.liu -T 4 -DcheckDeployRelease_skip=true -P betanoah -pl h_polaris_web -am</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',7))])}const u=s(r,[["render",l],["__file","018 环境变量.html.vue"]]),m=JSON.parse('{"path":"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/%E5%B7%A5%E7%A8%8B%E6%80%9D%E7%BB%B4/018%20%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.html","title":"018 环境变量","lang":"zh-CN","frontmatter":{"draw":null,"title":"018 环境变量","tags":["1 Dev","Java","信息革命","工程思维"],"date created":"2024-04-22T00:00:00.000Z","date modified":"2024-11-12T00:00:00.000Z","description":"excerpt 怎么取环境变量 在 Java 应用程序中，特别是在使用 Spring 框架时，${} 这种占位符通常用于从外部配置文件中动态地读取配置值。在你提供的代码示例中，@QmqConsumer(prefix = \\"${qmq.hotel.data.team.min.price.update.prefix}\\") 这行代码使用了这种占位符机制来设置...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/%E5%B7%A5%E7%A8%8B%E6%80%9D%E7%BB%B4/018%20%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:title","content":"018 环境变量"}],["meta",{"property":"og:description","content":"excerpt 怎么取环境变量 在 Java 应用程序中，特别是在使用 Spring 框架时，${} 这种占位符通常用于从外部配置文件中动态地读取配置值。在你提供的代码示例中，@QmqConsumer(prefix = \\"${qmq.hotel.data.team.min.price.update.prefix}\\") 这行代码使用了这种占位符机制来设置..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-24T17:46:49.000Z"}],["meta",{"property":"article:tag","content":"1 Dev"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"信息革命"}],["meta",{"property":"article:tag","content":"工程思维"}],["meta",{"property":"article:modified_time","content":"2024-11-24T17:46:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"018 环境变量\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-24T17:46:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"怎么取环境变量","slug":"怎么取环境变量","link":"#怎么取环境变量","children":[]}],"git":{"createdTime":1732465042000,"updatedTime":1732470409000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":2}]},"readingTime":{"minutes":4,"words":1201},"filePathRelative":"2 第二大脑/1 节点/CS/编程语言/工程思维/018 环境变量.md","localizedDate":"2024年11月25日","autoDesc":true}');export{u as comp,m as data};
