import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as r,b as t,d as o,e as a,r as l,o as s}from"./app-DokaGNO4.js";const m={};function E(A,e){const n=l("RouteLink");return s(),i("div",null,[r("ol",null,[r("li",null,[e[1]||(e[1]=t("用的时候的姿势是")),o(n,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB.html"},{default:a(()=>e[0]||(e[0]=[t("匿名内部类")])),_:1}),e[2]||(e[2]=t("的方式")),e[3]||(e[3]=r("code",null,"new TypeReference<Map<String, Map<String, Set<String>>>>(){}",-1)),e[4]||(e[4]=t("，这样可以使得泛型内容传给其 superClass 的")),e[5]||(e[5]=r("code",null,"<T>",-1))]),r("li",null,[e[7]||(e[7]=t("这里的泛型信息是会保留在字节码中，且可以同过")),o(n,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E5%8F%8D%E5%B0%84.html"},{default:a(()=>e[6]||(e[6]=[t("反射")])),_:1}),e[8]||(e[8]=t("的 API 拿到的。"))])]),e[9]||(e[9]=r("p",null,[t("也就是说通过"),r("code",null,"((ParameterizedType) superClass).getActualTypeArguments()[0]"),t("这个反射函数，把本来会被擦除的类型信息，变为可以保存的成员变量信息，来实现记录和保存某种类型")],-1))])}const C=p(m,[["render",E],["__file","TypeReference.html.vue"]]),y=JSON.parse('{"path":"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/TypeReference.html","title":"TypeReference","lang":"zh-CN","frontmatter":{"draw":null,"tags":[],"title":"TypeReference","date created":"2024-08-14T00:00:00.000Z","date modified":"2024-11-12T00:00:00.000Z","description":"用的时候的姿势是的方式new TypeReference<Map<String, Map<String, Set<String>>>>(){}，这样可以使得泛型内容传给其 superClass 的<T> 这里的泛型信息是会保留在字节码中，且可以同过的 API 拿到的。 也就是说通过((ParameterizedType) superClass).get...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/TypeReference.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:title","content":"TypeReference"}],["meta",{"property":"og:description","content":"用的时候的姿势是的方式new TypeReference<Map<String, Map<String, Set<String>>>>(){}，这样可以使得泛型内容传给其 superClass 的<T> 这里的泛型信息是会保留在字节码中，且可以同过的 API 拿到的。 也就是说通过((ParameterizedType) superClass).get..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-24T16:17:22.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-24T16:17:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"TypeReference\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-24T16:17:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1732465042000,"updatedTime":1732465042000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":1}]},"readingTime":{"minutes":0.49,"words":146},"filePathRelative":"2 第二大脑/1 节点/CS/编程语言/Java/TypeReference.md","localizedDate":"2024年11月25日","autoDesc":true}');export{C as comp,y as data};
