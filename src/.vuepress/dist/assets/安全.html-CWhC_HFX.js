import{_ as b}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,a as t,g,f as i,b as o,d as n,e as r,r as s,o as T}from"./app-DokaGNO4.js";const k={};function m(q,e){const l=s("groupId"),p=s("artifactId"),a=s("version"),u=s("dependency");return T(),d("div",null,[e[19]||(e[19]=t("ul",null,[t("li",null,"Authentication（认证）发生在Authorization（授权）之前"),t("li",null,"认证确认用户的身份，确认用户是否是他们所声称的那个人"),t("li",null,"授权决定用户可以做什么，确定用户能够访问哪些资源或执行哪些操作")],-1)),g(" more "),e[20]||(e[20]=i("<p>前言<br> 下面介绍用 jwt 技术如何来实现单点登录。</p><p>Token<br> 什么是 token<br> Token 是服务端生成的一串字符串，以作客户端进行请求的一个令牌，服务端根据令牌获取客户端的身份信息。 举个栗子：</p><p>http://www.example.com/demo?token=15qwc87wq336scwWFSC2sc1w</p><p>为什么要用 token<br> 互联网时代信息安全验证放在首要的地位，对于敏感的信息（如账号密码等等）明文的出现次数越少越好。</p><p>我们都知道，HTTP 协议是一种无状态的协议，这就意味着当我们向应用服务端提供了用户名和密码进行用户认真后，下次请求还是要再进行用户认证，而且服务端又不知道发起请求是谁。按照这个思维，假如每个请求都带有敏感信息，即使进行加密，但是这就增加暴露频率，并且服务端频繁对每个请求的身份信息进行数据查询验证，这是个很大的开销，显然不是我们想要的结果。</p><p>为了我们登录后让服务端 &quot; 记住 &quot; 我，下次发出请求服务端识别哪个用户发送的，token 令牌能解决 http 无状态的问题，这时候你会觉得 SESSION 不也一样吗？别急，下面会说到。token 就像我们的身份证，客户端一旦得到服务端响应的 token 后本地缓存，之后每次请求带上 token 就行了，重要的是开发者可以在 token 上自定义信息（如 UUID），并且是加密的，服务端就减少数据查询验证身份的开销了。</p><p>与传统的 SESSION 有什么区别<br> 如果您还不了解 session，请先自行百度学习，这里我简单介绍下：</p><p>session 是一种 HTTP 存储机制，目的是为无状态的 HTTP 提供的持久机制。</p><p>Session 一般只提供一种简单的认证 ID，即 JSESSIONID，用户数据只保存在服务端上，因此 JSESSIONID 尤为重要需要严格保密，这导致了 session 的弊端：如果 web 服务器做了负载均衡，那么下一个操作请求到了另一台服务器的时候 session 会丢失。 Session：用户数据保存在服务端；Token：客户端的 cookie 或本地介质存储。 Session 更加适合在浏览器上应用，对于开发 API 接口 Token 是不错的选择。 一旦服务器挂了 sessionid 在服务端内存中映射信息丢失了，token 具有自带性，状态还存在。 Token 安全性好，有签名能防止信息篡改、监听、重放攻击。 Token 能进行授权操作，Session 不可以。 Token 不再依赖于 Cookie，所以你就不需要考虑对 CSRF（跨站请求伪造）的防范。</p><p>HMACSHA256 计算的 Token 验证和解析的费时比数据库查询 Session 多。</p><p>为什么要告别 session？</p><p>有这样一个场景，系统的数据量达到千万级，需要几台服务器部署，当一个用户在其中一台服务器登录后，用 session 保存其登录信息，其他服务器怎么知道该用户登录了？（单点登录），当然解决办法有，可以用 spring-session。如果该系统同时为移动端服务呢？移动端通过 url 向后台要数据，如果用 session，通过 sessionId 识别用户，万一 sessionId 被截获了，别人可以利用 sessionId 向后台要数据，就有安全隐患了。所以有必要跟 session 说拜拜了。服务端不需要存储任何用户的信息，用户的验证应该放在客户端，jwt 就是这种方式！</p><p>token 身份验证流程<br> 客户端使用用户名和密码请求登录验证<br> 服务端接受请求，进行身份验证<br> 验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端<br> 客户端收到 Token 后把它存起来<br> 客户端每次向服务端请求时候就带上 Token<br> 服务端收到 Token 后，去验证 Token，如果验证通过，执行业务逻辑<br> 服务端中跟 Token 有关的问题<br> 或许你们会想到，Token 具有自带性，用户的在线状态不可能存在 Token 中，那怎么知道用户是否在线呢？ 其实服务端中每个 Token 可以与 UUID 形成映射对存储在服务器上面，当用户注销操作时，删除 UUID 与 Token 的键值对，所以查询不到表示下线了<br> 如何存查删 Token？ 我们可以把 Token 信息缓存在内存中，比存在数据库中的好处是读取速度快，开销小，坏处是一旦断点数据全没了，不过 token 重新认证操作获取就有一个了。基于缓存内存中，memcached、redis，KV 方式很适合对 token 查询的需求。 JWT(Json Web Token)<br> 官网地址</p><p>https://jwt.io/</p><p>jwt github<br> https://github.com/jwtk/jjwt</p><p>什么是 JWT(Json Web Token)<br> Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于 JSON 的开放标准。该 token 被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT 的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该 token 也可直接被用于认证，也可被加密。也就是说 JWT 是 Token 的一种表述性声明规范。</p><p>如果你不清楚 JSON 请自行学习</p><p>JWT 长什么样子<br> eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI3OHNhd2RmZjUiLCJzdWIiOiJ4aWFvdGlhbnRpYW4iLCJpYXQiOjE0OTgwMzE0NDIsImlzcyI6IjEyMi4xMTQuMjE0LjE0NyIsImV4cCI6MTQ5ODAzMjY0Mn0.0h_kDhyZLhnt8TRgbLsOnVT8eOUAqgFTEZP-XgIGuA</p><p>上面字符串都是用 Base64 编码后，发现结构类似：xxx.yyy.zzz</p><p>JWT 的结构<br> JWT 包含了三个部分，分别用.分割开来，分别是：</p><p>Header 头部<br> Payload 负载<br> Signature 签名</p><p>// 1.Header，包含 JWT 基础声明，加密算法与类别<br> {</p><p>&quot;alg&quot;: &quot;HS256&quot;, // 加密算法<br> &quot;typ&quot;: &quot;JWT&quot; // 类别<br> }<br> // 2.Payload，存放有效信息的地方<br> // 包含 Claim，它可以一些实体（通常指的用户）的状态和额外的元数据，有三种类型<br> // 2.1.Reserved claims JWT 标准里面定好的 claim，内容如下： // 2.2.Public claims<br> // 2.3.Private claims<br> // 建议的 Claims 不是强制使用的，完全可以按照自己的需求自定义 playload，如果是自定义的 claims 名，您使用的实现库是不会主动去验证它们的<br> {</p><p>&quot;aud&quot;: &quot;uuu&quot;, // 接受者<br> &quot;iss&quot;: &quot;xxx&quot;, // 签发者<br> &quot;exp&quot;: &quot;1498499261660&quot;, // 过期时间<br> &quot;sub&quot;: &quot;yyy&quot;, // 主题<br> &quot;iat&quot;: &quot;1498459261660&quot;, // 签发时间<br> &quot;jti&quot;: &quot;&quot;, // JWT 的唯一身份标示<br> &quot;nbf&quot;: &quot;1498459261660&quot;, // 定义在什么时间之前，该 jwt 都是不可用的<br> ...<br> }<br> // 3.Signature，签名，根据 Header 定义的算法和私钥组合加密<br> HMACSHA256( base64UrlEncode(header) + &quot;.&quot; +<br> base64UrlEncode(payload),<br> secret)</p><p>JWT 签发与验证流程<br> 服务端根据业务需求声明 Header 和 Playload<br> 将 Header 和 Playload 分别生成 Json 字符串<br> Header 和 Playload 分别进行 base64 编码，用. 分隔开来，组成 JWT 的第一和第二部分，例如： eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI3OHNhd2RmZjUiLCJzdWIiOiJ4aWFvdGlhbnRpYW4iLCJpYXQiOjE0OTgwMzE0NDIsImlzcyI6IjEyMi4xMTQuMjE0LjE0NyIsImV4cCI6MTQ5ODAzMjY0Mn0<br> 得到第 3 步生成的字符串，根据 Header 里面 alg 指定的签名算法生成出来形成 JWT 的 Signature 部分。算法不同，签名结果不同，常用的值以及对应的算法如下： 第 4 步生成的 Signature 组成 JWT 的第 3 部分，用. 分隔组成完整的 JWT： eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI3OHNhd2RmZjUiLCJzdWIiOiJ4aWFvdGlhbnRpYW4iLCJpYXQiOjE0OTgwMzE0NDIsImlzcyI6IjEyMi4xMTQuMjE0LjE0NyIsImV4cCI6MTQ5ODAzMjY0Mn0.0h_kDhyZLhnt8TRgbLsOnVT8eOUAqgFTEZP-XgIGuA<br> 到这里服务端签发流程结束<br> 客户端得到 JWT 后存起来，每次请求带上 JWT 字符串<br> 服务端收到请求携带的 JWT，开始进入验证流程<br> 对 JWT 的完整性进行验证，使用 base64 对 Header 进行解码，知道 JWT 使用什么签名<br> 重复第 4 步对 Header 和 Playload 再做一次签名<br> 比较这个签名是否与 JWT 本身携带的签名完全相同，只要不同，就可以认为该 JWT 是被篡改过的，验证失败，验证流程结束<br> 如果相同，使用 base64 对 Playload 进行解码，再进行业务逻辑处理，此时验证成功，验证结束。 注意<br> Playload 不要存放敏感信息，因为该部分用 base64 编码，在客户端是可解的； 服务端保护好 secre 私钥，一旦客户端得带私匙就可以自己签发 JWT 了； 在网络层面上 token 明文传输的话会非常的危险，所以建议一定要使用 HTTPS，并且把 token 放在 post body 里。PS：正在准备下一篇关于 HTTPS 的笔记。 PS：</p><p>推荐个 在线签名工具 用于调试<br> 超赞强大的 API 调试工具 Postman，在谷歌浏览器插件就搜索得到，不过需要翻墙，这个百度好多种方法<br> 实际的业务流程<br> 1.需要调用者先使用用户名和密码去签定身份</p><p>2.鉴定成功，服务器返回一个 Token</p><p>3.调用者之后再调用其他 API 时就在 HTTP Authorization Header 中带着这个 Token</p><p>目前采用的方案<br> 1.使用 jjwt 生成 Token，保存在 Redis 中，以用户名作为 Key</p><p>2.通过设置 Redis 键的 TTL 来实现 Token 自动过期</p><p>3.通过在 Servlet Filter 中拦截请求判断 Token 是否有效</p><p>4.由于 Redis 是基于 Key-Value 进行存储，因此可以实现新的 Token 将覆盖旧的 Token，保证一个用户在一个时间段只有一个可用 Token</p>",32)),t("p",null,[e[7]||(e[7]=o("代码实现")),e[8]||(e[8]=t("br",null,null,-1)),e[9]||(e[9]=o(" maven 依赖")),e[10]||(e[10]=t("br",null,null,-1)),n(u,null,{default:r(()=>[e[3]||(e[3]=t("br",null,null,-1)),n(l,null,{default:r(()=>e[0]||(e[0]=[o("com.auth0")])),_:1}),e[4]||(e[4]=t("br",null,null,-1)),n(p,null,{default:r(()=>e[1]||(e[1]=[o("java-jwt")])),_:1}),e[5]||(e[5]=t("br",null,null,-1)),n(a,null,{default:r(()=>e[2]||(e[2]=[o("2.2.0")])),_:1}),e[6]||(e[6]=t("br",null,null,-1))]),_:1}),e[11]||(e[11]=t("br",null,null,-1)),e[12]||(e[12]=o(" JWT 工具类")),e[13]||(e[13]=t("br",null,null,-1)),e[14]||(e[14]=o(" import com.auth0.jwt.JWTSigner;")),e[15]||(e[15]=t("br",null,null,-1)),e[16]||(e[16]=o(" import com.auth0.jwt.JWTVerifier;")),e[17]||(e[17]=t("br",null,null,-1)),e[18]||(e[18]=o(" import com.auth0.jwt.internal.com.fasterxml.jackson.databind.ObjectMapper;"))]),e[21]||(e[21]=i(`<pre><code>import java.util.HashMap;
import java.util.Map;

public class JWT {

    private static final String SECRET = &quot;XX#$%()(#*!()!KL&lt;&gt;&lt;MQLMNQNQJQK sdfkjsdrow32234545fdf&gt;?N&lt;:{LWPW&quot;;

    private static final String EXP = &quot;exp&quot;;

    private static final String PAYLOAD = &quot;payload&quot;;

    public static &lt;T&gt; String sign(T object, long maxAge) {
        try {
            final JWTSigner signer = new JWTSigner(SECRET);
            final \`Map&lt;String, Object&gt;\` claims = new \`HashMap&lt;String, Object&gt;\`();
            ObjectMapper mapper = new ObjectMapper();
            String jsonString = mapper.writeValueAsString(object);
            claims.put(PAYLOAD, jsonString);
            claims.put(EXP, System.currentTimeMillis() + maxAge);
            return signer.sign(claims);
        } catch(Exception e) {
            return null;
        }
    }

    public \`static&lt;T&gt;\` T unsign(String jwt, \`Class&lt;T&gt;\` classT) {
        final JWTVerifier verifier = new JWTVerifier(SECRET);
        try {
            final \`Map&lt;String,Object&gt;\` claims= verifier.verify(jwt);
            if (claims.containsKey(EXP) &amp;&amp; claims.containsKey(PAYLOAD)) {
                long exp = (Long)claims.get(EXP);
                long currentTimeMillis = System.currentTimeMillis();
                if (exp &gt; currentTimeMillis) {
                    String json = (String)claims.get(PAYLOAD);
                    ObjectMapper objectMapper = new ObjectMapper();
                    return objectMapper.readValue(json, classT);
                }
            }
            return null;
        } catch (Exception e) {
            return null;
        }
    }
}
</code></pre><p>用户单点登录<br> //token 三十分钟失效<br> private static final long TOKEN_MAX_AGE = 30L * 60L * 1000L;<br> @PostMapping(value = &quot;/login&quot;)<br> public BaseResponse&lt;<code>Map&lt;String, Object&gt;</code>&gt; login(User user, HttpServletResponse response) {<br> BaseResponse&lt;<code>Map&lt;String, Object&gt;</code>&gt; baseResponse = new BaseResponse&lt;&gt;();<br><code>Map&lt;String, Object&gt;</code> map = Maps.newHashMap();<br> //校验用户身份<br><code>List&lt;User&gt;</code> userList = userDao.findByName(user.getName());<br> if (userList.isEmpty()) {<br> baseResponse.setError(&quot; 用户名不存在!&quot;);<br> } else<br> User info = userList.get(0);<br> if (info.getPwd().equals(user.getPwd())) {<br> // info.setPwd(&quot;&quot;);//生产环境可以移除密码<br> //生成 token 30 分钟失效<br> String token = JWT.sign(info, TOKEN_MAX_AGE);<br> map.put(&quot;user&quot;, info);<br> map.put(&quot;token&quot;, token);<br> baseResponse.setSuccess(map);<br> //token 存入 redis，30 后过期返回 null（后面我们会写拦截器进行校验 redis 中的 token 是否失效） <code>ValueOperations&lt;String, String&gt;</code> ops = stringRedisTemplate.opsForValue();<br> //使用 jjwt 生成 Token，保存在 Redis 中，以 UUID 作为 Key<br> ops.set(info.getUuid(), token, 30, TimeUnit.MINUTES);</p><pre><code>                //token存入Cookie
                Cookie cookie = new Cookie(&quot;token&quot;, token);
                // 设置为30min
                cookie.setMaxAge(30 * 60);
                cookie.setPath(&quot;/&quot;);
                response.addCookie(cookie);
                logger.info(&quot;token存入Cookie&amp;Redis:{}&quot;, token);
            } else {
                baseResponse.setError(&quot;密码有误!&quot;);
            }
        }

        return baseResponse;
    }
</code></pre><p>效果如下</p><p>返回的 Cookie，当登录成功后，每次请求都会带着这个 token</p><p>过滤器校验 token<br> @Override<br> public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {<br> //获取 Cookie 中的 token<br> String token = CookieUtils.getCookieValue((HttpServletRequest) servletRequest, &quot;token&quot;, true);<br> //判断 token 是否存在<br> if (!StringUtils.isBlank(token)) {<br> //获取 token 中的用户信息<br> User user = JWT.unsign(token, User.class);<br> //通过 UUID KEY 查 redis 是否存在 token（是否过期） String tokenInfo = stringRedisTemplate.opsForValue().get(user.getUuid());<br> //如果 tokenInfo 没有过期<br> if (!StringUtils.isBlank(tokenInfo)) {<br> //如果 token 一致<br> if (tokenInfo.equals(token)) {<br> //放行<br> filterChain.doFilter(servletRequest, servletResponse);<br> return;<br> }<br> }<br> }<br> //如果 token 不存在，但是请求 url 是登录，放行去登录<br> if (((HttpServletRequest) servletRequest).getServletPath().equals(&quot;/user/login&quot;)) {<br> //放行<br> filterChain.doFilter(servletRequest, servletResponse);<br> return;<br> }<br> //如果 token 不存在 1.身份过期，重新登录 2.未登录<br> RequestDispatcher dispatcher = servletRequest.getRequestDispatcher(&quot;/user/error&quot;);<br> dispatcher.forward(servletRequest, servletResponse);<br> }<br> 如果未登录访问其他接口会拦截并转发给 error 接口进行处理</p><p>退出<br> /**<br> * @author shouliang.wang<br> * @date 2018/5/8 15:01<br> * @param request 从 Cookie 中获取 token<br> * @return<br> * 用户退出<br> */<br> @GetMapping(value = &quot;/logout&quot;)<br> public <code>BaseResponse&lt;String&gt;</code> logout(HttpServletRequest request) {<br> //获取 Cookie 中的 token<br> String token = CookieUtils.getCookieValue(request, &quot;token&quot;, true);<br> if (!StringUtils.isBlank(token)) {<br> //获取 token 中用户信息<br> User user = JWT.unsign(token, User.class);<br> //通过 UUID key 删除 Redis 中的 token<br> Boolean delete = stringRedisTemplate.delete(user.getName());<br> if (delete){<br> logger.info(&quot; 用户已退出登录:{}&quot;,user.getUuid());<br> }<br> }<br><code>BaseResponse&lt;String&gt;</code> response = new BaseResponse&lt;&gt;();<br> response.setSuccess(&quot;OK&quot;);<br> return response;<br> }</p><p>参考<br> 以上资料部分参考： https://blog.csdn.net/wangcantian/article/details/74199762</p><p>https://www.v2ex.com/t/320710</p><p>https://www.cnblogs.com/zhengshiqiang47/p/7442020.html</p>`,10))])}const E=b(k,[["render",m],["__file","安全.html.vue"]]),J=JSON.parse('{"path":"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8.html","title":"安全","lang":"zh-CN","frontmatter":{"draw":null,"title":"安全","tags":[],"date created":"2024-05-17T00:00:00.000Z","date modified":"2024-11-12T00:00:00.000Z","description":"Authentication（认证）发生在Authorization（授权）之前 认证确认用户的身份，确认用户是否是他们所声称的那个人 授权决定用户可以做什么，确定用户能够访问哪些资源或执行哪些操作 前言 下面介绍用 jwt 技术如何来实现单点登录。 Token 什么是 token Token 是服务端生成的一串字符串，以作客户端进行请求的一个令牌，服...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:title","content":"安全"}],["meta",{"property":"og:description","content":"Authentication（认证）发生在Authorization（授权）之前 认证确认用户的身份，确认用户是否是他们所声称的那个人 授权决定用户可以做什么，确定用户能够访问哪些资源或执行哪些操作 前言 下面介绍用 jwt 技术如何来实现单点登录。 Token 什么是 token Token 是服务端生成的一串字符串，以作客户端进行请求的一个令牌，服..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-24T17:46:49.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-24T17:46:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"安全\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-24T17:46:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1732465042000,"updatedTime":1732470409000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":2}]},"readingTime":{"minutes":10.59,"words":3177},"filePathRelative":"2 第二大脑/1 节点/CS/软件工程/安全/安全.md","localizedDate":"2024年11月25日","autoDesc":true}');export{E as comp,J as data};
