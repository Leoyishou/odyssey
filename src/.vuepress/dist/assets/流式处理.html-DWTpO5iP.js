import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as o,o as r}from"./app-DokaGNO4.js";const e={};function s(n,l){return r(),t("div",null,l[0]||(l[0]=[o('<p>想象你正在看一条永不停息的河流（这就是数据流），你需要统计和分析河里的鱼（数据）。这就是流式计算的场景。</p><p><strong>传统计算 vs 流式计算</strong></p><ul><li>传统计算就像钓鱼：等收集够了鱼再一起处理</li><li>流式计算就像在河边实时数鱼：鱼游过来就立即处理，不用等收集完</li></ul><p><strong>举个具体例子：双十一实时销售数据统计</strong></p><ol><li>数据像流水一样不断产生：订单、支付、物流...</li><li>需要实时处理：销售额、热门商品、区域统计...</li></ol><p><strong>窗口概念（Windows）</strong> 想象你在河边放了一个捕鱼网：</p><ol><li><strong>固定窗口（Tumbling）</strong></li></ol><ul><li>每隔1小时统计一次</li><li>比如：9:00-10:00的订单总额，10:00-11:00的订单总额</li><li>特点：时间段不重叠，数据不重复计算</li></ul><ol start="2"><li><strong>滑动窗口（Sliding）</strong></li></ol><ul><li>每10分钟统计过去1小时的数据</li><li>比如：9:00-10:00，9:10-10:10，9:20-10:20...</li><li>特点：像放电影一样，平滑移动，数据会被重复计算</li></ul><ol start="3"><li><strong>会话窗口（Session）</strong></li></ol><ul><li>基于用户行为划分时间段</li><li>比如：一个用户连续操作，超过30分钟无操作就算一个会话结束</li><li>特点：根据实际活动动态调整，更符合用户行为特征</li></ul><p><strong>处理乱序和延迟</strong></p><p>想象河里的鱼有时会倒游（数据乱序）或迟到：</p><ol><li><strong>水位线（Watermark）</strong></li></ol><ul><li>就像水位标记，表示&quot;这个时间点之前的数据应该都到了&quot;</li><li>比如：现在是10:05，我们认为10:00之前的订单都已经到达了</li><li>容忍一定延迟，但不会无限等待</li></ul><ol start="2"><li><strong>迟到数据处理</strong></li></ol><ul><li>处理特别慢的鱼（迟到数据）</li><li>可以选择： <ul><li>丢弃（不管它）</li><li>更新之前的结果</li><li>单独统计</li></ul></li></ul><p><strong>实际应用场景</strong></p><ol><li>电商实时销售统计</li><li>网站实时访问监控</li><li>股票交易实时分析</li><li>IoT设备数据处理</li><li>社交媒体热点监测</li></ol><p>流式计算的核心就是：</p><ol><li>数据不停地流动</li><li>必须实时处理</li><li>要处理乱序和延迟</li><li>要权衡实时性和准确性</li></ol><p>理解了这些，你就基本掌握了流式计算的核心概念。它就像一个永不停息的流水线，需要我们不断地处理和分析数据。</p><p><strong>为什么需要流式计算？</strong></p><ol><li><strong>实时性需求</strong></li></ol><ul><li>实时推荐</li><li>实时风控</li><li>实时监控预警</li><li>实时数据大屏</li></ul><ol start="2"><li><strong>批处理的局限</strong></li></ol><ul><li>延迟高</li><li>资源利用不均衡</li><li>不适合实时业务场景</li></ul><p><strong>主流框架对比</strong>：</p><ol><li><strong>Apache Flink</strong></li></ol><ul><li>原生流处理</li><li>真正的流式计算</li><li>低延迟、高吞吐</li><li>精确一次语义</li></ul><ol start="2"><li><strong>Spark Streaming</strong></li></ol><ul><li>微批处理</li><li>构建在Spark之上</li><li>更适合准实时场景</li></ul><ol start="3"><li><strong>Apache Storm</strong></li></ol><ul><li>早期流处理系统</li><li>实时性好</li><li>吞吐量相对较低</li></ul><p><strong>应用场景</strong>：</p><ol><li><strong>互联网公司</strong></li></ol><ul><li>用户行为分析</li><li>实时推荐</li><li>广告投放</li></ul><ol start="2"><li><strong>金融行业</strong></li></ol><ul><li>实时风控</li><li>交易监控</li><li>欺诈检测</li></ul><ol start="3"><li><strong>物联网</strong></li></ol><ul><li>传感器数据处理</li><li>实时监控</li><li>预测性维护</li></ul><ol start="4"><li><strong>游戏行业</strong></li></ol><ul><li>玩家行为分析</li><li>实时匹配</li><li>作弊检测</li></ul><p>总的来说，[[流式处理]]是大数据生态中的一个重要组成部分，主要解决实时数据处理的需求。它与传统的批处理相比，更注重数据的实时性和持续处理能力。在现代应用中，流式计算正变得越来越重要，因为很多业务场景都需要实时的数据洞察和决策支持。</p>',45)]))}const g=i(e,[["render",s],["__file","流式处理.html.vue"]]),u=JSON.parse('{"path":"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E6%B5%81%E5%BC%8F%E5%A4%84%E7%90%86.html","title":"","lang":"zh-CN","frontmatter":{"description":"想象你正在看一条永不停息的河流（这就是数据流），你需要统计和分析河里的鱼（数据）。这就是流式计算的场景。 传统计算 vs 流式计算 传统计算就像钓鱼：等收集够了鱼再一起处理 流式计算就像在河边实时数鱼：鱼游过来就立即处理，不用等收集完 举个具体例子：双十一实时销售数据统计 数据像流水一样不断产生：订单、支付、物流... 需要实时处理：销售额、热门商品、...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E6%B5%81%E5%BC%8F%E5%A4%84%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:description","content":"想象你正在看一条永不停息的河流（这就是数据流），你需要统计和分析河里的鱼（数据）。这就是流式计算的场景。 传统计算 vs 流式计算 传统计算就像钓鱼：等收集够了鱼再一起处理 流式计算就像在河边实时数鱼：鱼游过来就立即处理，不用等收集完 举个具体例子：双十一实时销售数据统计 数据像流水一样不断产生：订单、支付、物流... 需要实时处理：销售额、热门商品、..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-24T16:17:22.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-24T16:17:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-24T16:17:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1732465042000,"updatedTime":1732465042000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":1}]},"readingTime":{"minutes":3.11,"words":932},"filePathRelative":"2 第二大脑/1 节点/CS/大数据/流式处理.md","localizedDate":"2024年11月25日","autoDesc":true}');export{g as comp,u as data};
