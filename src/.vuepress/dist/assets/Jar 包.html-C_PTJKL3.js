import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,f as o,o as a}from"./app-DokaGNO4.js";const t={};function r(c,i){return a(),e("div",null,i[0]||(i[0]=[o('<ol><li>一个项目内，不想代码重复的时候，靠 import 复用</li><li>多个项目间，不想代码重复的时候，只能靠 Jar 包了，另外也可以保护 Jar 包中的代码，不被别人随意修改。</li></ol><p>Spring Boot 在打包部署的时候打包成 jar 和 war 有什么不同? - 皮蛋 XXXXL 的回答 - 知乎<br> https://www.zhihu.com/question/283746123/answer/2046064283</p><h2 id="为啥这个项目只有src-test-resources-logback-xml下面有-logback-的配置-main下面没有" tabindex="-1"><a class="header-anchor" href="#为啥这个项目只有src-test-resources-logback-xml下面有-logback-的配置-main下面没有"><span>为啥这个项目只有src/test/resources/logback.xml下面有 logback 的配置，main下面没有？</span></a></h2><figure><img src="https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F09%2F14%2F15-23-14-f890f86fe674ef7f2cd9313df34123f7-202409141523572-4647bf.png" alt="image.png|1000" tabindex="0" loading="lazy"><figcaption>image.png|1000</figcaption></figure><p>明白了，这是一个被其他项目引用的 jar 包。这种情况下，只在 <code>src/test/resources</code> 下有 <code>logback.xml</code> 是很常见且合理的做法。让我解释一下原因：</p><ol><li><p>测试独立性：</p><ul><li><code>src/test/resources</code> 下的 <code>logback.xml</code> 只用于这个 jar 包自身的单元测试和集成测试。</li><li>这确保了在运行测试时可以有特定的日志配置，而不会影响到使用这个 jar 包的其他项目。</li></ul></li><li><p>避免配置冲突：</p><ul><li>如果在 <code>src/main/resources</code> 中也包含 <code>logback.xml</code>，它会被打包到最终的 jar 中。</li><li>这可能会导致使用这个 jar 包的项目在类路径上有多个 <code>logback.xml</code>，造成配置冲突。</li></ul></li><li><p>灵活性：</p><ul><li>不在主资源中包含日志配置，允许使用这个 jar 包的项目自由配置自己的日志策略，而不被这个库的配置所限制或影响。</li></ul></li><li><p>关注点分离：</p><ul><li>作为一个库或组件，它应该专注于提供功能，而将日志配置的决定权留给使用它的应用程序。</li></ul></li><li><p>测试专用配置：</p><ul><li>测试时可能需要更详细的日志输出，<code>src/test/resources</code> 下的配置允许在不影响实际使用时进行更详细的日志记录。</li></ul></li><li><p>最小依赖原则：</p><ul><li>不包含主日志配置有助于减少这个 jar 包对特定日志实现的依赖，使其更加通用。</li></ul></li></ol><p>建议：</p><ul><li>确保这个 jar 包中的代码使用 SLF4J 或其他日志门面接口进行日志记录，而不是直接依赖于特定的日志实现。</li><li>在这个 jar 包的文档中，清楚地说明它使用的日志框架和任何相关的配置建议，以便使用者正确配置日志。</li><li>如果这个 jar 包需要在某些情况下输出特定的日志信息，考虑提供编程方式的日志配置选项，而不是依赖于配置文件。</li></ul><p>总的来说，这种设置是很好的实践，它保持了库的灵活性和可用性，同时仍然为其自身的测试提供了必要的日志配置。</p><h2 id="构建一个-jar-包时-需要注意以下几个关键方面" tabindex="-1"><a class="header-anchor" href="#构建一个-jar-包时-需要注意以下几个关键方面"><span>构建一个 JAR 包时，需要注意以下几个关键方面</span></a></h2><ol><li><p>依赖管理：</p><ul><li>使用依赖管理工具（如Maven或Gradle）来管理外部库依赖。</li><li>仔细考虑哪些依赖应该被标记为 &quot;provided&quot; 或 &quot;compile&quot;，避免不必要的传递依赖。</li><li>使用依赖范围（scope）来区分编译时、运行时和测试时依赖。</li></ul></li><li><p>版本控制：</p><ul><li>为JAR包使用语义化版本号（Semantic Versioning）。</li><li>在 <code>pom.xml</code> 或 <code>build.gradle</code> 中明确指定版本号。</li></ul></li><li><p>打包配置：</p><ul><li>确保 <code>logback.xml</code>0 文件包含正确的信息（如版本、构建日期等）。</li><li>如果JAR是可执行的，指定正确的 Main-Class。</li><li>考虑是否需要打包源代码（source JAR）和JavaDoc。</li></ul></li><li><p>资源文件：</p><ul><li>确保必要的配置文件、属性文件等被正确包含在JAR中。</li><li>避免包含敏感信息或环境特定的配置。</li></ul></li><li><p>测试：</p><ul><li>包含单元测试和集成测试，确保在不同环境下JAR包可以正常工作。</li><li>考虑使用测试覆盖率工具来评估测试的完整性。</li></ul></li><li><p>文档：</p><ul><li>生成和包含JavaDoc。</li><li>提供清晰的README文件，说明JAR包的用途、如何使用、配置选项等。</li></ul></li><li><p>许可证：</p><ul><li>清楚地指明JAR包的许可证信息。</li><li>确保遵守所有使用的第三方库的许可条款。</li></ul></li><li><p>兼容性：</p><ul><li>明确支持的Java版本范围。</li><li>考虑向后兼容性，避免不必要的破坏性变更。</li></ul></li><li><p>安全性：</p><ul><li>避免在JAR中包含敏感信息或硬编码的凭证。</li><li>考虑使用安全扫描工具检查潜在的漏洞。</li></ul></li><li><p>日志处理：</p><ul><li>使用日志门面（如SLF4J）而不是具体实现，增加灵活性。</li><li>不要在JAR中包含具体的日志配置文件。</li></ul></li><li><p>模块化：</p><ul><li>如果针对Java 9+，考虑是否需要使用Java模块系统（JPMS）。</li></ul></li></ol>',11)]))}const n=l(t,[["render",r],["__file","Jar 包.html.vue"]]),m=JSON.parse('{"path":"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/Jar%20%E5%8C%85.html","title":"Jar 包","lang":"zh-CN","frontmatter":{"draw":null,"tags":[],"title":"Jar 包","date created":"2024-07-02T00:00:00.000Z","date modified":"2024-11-12T00:00:00.000Z","description":"一个项目内，不想代码重复的时候，靠 import 复用 多个项目间，不想代码重复的时候，只能靠 Jar 包了，另外也可以保护 Jar 包中的代码，不被别人随意修改。 Spring Boot 在打包部署的时候打包成 jar 和 war 有什么不同? - 皮蛋 XXXXL 的回答 - 知乎 https://www.zhihu.com/question/28...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/Jar%20%E5%8C%85.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:title","content":"Jar 包"}],["meta",{"property":"og:description","content":"一个项目内，不想代码重复的时候，靠 import 复用 多个项目间，不想代码重复的时候，只能靠 Jar 包了，另外也可以保护 Jar 包中的代码，不被别人随意修改。 Spring Boot 在打包部署的时候打包成 jar 和 war 有什么不同? - 皮蛋 XXXXL 的回答 - 知乎 https://www.zhihu.com/question/28..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F09%2F14%2F15-23-14-f890f86fe674ef7f2cd9313df34123f7-202409141523572-4647bf.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-24T17:46:49.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-24T17:46:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Jar 包\\",\\"image\\":[\\"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F09%2F14%2F15-23-14-f890f86fe674ef7f2cd9313df34123f7-202409141523572-4647bf.png\\"],\\"dateModified\\":\\"2024-11-24T17:46:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"为啥这个项目只有src/test/resources/logback.xml下面有 logback 的配置，main下面没有？","slug":"为啥这个项目只有src-test-resources-logback-xml下面有-logback-的配置-main下面没有","link":"#为啥这个项目只有src-test-resources-logback-xml下面有-logback-的配置-main下面没有","children":[]},{"level":2,"title":"构建一个 JAR 包时，需要注意以下几个关键方面","slug":"构建一个-jar-包时-需要注意以下几个关键方面","link":"#构建一个-jar-包时-需要注意以下几个关键方面","children":[]}],"git":{"createdTime":1732465042000,"updatedTime":1732470409000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":2}]},"readingTime":{"minutes":3.87,"words":1162},"filePathRelative":"2 第二大脑/1 节点/CS/编程语言/Java/Jar 包.md","localizedDate":"2024年11月25日","autoDesc":true}');export{n as comp,m as data};
