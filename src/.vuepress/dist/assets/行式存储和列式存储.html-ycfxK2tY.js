import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as r,g as n,f as s,o as i}from"./app-DokaGNO4.js";const l={};function a(p,t){return i(),o("div",null,[t[0]||(t[0]=r("p",null,"excerpt",-1)),n(" more "),t[1]||(t[1]=s("<p>列式存储（Columnar Storage）和行式存储（Row Storage）是两种不同的数据存储方式。列式存储通常在某些场景下比行式存储更高效，特别是在数据分析和查询操作中。以下是列式存储通常比行式存储更高效的原因：</p><p><strong>1. 数据压缩效率</strong></p><ul><li><strong>列式存储</strong>：由于同一列的数据类型相同，并且经常具有相似的值（如重复或范围较小的数值），列式存储的数据压缩效率通常较高。可以使用更高级的压缩算法，如 RLE（Run Length Encoding）、字典编码等。</li><li><strong>行式存储</strong>：行式存储每一行的数据类型可能不同，数据的相似性较低，压缩效率较差。</li></ul><p><strong>2. 查询性能</strong></p><ul><li><strong>列式存储</strong>：在进行聚合查询和分析查询时，通常只需要访问所需的列。例如，计算某列的平均值或求和时，只需读取该列的数据，大大减少了 I/O 操作。</li><li><strong>行式存储</strong>：查询时需要读取整个行的数据，即使只需要其中的几列，这会增加不必要的 I/O 开销。</li></ul><p><strong>3. 内存使用效率</strong></p><ul><li><strong>列式存储</strong>：因为只读取所需的列，内存使用更高效。可以加载更多的列数据到内存中，从而提高查询性能。</li><li><strong>行式存储</strong>：由于需要读取和处理整个行的数据，内存使用效率较低，尤其在只需要部分列的查询中。</li></ul><p><strong>4. 矢量化处理</strong></p><ul><li><strong>列式存储</strong>：列式存储适合矢量化处理，CPU 可以更有效地对列数据进行批量处理，利用现代 CPU 的指令集进行并行计算，提高处理速度。</li><li><strong>行式存储</strong>：行式存储在矢量化处理方面不如列式存储高效，因为每次处理时都要解码整行数据。</li></ul><p><strong>5. 缓存命中率</strong></p><ul><li><strong>列式存储</strong>：由于连续的同一列的数据存储在一起，可以更好地利用 CPU 缓存，提高缓存命中率，减少内存访问次数。</li><li><strong>行式存储</strong>：数据存储在一行中，不同列的数据存储位置不连续，缓存命中率较低。</li></ul><p><strong>适用场景</strong></p><ul><li><strong>列式存储</strong>：适用于数据分析、OLAP（Online Analytical Processing）系统、大规模数据仓库、需要频繁读取和聚合操作的场景。</li><li><strong>行式存储</strong>：适用于 OLTP（Online Transaction Processing）系统、事务处理系统、需要频繁插入、更新和删除操作的场景。</li></ul><p><strong>总结</strong></p><p>列式存储通过提高数据压缩效率、减少 I/O 操作、优化内存使用、支持矢量化处理以及提高缓存命中率，在大规模数据分析和查询操作中比行式存储更加高效。</p>",15))])}const m=e(l,[["render",a],["__file","行式存储和列式存储.html.vue"]]),c=JSON.parse('{"path":"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE/%E8%A1%8C%E5%BC%8F%E5%AD%98%E5%82%A8%E5%92%8C%E5%88%97%E5%BC%8F%E5%AD%98%E5%82%A8.html","title":"行式存储和列式存储","lang":"zh-CN","frontmatter":{"draw":null,"title":"行式存储和列式存储","tags":[],"date created":"2024-06-05T00:00:00.000Z","date modified":"2024-11-12T00:00:00.000Z","description":"excerpt 列式存储（Columnar Storage）和行式存储（Row Storage）是两种不同的数据存储方式。列式存储通常在某些场景下比行式存储更高效，特别是在数据分析和查询操作中。以下是列式存储通常比行式存储更高效的原因： 1. 数据压缩效率 列式存储：由于同一列的数据类型相同，并且经常具有相似的值（如重复或范围较小的数值），列式存储的数...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE/%E8%A1%8C%E5%BC%8F%E5%AD%98%E5%82%A8%E5%92%8C%E5%88%97%E5%BC%8F%E5%AD%98%E5%82%A8.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:title","content":"行式存储和列式存储"}],["meta",{"property":"og:description","content":"excerpt 列式存储（Columnar Storage）和行式存储（Row Storage）是两种不同的数据存储方式。列式存储通常在某些场景下比行式存储更高效，特别是在数据分析和查询操作中。以下是列式存储通常比行式存储更高效的原因： 1. 数据压缩效率 列式存储：由于同一列的数据类型相同，并且经常具有相似的值（如重复或范围较小的数值），列式存储的数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-24T16:17:22.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-24T16:17:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"行式存储和列式存储\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-24T16:17:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1732465042000,"updatedTime":1732465042000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":1}]},"readingTime":{"minutes":2.44,"words":733},"filePathRelative":"2 第二大脑/1 节点/CS/软件工程/数据库/数据/行式存储和列式存储.md","localizedDate":"2024年11月25日","autoDesc":true}');export{m as comp,c as data};
