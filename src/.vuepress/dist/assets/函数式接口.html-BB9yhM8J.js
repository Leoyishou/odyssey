import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a as d,b as e,d as n,e as i,f as l,r as p,o as c}from"./app-DokaGNO4.js";const m={};function E(s,t){const o=p("RouteLink");return c(),r("div",null,[t[3]||(t[3]=d("p",null,"这些接口定义了单个抽象方法，用于实现 lambda 表达式和方法引用，从而支持函数式编程风格。",-1)),d("p",null,[t[1]||(t[1]=e("函数式编程的本质是，把函数也当做一个变量，让函数也做 ")),n(o,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E4%B8%80%E7%AD%89%E5%85%AC%E6%B0%91.html"},{default:i(()=>t[0]||(t[0]=[e("一等公民")])),_:1}),t[2]||(t[2]=e("。"))]),t[4]||(t[4]=l("<p>进一出一：Function 接口代表一个接受单个参数并返回结果的函数。它的抽象方法为 apply。 进二出一：BiFunction 接口代表一个接受两个参数并返回结果的函数。它的抽象方法也是 apply。</p><table><thead><tr><th>参数 - 返回值</th><th>接口</th><th>描述</th></tr></thead><tbody><tr><td>0-0</td><td>Runnable</td><td>没有参数，也没有返回值</td></tr><tr><td>0-1</td><td><code>Callable&lt;V&gt;</code></td><td>没有参数，有一个返回值</td></tr><tr><td>1-1</td><td><code>Function&lt;T, R&gt;</code></td><td>接受一个参数，返回一个值</td></tr><tr><td>2-1</td><td><code>BiFunction&lt;T, U, R&gt;</code></td><td>接受两个参数，返回一个值</td></tr><tr><td>0-1</td><td><code>Supplier&lt;T&gt;</code></td><td>没有参数，返回一个值</td></tr><tr><td>1-0</td><td><code>Consumer&lt;T&gt;</code></td><td>接受一个参数，没有返回值</td></tr><tr><td>1-1</td><td><code>Predicate&lt;T&gt;</code></td><td>接受一个参数，返回一个布尔值</td></tr></tbody></table>",2))])}const B=a(m,[["render",E],["__file","函数式接口.html.vue"]]),C=JSON.parse('{"path":"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3.html","title":"函数式接口","lang":"zh-CN","frontmatter":{"draw":null,"aliases":["functional interface"],"tags":[],"title":"函数式接口","date created":"2024-07-03T00:00:00.000Z","date modified":"2024-11-12T00:00:00.000Z","description":"这些接口定义了单个抽象方法，用于实现 lambda 表达式和方法引用，从而支持函数式编程风格。 函数式编程的本质是，把函数也当做一个变量，让函数也做 。 进一出一：Function 接口代表一个接受单个参数并返回结果的函数。它的抽象方法为 apply。 进二出一：BiFunction 接口代表一个接受两个参数并返回结果的函数。它的抽象方法也是 apply。","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:title","content":"函数式接口"}],["meta",{"property":"og:description","content":"这些接口定义了单个抽象方法，用于实现 lambda 表达式和方法引用，从而支持函数式编程风格。 函数式编程的本质是，把函数也当做一个变量，让函数也做 。 进一出一：Function 接口代表一个接受单个参数并返回结果的函数。它的抽象方法为 apply。 进二出一：BiFunction 接口代表一个接受两个参数并返回结果的函数。它的抽象方法也是 apply。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-24T17:46:49.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-24T17:46:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"函数式接口\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-24T17:46:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1732465042000,"updatedTime":1732470409000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":2}]},"readingTime":{"minutes":0.91,"words":272},"filePathRelative":"2 第二大脑/1 节点/CS/编程语言/Java/函数式接口.md","localizedDate":"2024年11月25日","autoDesc":true}');export{B as comp,C as data};
