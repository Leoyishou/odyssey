import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,f as s,o}from"./app-DokaGNO4.js";const n={};function a(r,e){return o(),i("div",null,e[0]||(e[0]=[s('<h2 id="spring-boot-applications-are-typically-tested-at-three-main-levels" tabindex="-1"><a class="header-anchor" href="#spring-boot-applications-are-typically-tested-at-three-main-levels"><span>Spring Boot applications are typically tested at three main levels</span></a></h2><ol><li>Unit Testing: This level involves testing individual components or classes in isolation. You can use frameworks like JUnit or TestNG for unit tests.</li><li>Integration Testing: Integration tests verify the interactions between different parts of your application, such as testing how various components work together. Spring provides tools like <code>@SpringBootTest</code> for integration testing.</li><li>End-to-End (E2E) Testing: E2E tests validate the entire application, simulating real user scenarios. Tools like Selenium and Cucumber are often used for E2E testing.</li></ol><h2 id="strategies-for-effective-testing" tabindex="-1"><a class="header-anchor" href="#strategies-for-effective-testing"><span>Strategies for Effective Testing</span></a></h2><ol><li><strong>Test-Driven Development (TDD):</strong> Consider adopting TDD, where you write tests before implementing the corresponding code. This approach helps define clear requirements and encourages modular code design.</li><li><strong>Use Mocking:</strong> In unit and integration tests, use mocking frameworks like Mockito to simulate dependencies and interactions with external systems.</li><li><strong>Test Data Management:</strong> Use libraries like Testcontainers or tools like Spring Test DBUnit to manage test data and databases for integration tests.</li><li><strong>Parameterized Tests:</strong> Leverage parameterized tests to run the same test with different inputs, ensuring comprehensive coverage.</li><li><strong>Continuous Integration (CI):</strong> Integrate testing into your CI/CD pipeline, running tests automatically on code changes to catch issues early.</li><li><strong>Code Coverage Analysis:</strong> Employ code coverage tools like JaCoCo to measure the percentage of code covered by tests and identify untested areas.</li></ol><h2 id="best-practices" tabindex="-1"><a class="header-anchor" href="#best-practices"><span>Best Practices</span></a></h2><ol><li><strong>Keep Tests Isolated:</strong> Tests should not rely on the state of other tests. Each test should be independent and self-contained.</li><li><strong>Naming Conventions:</strong> Follow a consistent naming convention for test methods to improve readability and understanding.</li><li><strong>Documentation:</strong> Write descriptive test case names and add comments where necessary to clarify test intentions.</li><li><strong>Maintainable Tests:</strong> Avoid duplicating test code. Create utility methods and helper classes to keep tests maintainable.</li><li><strong>Regular Updates:</strong> As your <a href="https://www.sayonetech.com/services/webapp-development-company-usa/" target="_blank" rel="noopener noreferrer">application</a> evolves, update and maintain your tests to ensure they remain relevant and accurate.</li></ol><h2 id="tools-for-testing" tabindex="-1"><a class="header-anchor" href="#tools-for-testing"><span>Tools for Testing</span></a></h2><ol><li><strong>JUnit:</strong> The de facto standard for writing unit tests in Java.</li><li><strong>Spring Boot Test:</strong> Spring Boot provides a suite of test annotations and utilities to simplify testing.</li><li><strong>Mockito:</strong> A popular mocking framework for simulating dependencies in tests.</li><li><strong>Testcontainers:</strong> A library for managing Docker containers in tests, useful for integration testing.</li><li><strong>Selenium:</strong> An E2E testing framework for web applications.</li><li><strong>Cucumber:</strong> A tool for behavior-driven development (BDD) that helps create readable, executable specifications.</li></ol><p>我已为老师想好下一个专栏的名称《TDD 项目实战》，很多人一提到 TDD 第一感觉就是听过、没见过。耗子叔早年写过《TDD 并不是看上去的那么美》https://coolshell.cn/articles/3649.html，我对 TDD 还是很感兴趣的，一直自己摸索感觉还是不得其法。老师在极客时间的其实为 TDD 做了不少铺垫，是时候综合运用一下来一个中型的实践项目，把 ThoughtWorks 的 TDD 实战经验在实际项目中展示一下。</p><p>以下是我自我摸索出的想要玩转 TDD 需要的能力/技能：</p><ol><li>需求分解《10X 程序员工作法》-- 解决测试用例从哪里来的问题？</li><li>设计能力《软件设计之美》-- 设计/抽象/建模让产品代码更具可测试性，同时完成第一创造</li><li>测试能力《程序员的测试课》--- 扬长避短，写出好的测试代码，别让测试成为负资产</li><li>编程能力 --- 熟练掌握所用语言的核心语法、常用标准库、第三方库等（含数据结构与算法），能写出符合该语言规范的代码，判断标准：在 TDD 循环中尽量不卡壳、少用 Google 减少打断循环的次数。</li><li>转换能力 -- TDD 循环是在两个思维层次来回跳转，写测试时抽象需求 What，写代码时具体细节 How</li><li>重构能力《代码之丑》-- 识别坏味道，运用恰当重构手法提高代码质量</li><li>工具能力 -- 熟练操作 Git、IDE、及其他自动化工具，使其能跟上 TDD 的节奏<br> （比如，编写测试时，产品代码还没实现但写出其接口后可以利用 IDE 快捷键自动生成产品代码的框架。重构时，运用 IDE 提供的重构快捷键，快速修改名称、抽取方法、内联函数等。完成几次 TDD 循环后可以用 Git 提交，设置 &quot; 游戏存档 &quot; 随时重新开始，如果一切顺利合并多个提交为一个然后提交）</li></ol><p>最后就是各种场景实战，小型场景练习并熟练上述技能，中型场景强化上述技能的同时，培养在工期压力下完成任务的能力，大型场景就是在实际工作中实践。</p><p>我没把 TDD 当银弹，希望能达到 &quot; 对于同一个业务功能，大多数人用 X 天完成产品代码然后提测，我同样用 X 天完成产品代码和测试代码然后提测 &quot; 的标准就可以了。希望这种工作方式能给我带来更多自信（对代码也对自己）。谢谢！</p>',13)]))}const p=t(n,[["render",a],["__file","TDD.html.vue"]]),g=JSON.parse('{"path":"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E6%B5%8B%E8%AF%95/TDD.html","title":"TDD","lang":"zh-CN","frontmatter":{"draw":null,"tags":[],"title":"TDD","date created":"2024-01-18T00:00:00.000Z","date modified":"2024-11-12T00:00:00.000Z","description":"Spring Boot applications are typically tested at three main levels Unit Testing: This level involves testing individual components or classes in isolation. You can use framework...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E6%B5%8B%E8%AF%95/TDD.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:title","content":"TDD"}],["meta",{"property":"og:description","content":"Spring Boot applications are typically tested at three main levels Unit Testing: This level involves testing individual components or classes in isolation. You can use framework..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-24T16:17:22.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-24T16:17:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"TDD\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-24T16:17:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"Spring Boot applications are typically tested at three main levels","slug":"spring-boot-applications-are-typically-tested-at-three-main-levels","link":"#spring-boot-applications-are-typically-tested-at-three-main-levels","children":[]},{"level":2,"title":"Strategies for Effective Testing","slug":"strategies-for-effective-testing","link":"#strategies-for-effective-testing","children":[]},{"level":2,"title":"Best Practices","slug":"best-practices","link":"#best-practices","children":[]},{"level":2,"title":"Tools for Testing","slug":"tools-for-testing","link":"#tools-for-testing","children":[]}],"git":{"createdTime":1732465042000,"updatedTime":1732465042000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":1}]},"readingTime":{"minutes":3.72,"words":1116},"filePathRelative":"2 第二大脑/1 节点/CS/软件工程/测试/TDD.md","localizedDate":"2024年11月25日","autoDesc":true}');export{p as comp,g as data};
