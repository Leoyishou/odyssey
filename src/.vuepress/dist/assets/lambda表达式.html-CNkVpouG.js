import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,f as o,o as r}from"./app-DokaGNO4.js";const l={};function i(n,e){return r(),a("div",null,e[0]||(e[0]=[o('<h2 id="本质" tabindex="-1"><a class="header-anchor" href="#本质"><span>本质</span></a></h2><p>匿名内部类的简写方式</p><h2 id="对象创建和垃圾回收" tabindex="-1"><a class="header-anchor" href="#对象创建和垃圾回收"><span>对象创建和垃圾回收</span></a></h2><p>每个 Lambda 表达式都会创建一个实现函数接口的对象。频繁使用 Lambda 表达式可能导致大量对象的创建和销毁，从而增加垃圾回收的压力。这在高性能场景下可能成为一个性能瓶颈，因此在性能敏感的代码中应谨慎使用。</p><blockquote><p>[!最佳实践]</p></blockquote><ul><li><strong>避免不必要的闭包使用</strong>：尽量减少捕获外部变量的数量。</li><li><strong>使用并行流</strong>：在处理集合时，可以使用并行流来提高性能。</li><li><strong>减少对象创建</strong>：在性能敏感的代码路径中，考虑使用传统的循环或方法调用来替代 Lambda 表达式</li></ul>',6)]))}const p=t(l,[["render",i],["__file","lambda表达式.html.vue"]]),s=JSON.parse('{"path":"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F.html","title":"lambda表达式","lang":"zh-CN","frontmatter":{"draw":null,"tags":[],"title":"lambda表达式","date created":"2024-08-15T00:00:00.000Z","date modified":"2024-11-12T00:00:00.000Z","description":"本质 匿名内部类的简写方式 对象创建和垃圾回收 每个 Lambda 表达式都会创建一个实现函数接口的对象。频繁使用 Lambda 表达式可能导致大量对象的创建和销毁，从而增加垃圾回收的压力。这在高性能场景下可能成为一个性能瓶颈，因此在性能敏感的代码中应谨慎使用。 [!最佳实践] 避免不必要的闭包使用：尽量减少捕获外部变量的数量。 使用并行流：在处理集合...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:title","content":"lambda表达式"}],["meta",{"property":"og:description","content":"本质 匿名内部类的简写方式 对象创建和垃圾回收 每个 Lambda 表达式都会创建一个实现函数接口的对象。频繁使用 Lambda 表达式可能导致大量对象的创建和销毁，从而增加垃圾回收的压力。这在高性能场景下可能成为一个性能瓶颈，因此在性能敏感的代码中应谨慎使用。 [!最佳实践] 避免不必要的闭包使用：尽量减少捕获外部变量的数量。 使用并行流：在处理集合..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-24T16:17:22.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-24T16:17:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"lambda表达式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-24T16:17:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"本质","slug":"本质","link":"#本质","children":[]},{"level":2,"title":"对象创建和垃圾回收","slug":"对象创建和垃圾回收","link":"#对象创建和垃圾回收","children":[]}],"git":{"createdTime":1732465042000,"updatedTime":1732465042000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":1}]},"readingTime":{"minutes":0.71,"words":214},"filePathRelative":"2 第二大脑/1 节点/CS/编程语言/Java/lambda表达式.md","localizedDate":"2024年11月25日","autoDesc":true}');export{p as comp,s as data};
