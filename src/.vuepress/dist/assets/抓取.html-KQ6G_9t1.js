import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as l,o as p}from"./app-DokaGNO4.js";const i={};function r(d,e){return p(),t("div",null,e[0]||(e[0]=[l('<p>在实际开发或学习场景中，如果想要下载（抓取）网页中的视频，一般会经历以下几个步骤。<strong>请务必先确认自己对视频有下载、存储或使用的合法权限</strong>，再进行以下操作。</p><hr><h2 id="_1-分析网页请求-找到视频真实地址" tabindex="-1"><a class="header-anchor" href="#_1-分析网页请求-找到视频真实地址"><span>1. 分析网页请求，找到视频真实地址</span></a></h2><ol><li><p><strong>打开开发者工具</strong><br> 在浏览器（Chrome、Edge 等）中，按 <code>F12</code> 或者右键 → “检查”，打开开发者工具，切换到 <strong>Network（网络）</strong> 面板。</p></li><li><p><strong>开始播放视频，观察 Network 面板请求</strong></p><ul><li>让视频正常播放或刷新页面，以便加载播放所需的网络请求。</li><li>通常会看到一些请求后缀为 <code>.mp4</code> 或者 <code>.m3u8</code>，有些情况下会看到多段 <code>.ts</code> 文件（HLS 切片），也可能有加密流等等。</li><li>如果比较幸运，能直接看到一个 <code>.mp4</code> 链接，并且这个链接在地址栏中可以直接访问，那么就是视频的原始地址。</li></ul></li><li><p><strong>右键复制请求</strong></p><ul><li>如果找到了符合视频文件格式（mp4/m3u8/ts 等）的请求，通常可以右键点击该请求，在弹出菜单中选择“Copy as cURL”或者“Copy link address”（不同浏览器的提示略有差异）。</li><li>复制得到的链接或 cURL 命令可以用来后续下载。</li></ul></li></ol><blockquote><p><strong>小提示</strong>：</p><ul><li>如果用的是 HLS（.m3u8）切片视频，那就需要先找到 <code>.m3u8</code> 的主文件链接，然后配合工具（如 ffmpeg、<code>youtube-dl</code> / <code>yt-dlp</code> 等）来整合下载。</li><li>如果整个流程被网站加了特殊的加密或授权机制，可能就需要进一步分析加密方式。通常课程类网站为了版权保护，会对视频做加密，下载难度会加大。</li></ul></blockquote><hr><h2 id="_2-选择适合的下载方式或工具" tabindex="-1"><a class="header-anchor" href="#_2-选择适合的下载方式或工具"><span>2. 选择适合的下载方式或工具</span></a></h2><h3 id="_2-1-使用-ffmpeg-下载-适合-m3u8-hls-等流式视频" tabindex="-1"><a class="header-anchor" href="#_2-1-使用-ffmpeg-下载-适合-m3u8-hls-等流式视频"><span>2.1 使用 ffmpeg 下载（适合 m3u8/HLS 等流式视频）</span></a></h3><p>如果在 Network 面板里找到了一个 <code>.m3u8</code> 文件链接，可以使用 <a href="https://ffmpeg.org/" target="_blank" rel="noopener noreferrer">ffmpeg</a> 下载：</p><p>bash</p><p>Copy code</p><p><code>ffmpeg -i &quot;https://example.com/path/to/playlist.m3u8&quot; -c copy output.mp4</code></p><ul><li><code>-i</code> 后面跟的是你在 Network 面板看到的 <code>.m3u8</code> 文件地址。</li><li><code>-c copy</code> 表示不经过重新编码，直接复制流。</li></ul><h3 id="_2-2-使用-youtube-dl-或改进版-yt-dlp" tabindex="-1"><a class="header-anchor" href="#_2-2-使用-youtube-dl-或改进版-yt-dlp"><span>2.2 使用 <code>youtube-dl</code> 或改进版 <code>yt-dlp</code></span></a></h3><p><code>youtube-dl</code> 和 <code>yt-dlp</code> 都支持从许多网站直接下载视频（包括 .mp4、.m3u8 等），用起来也相对简单。</p><p>bash</p><p>Copy code</p><p><code># 以 yt-dlp 为例 yt-dlp &quot;https://example.com/path/to/video.mp4&quot;</code></p><p>如果是 m3u8 流，也能直接写：</p><p>bash</p><p>Copy code</p><p><code>yt-dlp &quot;https://example.com/path/to/playlist.m3u8&quot;</code></p><p>它会自动解析并合并切片。</p><h3 id="_2-3-使用-python-手动抓取并合并" tabindex="-1"><a class="header-anchor" href="#_2-3-使用-python-手动抓取并合并"><span>2.3 使用 Python 手动抓取并合并</span></a></h3><p>如果你想自己用 Python 写脚本，示例思路如下：</p><ol><li><p><strong>确定视频文件 URL 或者 m3u8</strong><br> 先从 Network 面板拿到 <code>.mp4</code> 或者 <code>.m3u8</code> 地址。</p></li><li><p><strong>发送请求下载</strong></p><ul><li><p>对于直接的 <code>.mp4</code> 文件，可以使用 <code>requests</code> 库流式下载，边下载边写入到本地文件：</p><p>python</p><p>Copy code</p><p><code>import requests url = &quot;https://example.com/path/to/video.mp4&quot; filename = &quot;video.mp4&quot; with requests.get(url, stream=True) as r: r.raise_for_status() with open(filename, &#39;wb&#39;) as f: for chunk in r.iter_content(chunk_size=8192): if chunk: f.write(chunk)</code></p></li><li><p>如果是 <code>.m3u8</code>，则需要：</p><ol><li>下载 <code>.m3u8</code> 文件，解析出所有 <code>.ts</code> 分段的 URL。</li><li>一一下载每段 <code>.ts</code>，并在本地顺序合并。</li><li>如果有加密，还要处理解密步骤（需要密钥和解密算法）。</li></ol></li></ul></li><li><p><strong>合并分片（如 m3u8 的 .ts）</strong><br> 简单做法是，把所有 <code>.ts</code> 文件用二进制形式顺次拼接起来，再用 <code>ffmpeg</code> 或者 <code>mp4box</code> 等工具将其封装为 MP4 格式，或者直接使用 ffmpeg 做一步到位的拉流-合并。</p></li></ol><hr><h2 id="_3-常见问题与可能的坑" tabindex="-1"><a class="header-anchor" href="#_3-常见问题与可能的坑"><span>3. 常见问题与可能的坑</span></a></h2><ol><li><p><strong>权限与版权问题</strong></p><ul><li>课程类网站为了保护版权，经常会用到各种加密或限流，你要先确保自己有授权。</li><li>在实际生产环境中，未经授权的下载可能触碰法律风险，需要格外谨慎。</li></ul></li><li><p><strong>反爬策略和限速</strong></p><ul><li>有些平台对频繁请求会做封禁，可以考虑加一些延时或分段下载。</li><li>如果遇到加密或 token 验证，需要进一步分析请求中的 header（如 cookies、authorization token 等）。</li></ul></li><li><p><strong>m3u8 分段加密</strong></p><ul><li>可能需要先获得密钥（key），然后才能解密 <code>.ts</code> 分段。</li><li>若 key 是临时从服务器获取的，脚本需要模拟登录或保持会话状态。</li></ul></li></ol><hr><h2 id="_4-综合建议" tabindex="-1"><a class="header-anchor" href="#_4-综合建议"><span>4. 综合建议</span></a></h2><ol><li><strong>先用浏览器开发者工具定位视频真实地址</strong>（尤其是 m3u8 或 mp4）。</li><li><strong>尽量选择现成工具</strong>（ffmpeg、yt-dlp等）来下载并合并，减少踩坑。</li><li><strong>若要通过纯 Python 手写代码</strong>，则要注意处理分段下载、加密解密、合并转码等流程。</li><li><strong>留意版权与合法性</strong>，要保证自己具备下载和使用该视频的权限。</li></ol><hr><p>如果这是老师给的实际<strong>练习</strong>，大概率是为了让大家学会利用浏览器开发者工具，以及熟悉脚本编程来进行<strong>网络请求分析</strong>与<strong>自动化下载</strong>。做好这几步，就能完成大部分基础要求了。祝学习顺利!</p>',34)]))}const s=o(i,[["render",r],["__file","抓取.html.vue"]]),a=JSON.parse('{"path":"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BD%91%E7%BB%9C/%E6%8A%93%E5%8F%96.html","title":"","lang":"zh-CN","frontmatter":{"description":"在实际开发或学习场景中，如果想要下载（抓取）网页中的视频，一般会经历以下几个步骤。请务必先确认自己对视频有下载、存储或使用的合法权限，再进行以下操作。 1. 分析网页请求，找到视频真实地址 打开开发者工具 在浏览器（Chrome、Edge 等）中，按 F12 或者右键 → “检查”，打开开发者工具，切换到 Network（网络） 面板。 开始播放视频，...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BD%91%E7%BB%9C/%E6%8A%93%E5%8F%96.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:description","content":"在实际开发或学习场景中，如果想要下载（抓取）网页中的视频，一般会经历以下几个步骤。请务必先确认自己对视频有下载、存储或使用的合法权限，再进行以下操作。 1. 分析网页请求，找到视频真实地址 打开开发者工具 在浏览器（Chrome、Edge 等）中，按 F12 或者右键 → “检查”，打开开发者工具，切换到 Network（网络） 面板。 开始播放视频，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-23T03:18:33.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-23T03:18:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-23T03:18:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"1. 分析网页请求，找到视频真实地址","slug":"_1-分析网页请求-找到视频真实地址","link":"#_1-分析网页请求-找到视频真实地址","children":[]},{"level":2,"title":"2. 选择适合的下载方式或工具","slug":"_2-选择适合的下载方式或工具","link":"#_2-选择适合的下载方式或工具","children":[{"level":3,"title":"2.1 使用 ffmpeg 下载（适合 m3u8/HLS 等流式视频）","slug":"_2-1-使用-ffmpeg-下载-适合-m3u8-hls-等流式视频","link":"#_2-1-使用-ffmpeg-下载-适合-m3u8-hls-等流式视频","children":[]},{"level":3,"title":"2.2 使用 youtube-dl 或改进版 yt-dlp","slug":"_2-2-使用-youtube-dl-或改进版-yt-dlp","link":"#_2-2-使用-youtube-dl-或改进版-yt-dlp","children":[]},{"level":3,"title":"2.3 使用 Python 手动抓取并合并","slug":"_2-3-使用-python-手动抓取并合并","link":"#_2-3-使用-python-手动抓取并合并","children":[]}]},{"level":2,"title":"3. 常见问题与可能的坑","slug":"_3-常见问题与可能的坑","link":"#_3-常见问题与可能的坑","children":[]},{"level":2,"title":"4. 综合建议","slug":"_4-综合建议","link":"#_4-综合建议","children":[]}],"git":{"createdTime":1734923913000,"updatedTime":1734923913000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":1}]},"readingTime":{"minutes":4.17,"words":1252},"filePathRelative":"2 第二大脑/1 节点/CS/网络/抓取.md","localizedDate":"2024年12月23日","autoDesc":true}');export{s as comp,a as data};
