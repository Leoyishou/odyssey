import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,f as t,o as a}from"./app-DokaGNO4.js";const n={};function r(l,e){return a(),s("div",null,e[0]||(e[0]=[t(`<p>以下是一个示例，展示了如何用「省 / 市 / 县」来对应三层页表，并且直接在每一位上标注“这是省位、市位、县位”。为了便于演示，这里假设我们是 <strong>32 位虚拟地址</strong>，且使用了<strong>三层页表</strong>的典型切分方式：</p><ul><li><strong>顶层页表 (PDE)</strong>：10 位——类比“省” Page Directory Entry（页目录项）</li><li><strong>中间层页表 (PTE)</strong>：10 位——类比“市” Page Table Entry（页表项）</li><li><strong>页内偏移 (offset)</strong>：12 位——类比“县”</li></ul><p>这样，整个 32 位虚拟地址可分为：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[ PDE省(10 bits) | PTE市(10 bits) | offset县(12 bits) ]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>下面给出一个具体的二进制示例，取一串虚拟地址的 32 位来演示（用空格分段）：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>0101010101 1100110011 101010101010</span></span>
<span class="line"><span>↑         ↑          ↑           </span></span>
<span class="line"><span>省级PDE   市级PTE    县级offset</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>前 10 位 (0101010101)</strong>： 省级（PDE）</li><li><strong>中 10 位 (1100110011)</strong>： 市级（PTE）</li><li><strong>后 12 位 (101010101010)</strong>： 县级（offset）</li></ul><p>如果你想“逐位”都标注上对应的“省 / 市 / 县”，可以写成：</p><ol><li><p><strong>PDE（省）部分</strong>：10 位</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>省0  省1  省0  省1  省0  省1  省0  省1  省0  省1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（对应二进制 0 1 0 1 0 1 0 1 0 1）</p></li><li><p><strong>PTE（市）部分</strong>：10 位</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>市1  市1  市0  市0  市1  市1  市0  市0  市1  市1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（对应二进制 1 1 0 0 1 1 0 0 1 1）</p></li><li><p><strong>offset（县）部分</strong>：12 位</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>县1  县0  县1  县0  县1  县0  县1  县0  县1  县0  县1  县0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（对应二进制 1 0 1 0 1 0 1 0 1 0 1 0）</p></li></ol><hr><h3 id="对应关系" tabindex="-1"><a class="header-anchor" href="#对应关系"><span>对应关系</span></a></h3><ul><li><strong>“省”</strong>（PDE）：确定<strong>顶层页表</strong>，先划定大范围</li><li><strong>“市”</strong>（PTE）：在“省”内再进一步定位市级范围</li><li><strong>“县”</strong>（offset）：在“市”里找到最终具体的“县”，也就是落到物理页框中的具体偏移</li></ul><p>因此，整个地址翻译就像先选省，再选市，最后选到具体县一样，三级拆分后找到最终对应的物理内存位置。这样一来，每个比特都可以打上“省 / 市 / 县”的标签，看起来就很形象了。</p>`,13)]))}const p=i(n,[["render",r],["__file","页表.html.vue"]]),h=JSON.parse('{"path":"/1%20%E4%B8%80%E5%88%87%E7%9A%86%E9%A1%B9%E7%9B%AE/Q2%EF%BC%9A%E5%81%9ACS%E7%9A%84%E7%BB%8F%E5%85%B8lab/MIT%206.828/xv6/%E9%A1%B5%E8%A1%A8.html","title":"","lang":"zh-CN","frontmatter":{"description":"以下是一个示例，展示了如何用「省 / 市 / 县」来对应三层页表，并且直接在每一位上标注“这是省位、市位、县位”。为了便于演示，这里假设我们是 32 位虚拟地址，且使用了三层页表的典型切分方式： 顶层页表 (PDE)：10 位——类比“省” Page Directory Entry（页目录项） 中间层页表 (PTE)：10 位——类比“市” Page ...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/1%20%E4%B8%80%E5%88%87%E7%9A%86%E9%A1%B9%E7%9B%AE/Q2%EF%BC%9A%E5%81%9ACS%E7%9A%84%E7%BB%8F%E5%85%B8lab/MIT%206.828/xv6/%E9%A1%B5%E8%A1%A8.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:description","content":"以下是一个示例，展示了如何用「省 / 市 / 县」来对应三层页表，并且直接在每一位上标注“这是省位、市位、县位”。为了便于演示，这里假设我们是 32 位虚拟地址，且使用了三层页表的典型切分方式： 顶层页表 (PDE)：10 位——类比“省” Page Directory Entry（页目录项） 中间层页表 (PTE)：10 位——类比“市” Page ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-27T06:52:25.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-27T06:52:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-27T06:52:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":3,"title":"对应关系","slug":"对应关系","link":"#对应关系","children":[]}],"git":{"createdTime":1734923913000,"updatedTime":1735282345000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":2}]},"readingTime":{"minutes":1.66,"words":499},"filePathRelative":"1 一切皆项目/Q2：做CS的经典lab/MIT 6.828/xv6/页表.md","localizedDate":"2024年12月23日","autoDesc":true}');export{p as comp,h as data};
