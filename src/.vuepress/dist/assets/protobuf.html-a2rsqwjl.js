import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,f as e,a as c,d,e as n,b as t,r as p,o as s}from"./app-DokaGNO4.js";const l={};function u(g,o){const r=p("RouteLink");return s(),a("div",null,[o[2]||(o[2]=e(`<p>你有一份「秘密文件」（<code>byte[]</code> 的二进制数据），想把它变成一本「故事书」（你的自定义Java对象DailySortPrice）。 可是这个二进制数据是用「特别的语言」写的，别人不一定看得懂。 Protobuf 就像是一本「词典」，按照 <code>.proto</code> 文件的定义将二进制数据翻译成一种「标准语言」（Protobuf对象）。 等你拿到这份标准语言描述的东西后，再按照你的业务逻辑和习惯，把它转换成你的「故事书」（DailySortPrice 对象）格式。</p><h2 id="run" tabindex="-1"><a class="header-anchor" href="#run"><span>run</span></a></h2><ol start="2"><li>protobuf <ol><li>protobuf 中新增标签号 <code>repeated string propertyValueTags=119;</code></li><li><code>protoc -I=$SRC_DIR --java_out=$DST_DIR $SRC_DIR/PriceEntryProtoBuf.proto</code></li><li><code>PriceEntryProtoBufUtils.java</code></li></ol></li></ol><p>这是一条使用 <code>protoc</code>（Protocol Buffers 编译器）编译 <code>.proto</code> 文件的命令。下面对命令各部分进行解释：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>protoc -I={src_dir}/com/qunar/hotel/protobuf/definition \\</span></span>
<span class="line"><span>       --java_out={src_dir} \\</span></span>
<span class="line"><span>       {src_dir}/com/qunar/hotel/protobuf/definition/PriceEntryProtoBuf.proto</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p><strong>protoc</strong>：<br><code>protoc</code> 是 Google Protocol Buffers 的编译器程序，用于将 <code>.proto</code> 文件生成对应语言的代码文件（如 Java、C++、Python 等）。</p></li><li><p><strong>-I={src_dir}/com/qunar/hotel/protobuf/definition</strong>：<br><code>-I</code> 是 <code>--proto_path</code> 的缩写形式，代表的是 &quot;include path&quot; 或 &quot;import path&quot;。在 <code>protoc</code> 命令中，通过 <code>-I</code> 或 <code>--proto_path</code> 指定一个目录作为 <code>.proto</code> 文件的搜索路径。当你的 <code>.proto</code> 文件中使用 <code>import</code> 语句导入其他 <code>.proto</code> 文件时，编译器会从指定的 <code>-I</code> 目录开始查找相应的文件。 在本例中，<code>-I</code> 指定了 <code>src_dir/com/qunar/hotel/protobuf/definition</code> 为包含 <code>.proto</code> 文件的目录，这样 <code>protoc</code> 就能在这个路径下找到要编译的 <code>.proto</code> 文件。</p></li><li><p><strong>--java_out={src_dir}</strong>：<br><code>--java_out</code> 参数指定生成的 Java 源代码文件要输出到哪个目录。<br> 在此处， <code>{src_dir}</code> 为你的源代码根目录，编译器会在该目录下自动创建对应的 Java 包目录结构，并将生成的 <code>.java</code> 文件写入其中。</p></li><li><p><strong>{src_dir}/com/qunar/hotel/protobuf/definition/PriceEntryProtoBuf.proto</strong>：<br> 这是要编译的 <code>.proto</code> 文件的路径。<br> 该 <code>.proto</code> 文件中定义了数据结构（如消息类型、枚举）等，当执行此命令后，<code>protoc</code> 会依据其定义生成相应的 Java 类文件。</p></li></ol><h2 id="为什么不直接从-byte-到业务对象" tabindex="-1"><a class="header-anchor" href="#为什么不直接从-byte-到业务对象"><span>为什么不直接从 byte 到业务对象</span></a></h2>`,7)),c("p",null,[d(r,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.html"},{default:n(()=>o[0]||(o[0]=[t("适配器模式")])),_:1}),o[1]||(o[1]=t("的思想"))]),o[3]||(o[3]=e('<ul><li><p><strong>Input（byte[]）</strong>：原始数据（难以直接理解）</p></li><li><p><strong>Protobuf对象</strong>：通过 Protobuf 规范解析出的中间模型（统一标准格式）</p></li><li><p><strong>业务对象</strong>：适配和转换后的最终对象，适合直接在业务逻辑中使用</p></li><li><p><strong>Protobuf对象是中间翻译层</strong>：<br> Protobuf 编译器根据 <code>.proto</code> 文件生成的代码里有 <code>parseFrom()</code> 等方法，这些方法可以直接把 byte[] 按照 <code>.proto</code> 里定义的格式解析成一个清晰的、可访问的对象（<code>DailySortPriceProtoBuf.DailySortPrice</code>）。<br> 如果你跳过这一步，<code>DailySortPrice</code> 对象就只能看到一串没头没尾的 byte[]，不知道应该怎样拆分和解析每个字段。</p></li><li><p><strong>自定义对象可能与协议数据结构不同</strong>：<br> 有时候，你的业务对象 <code>DailySortPrice</code> 的属性名、结构、类型可能和 Protobuf 定义的结构有点差异。通过先获得一个 Protobuf 对象，你就可以按照自己的需求有序地「拷贝」和「转换」数据，灵活处理数据类型、默认值、数据清洗等逻辑。这样业务对象不一定要和 Protobuf 定义一模一样的字段和类型。 <img src="https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F12%2F15%2F02-19-19-81bf42ee709d520ea6750faa9d5a540d-202412150219859-ac6f8c.png" alt="image.png|300" loading="lazy"></p></li></ul>',1))])}const f=i(l,[["render",u],["__file","protobuf.html.vue"]]),h=JSON.parse('{"path":"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/protobuf.html","title":"","lang":"zh-CN","frontmatter":{"description":"你有一份「秘密文件」（byte[] 的二进制数据），想把它变成一本「故事书」（你的自定义Java对象DailySortPrice）。 可是这个二进制数据是用「特别的语言」写的，别人不一定看得懂。 Protobuf 就像是一本「词典」，按照 .proto 文件的定义将二进制数据翻译成一种「标准语言」（Protobuf对象）。 等你拿到这份标准语言描述的东...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/protobuf.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:description","content":"你有一份「秘密文件」（byte[] 的二进制数据），想把它变成一本「故事书」（你的自定义Java对象DailySortPrice）。 可是这个二进制数据是用「特别的语言」写的，别人不一定看得懂。 Protobuf 就像是一本「词典」，按照 .proto 文件的定义将二进制数据翻译成一种「标准语言」（Protobuf对象）。 等你拿到这份标准语言描述的东..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F12%2F15%2F02-19-19-81bf42ee709d520ea6750faa9d5a540d-202412150219859-ac6f8c.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-23T03:18:33.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-23T03:18:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F12%2F15%2F02-19-19-81bf42ee709d520ea6750faa9d5a540d-202412150219859-ac6f8c.png\\"],\\"dateModified\\":\\"2024-12-23T03:18:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"run","slug":"run","link":"#run","children":[]},{"level":2,"title":"为什么不直接从 byte 到业务对象","slug":"为什么不直接从-byte-到业务对象","link":"#为什么不直接从-byte-到业务对象","children":[]}],"git":{"createdTime":1733928507000,"updatedTime":1734923913000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":2}]},"readingTime":{"minutes":2.74,"words":822},"filePathRelative":"2 第二大脑/1 节点/CS/软件工程/protobuf.md","localizedDate":"2024年12月11日","autoDesc":true}');export{f as comp,h as data};
