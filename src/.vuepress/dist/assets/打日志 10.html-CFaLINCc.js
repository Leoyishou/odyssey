import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a,g as r,f as p,o as l}from"./app-DokaGNO4.js";const c={};function n(i,t){return l(),o("div",null,[t[0]||(t[0]=a("p",null,"excerpt",-1)),r(" more "),t[1]||(t[1]=p('<p>1.【强制】应用中不可直接使用日志系统（Log4j、Logback）中的 API，而应依赖使用日志框架（SLF4J、JCL—Jakarta Commons Logging）中的 API，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。</p><blockquote><p>facade</p></blockquote><p>2.【强制】日志文件至少保存 15 天，因为有些异常具备以 &quot; 周 &quot; 为频次发生的特点。对于当天日志，以 &quot; 应用名.log&quot; 来保存，保存在/{统一目录}/{应用名}/logs/目录下，过往日志格式为：{logname}.log.{保存日期}，日期格式：yyyy-MM-dd</p><blockquote><p>正例：以 mppserver 应用为例，日志保存/home/admin/mppserver/logs/mppserver.log，历史日志名称为 mppserver.log.2021-11-28<br> 目前是 /logs/access.2024-04-17.17.log</p></blockquote><p>3.【强制】根据国家法律，网络运行状态、网络安全事件、个人敏感信息操作等相关记录，留存的日志不少于六个月，并且进行网络多机备份。</p><blockquote><p>goldeye 是最久的一个地方</p></blockquote><p>4.【强制】应用中的扩展日志（如打点、临时监控、访问日志等）命名方式：appName_logType_logName.log。logType：日志类型，如 stats / monitor / access 等；logName：日志描述。这种命名的好处：通过文件名就可知道日志文件属于什么应用，什么类型，什么目的，也有利于归类查找。</p><blockquote><p>business_error.log api2V2.log, api2V2 有点奇怪</p></blockquote><p>5.【强制】在日志输出时，字符串变量之间的拼接使用占位符的方式。因为 String 字符串的拼接会使用 StringBuilder 的 append() 方式，有一定的性能损耗。使用占位符仅是替换动作，可以有效提升性能。</p><blockquote><p>正例：logger.debug(&quot;Processing trade with id: {} and symbol: {}&quot;, id, symbol);</p></blockquote><p>6.【强制】对于 trace / debug / info 级别的日志输出，必须进行日志级别的开关判断：</p><blockquote><p>说明：虽然在 debug(参数) 的方法体内第一行代码 isDisabled(Level.DEBUG_INT) 为真时（Slf4j 的常见实现 Log4j 和<br> Logback），就直接 return，但是参数可能会进行字符串拼接运算。此外，如果 debug(getName()) 这种参数内有<br> getName() 方法调用，无谓浪费方法调用的开销。</p></blockquote><p>7.【强制】避免重复打印日志，浪费磁盘空间，务必在日志配置文件中设置 additivity=false</p><blockquote><p>一个小时居然 120g</p></blockquote><p>8.【强制】生产环境禁止使用 System.out 或 System.err 输出或使用 e.printStackTrace() 打印异常堆栈。</p><blockquote><p>说明：标准日志输出与标准错误输出文件每次 Jboss 重启时才滚动，如果大量输出送往这两个文件，容易造成文件大小<br> 超过操作系统大小限制。</p></blockquote><p>9.【强制】异常信息应该包括两类信息：案发现场信息和异常堆栈信息。如果不处理，那么通过关键字 throws 往上抛出。</p><blockquote><p>正例：logger.error(&quot;inputParams: {} and errorMessage: {}&quot;, 各类参数或者对象 toString(), e.getMessage(), e);<br> 就是 QFC 的时候李佳悦说的保留一些有用信息，不打 e，看异常日志定位不出是哪行代码出了事</p></blockquote><p>10.【强制】日志打印时禁止直接用 JSON 工具将对象转换成 String。</p><blockquote><p>说明：如果对象里某些 get 方法被覆写，存在抛出异常的情况，则可能会因为打印日志而影响正常业务流程的执行。 正例：打印日志时仅打印出业务相关属性值或者调用其对象的 toString() 方法。</p></blockquote><p>14.【推荐】为了保护用户隐私，日志文件中的用户敏感信息需要进行脱敏处理。</p><blockquote><p>说明：日志排查问题时，推荐使用订单号、UUID 之类的唯一编号进行查询。</p></blockquote><p>12.【推荐】可以使用 warn 日志级别来记录用户输入参数错误的情况，避免用户投诉时，无所适从。如非必要，请不要在此场景打出 error 级别，避免频繁报警。说明：注意日志输出的级别，error 级别只记录系统逻辑出错、异常</p><h2 id="为什么叫-catalina" tabindex="-1"><a class="header-anchor" href="#为什么叫-catalina"><span>为什么叫 &quot;Catalina&quot;?</span></a></h2><p>在许多基于 Java 的 Web 应用服务器中，服务器的日志通常被命名为 &quot;catalina&quot;。这个名字直接来自于 Apache Tomcat 服务器，它是一个广泛使用的开源 Java Servlet 容器，由 Apache 软件基金会管理。</p><ol><li><p><strong>项目命名</strong>: Apache Tomcat 的内部项目和组件命名通常来源于海洋和水域相关的名字。例如，Tomcat 中的高级组件叫做 &quot;Coyote&quot;，而负责解析和处理 Web 应用程序的主要 Servlet 容器就被称为 &quot;Catalina&quot;。</p></li><li><p><strong>历史原因</strong>: &quot;Catalina&quot; 是 Tomcat 的一个核心组件，负责 Servlet 加载、卸载和运行时管理。由于这个组件的重要性，日志文件名采用了组件的名称来反映其核心功能。这使得当开发者和系统管理员查看日志文件时，能够立即识别出这些日志文件与 Tomcat 的核心 Servlet 容器相关联。</p></li><li><p><strong>日志文件命名</strong>: 在 Tomcat 中，默认的日志文件名为 &quot;catalina.out&quot;，其中包含了从 Tomcat 启动到关闭期间的所有输出。这种命名约定有助于系统维护人员快速识别和访问服务器日志。</p></li></ol><p>总的来说，&quot;Catalina&quot; 日志名反映了 Apache Tomcat 中一个核心组件的名称，这一命名传统被广泛沿用在涉及 Tomcat 的各种设置和配置中。这个名字帮助区分了 Tomcat 处理的不同类型的日志（如访问日志通常叫做 &quot;localhost_access_log&quot;），确保了日志系统的清晰和有序。</p>',27))])}const g=e(c,[["render",n],["__file","打日志 10.html.vue"]]),u=JSON.parse('{"path":"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E9%98%BF%E9%87%8C%E8%A7%84%E8%8C%83/%E6%89%93%E6%97%A5%E5%BF%97%2010.html","title":"打日志 10","lang":"zh-CN","frontmatter":{"draw":null,"title":"打日志 10","tags":["1 Dev","Java","代码味道","信息革命"],"date created":"2024-04-17T00:00:00.000Z","date modified":"2024-11-12T00:00:00.000Z","description":"excerpt 1.【强制】应用中不可直接使用日志系统（Log4j、Logback）中的 API，而应依赖使用日志框架（SLF4J、JCL—Jakarta Commons Logging）中的 API，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。 facade 2.【强制】日志文件至少保存 15 天，因为有些异常具备以 \\" 周 \\" 为...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E9%98%BF%E9%87%8C%E8%A7%84%E8%8C%83/%E6%89%93%E6%97%A5%E5%BF%97%2010.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:title","content":"打日志 10"}],["meta",{"property":"og:description","content":"excerpt 1.【强制】应用中不可直接使用日志系统（Log4j、Logback）中的 API，而应依赖使用日志框架（SLF4J、JCL—Jakarta Commons Logging）中的 API，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。 facade 2.【强制】日志文件至少保存 15 天，因为有些异常具备以 \\" 周 \\" 为..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-24T16:17:22.000Z"}],["meta",{"property":"article:tag","content":"1 Dev"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"代码味道"}],["meta",{"property":"article:tag","content":"信息革命"}],["meta",{"property":"article:modified_time","content":"2024-11-24T16:17:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"打日志 10\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-24T16:17:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"为什么叫 \\"Catalina\\"?","slug":"为什么叫-catalina","link":"#为什么叫-catalina","children":[]}],"git":{"createdTime":1732465042000,"updatedTime":1732465042000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":1}]},"readingTime":{"minutes":4.73,"words":1419},"filePathRelative":"2 第二大脑/1 节点/CS/编程语言/Java/阿里规范/打日志 10.md","localizedDate":"2024年11月25日","autoDesc":true}');export{g as comp,u as data};
