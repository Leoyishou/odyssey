import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,f as n,o as r}from"./app-DokaGNO4.js";const p={};function g(e,t){return r(),s("div",null,t[0]||(t[0]=[n('<h3 id="核心矛盾" tabindex="-1"><a class="header-anchor" href="#核心矛盾"><span>核心矛盾</span></a></h3><p>快 和 数据一致性 之间的矛盾</p><h2 id="最简单的版本" tabindex="-1"><a class="header-anchor" href="#最简单的版本"><span>最简单的版本</span></a></h2><p>列表页 300s，详情页 50s</p><h2 id="流程" tabindex="-1"><a class="header-anchor" href="#流程"><span>流程</span></a></h2><p>• <strong>缓存命中（Cache Hit）</strong>：当请求的数据存在于缓存中，直接返回缓存数据，速度快。 • <strong>缓存未命中（Cache Miss）</strong>：当请求的数据不在缓存中，需要从源头获取数据，可能会导致延迟。</p><h2 id="替换策略" tabindex="-1"><a class="header-anchor" href="#替换策略"><span>替换策略</span></a></h2><p>未命中是因为替换策略</p><ol start="2"><li>超时失效策略 系统设置了多个超时时间：</li></ol><ul><li>FinalFeedbackStatus: 50s</li><li>RenderFeedbackStatus: 300s</li><li>单个wrapper的回数等待: 400ms</li></ul><ol start="3"><li>缓存更新触发</li></ol><ul><li>代理商变价消息</li><li>缓存过期</li><li>用户访问触发的feedback检查 <img src="https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F09%2F22%2F18-31-02-791bad42a2a1ca40c13255e852caaf8f-202409221831859-bf99f8.png" alt="image.png|1000" loading="lazy"></li></ul><h2 id="对于一套缓存机制-最应该关心的几个概念是什么" tabindex="-1"><a class="header-anchor" href="#对于一套缓存机制-最应该关心的几个概念是什么"><span><strong>对于一套缓存机制，最应该关心的几个概念是什么？</strong></span></a></h2><p>在设计、实现和维护缓存机制时，有几个关键概念需要特别关注，以确保缓存系统的高效性、可靠性和安全性。以下是最重要的几个概念：</p><p><strong>1. 缓存命中率（Cache Hit Rate）</strong></p><p>• <strong>定义</strong>：缓存命中次数与总访问次数的比率。</p><p>• <strong>重要性</strong>：</p><p>• <strong>性能指标</strong>：命中率直接影响系统的性能和响应速度。</p><p>• <strong>优化方向</strong>：高命中率意味着更多的请求被缓存满足，减少了对后端资源的访问。</p><p>• <strong>优化方法</strong>：</p><p>• <strong>增加缓存容量</strong>：容纳更多的数据。</p><p>• <strong>优化缓存策略</strong>：选择适合的缓存替换策略。</p><p>• <strong>改善数据访问模式</strong>：提高数据的局部性。</p><p><strong>2. 缓存替换策略（Cache Replacement Policy）</strong></p><p>• <strong>定义</strong>：当缓存空间不足时，决定哪些数据需要被淘汰的策略。</p><p>• <strong>常见策略</strong>：</p><p>• <strong>LRU（最近最少使用）</strong>：淘汰最久未被访问的数据。</p><p>• <strong>LFU（最少使用）</strong>：淘汰访问频率最低的数据。</p><p>• <strong>FIFO（先进先出）</strong>：按照进入缓存的顺序淘汰数据。</p><p>• <strong>随机替换</strong>：随机选择一个数据进行淘汰。</p><p>• <strong>选择依据</strong>：</p><p>• <strong>数据访问模式</strong>：根据应用程序的数据访问特点选择合适的策略。</p><p>• <strong>性能权衡</strong>：考虑策略的实现复杂度和资源消耗。</p><p><strong>3. 缓存一致性（Cache Coherence）</strong></p><p>• <strong>定义</strong>：在多级缓存或分布式缓存中，确保各缓存副本的数据一致性。</p><p>• <strong>挑战</strong>：</p><p>• <strong>数据更新延迟</strong>：不同缓存节点之间的数据同步存在延迟。</p><p>• <strong>并发访问</strong>：多线程或多进程环境下的数据一致性维护。</p><p>• <strong>解决方案</strong>：</p><p>• <strong>一致性协议</strong>：如MESI、MOESI协议等。</p><p>• <strong>数据过期策略</strong>：设置适当的TTL（Time to Live）。</p><p>• <strong>更新机制</strong>：主动推送更新或被动拉取更新。</p><p><strong>4. 缓存失效和过期策略</strong></p><p>• <strong>定义</strong>：决定缓存数据何时被认为是无效或过期的策略。</p><p>• <strong>重要性</strong>：</p><p>• <strong>数据新鲜度</strong>：确保用户获取到最新的数据。</p><p>• <strong>缓存有效性</strong>：避免缓存污染和资源浪费。</p><p>• <strong>实现方式</strong>：</p><p>• <strong>固定过期时间</strong>：设置TTL。</p><p>• <strong>基于事件的失效</strong>：在数据更新时主动清除缓存。</p><p>• <strong>定期刷新</strong>：周期性地更新缓存内容。</p><p><strong>5. 缓存穿透、击穿和雪崩</strong></p><p><strong>5.1 缓存穿透</strong></p><p>• <strong>定义</strong>：大量请求访问缓存和数据库中都不存在的数据，每次都穿透缓存直接访问数据库。</p><p>• <strong>影响</strong>：增加数据库压力，可能被恶意利用进行攻击。</p><p>• <strong>防范措施</strong>：</p><p>• <strong>缓存空结果</strong>：对不存在的数据也进行短时间缓存。</p><p>• <strong>参数校验</strong>：在接口层过滤非法请求。</p><p>• <strong>布隆过滤器</strong>：快速判断数据是否存在。</p><p><strong>5.2 缓存击穿</strong></p><p>• <strong>定义</strong>：热点数据在缓存中过期，大量并发请求直接访问数据库。</p><p>• <strong>影响</strong>：数据库瞬时压力过大，可能导致服务崩溃。</p><p>• <strong>防范措施</strong>：</p><p>• <strong>热点数据永不过期</strong>：对热点数据设置较长或无限的过期时间。</p><p>• <strong>互斥锁机制</strong>：使用分布式锁控制对数据库的访问。</p><p><strong>5.3 缓存雪崩</strong></p><p>• <strong>定义</strong>：大量缓存同时过期或缓存服务器宕机，导致请求大量涌向后端服务器。</p><p>• <strong>影响</strong>：后端服务压力骤增，可能引发连锁故障。</p><p>• <strong>防范措施</strong>：</p><p>• <strong>过期时间随机化</strong>：错开缓存失效时间。</p><p>• <strong>多级缓存</strong>：增加缓存层级，缓解压力。</p><p>• <strong>高可用设计</strong>：缓存服务器集群化，增加冗余。</p><p><strong>6. 缓存粒度</strong></p><p>• <strong>定义</strong>：缓存数据的大小和细化程度。</p><p>• <strong>考虑因素</strong>：</p><p>• <strong>数据更新频率</strong>：频繁更新的数据适合细粒度缓存。</p><p>• <strong>访问模式</strong>：整体访问多则适合粗粒度缓存。</p><p>• <strong>权衡</strong>：</p><p>• <strong>性能</strong>：细粒度缓存命中率可能降低，但更新代价小。</p><p>• <strong>资源占用</strong>：粗粒度缓存可能浪费内存，但命中率高。</p><p><strong>7. 缓存预热</strong></p><p>• <strong>定义</strong>：在系统启动或缓存清空时，提前将常用数据加载到缓存中。</p><p>• <strong>重要性</strong>：</p><p>• <strong>避免冷启动问题</strong>：提高系统初始阶段的性能。</p><p>• <strong>提升用户体验</strong>：减少用户首次访问的延迟。</p><p>• <strong>实现方法</strong>：</p><p>• <strong>手动预加载</strong>：在部署时执行预热脚本。</p><p>• <strong>自动学习</strong>：系统根据历史数据自动预热。</p><p><strong>8. 缓存监控和统计</strong></p><p>• <strong>重要性</strong>：</p><p>• <strong>性能调优</strong>：通过监控命中率等指标，优化缓存策略。</p><p>• <strong>问题排查</strong>：及时发现缓存相关的异常和故障。</p><p>• <strong>关键指标</strong>：</p><p>• <strong>命中率和未命中率</strong>。</p><p>• <strong>缓存大小和使用率</strong>。</p><p>• <strong>加载和淘汰次数</strong>。</p><p>• <strong>工具和方法</strong>：</p><p>• <strong>日志分析</strong>：记录缓存操作日志。</p><p>• <strong>监控系统</strong>：使用专业的监控工具，如Prometheus、Grafana等。</p><p><strong>9. 缓存的可扩展性和高可用性</strong></p><p>• <strong>可扩展性</strong>：</p><p>• <strong>水平扩展</strong>：支持增加缓存节点以应对流量增长。</p><p>• <strong>数据分片</strong>：将缓存数据分布到不同节点。</p><p>• <strong>高可用性</strong>：</p><p>• <strong>冗余设计</strong>：使用主从架构或集群模式。</p><p>• <strong>故障转移</strong>：节点故障时自动切换到备用节点。</p><p>• <strong>数据持久化</strong>：防止缓存服务器重启导致数据丢失。</p><p><strong>10. 缓存安全性</strong></p><p>• <strong>数据保护</strong>：</p><p>• <strong>敏感数据加密</strong>：防止缓存数据被未授权访问。</p><p>• <strong>访问控制</strong>：设置缓存的读写权限。</p><p>• <strong>安全防护</strong>：</p><p>• <strong>防止缓存中毒</strong>：验证缓存数据的完整性和可信度。</p><p>• <strong>防御攻击</strong>：防止利用缓存机制的安全漏洞进行攻击，如缓存侧信道攻击。</p><p><strong>11. 缓存层次结构</strong></p><p>• <strong>定义</strong>：缓存系统可能包含多级缓存，如L1、L2缓存，或本地缓存和分布式缓存的组合。</p><p>• <strong>重要性</strong>：</p><p>• <strong>提高缓存命中率</strong>：多级缓存可以更有效地利用不同层次的缓存特性。</p><p>• <strong>降低延迟</strong>：本地缓存访问速度更快。</p><p>• <strong>设计考虑</strong>：</p><p>• <strong>数据同步</strong>：确保各级缓存之间的数据一致性。</p><p>• <strong>缓存策略协调</strong>：各级缓存可能需要不同的替换和失效策略。</p><p><strong>12. 缓存与业务逻辑的耦合度</strong></p><p>• <strong>低耦合</strong>：</p><p>• <strong>优势</strong>：业务逻辑和缓存机制独立，方便维护和扩展。</p><p>• <strong>实现方法</strong>：使用AOP（面向切面编程）等技术，将缓存逻辑与业务代码分离。</p><p>• <strong>高耦合</strong>：</p><p>• <strong>优势</strong>：缓存可以针对业务需求进行高度定制化。</p><p>• <strong>风险</strong>：增加代码复杂度，可能导致维护困难。</p><p><strong>13. 缓存预取和回写策略</strong></p><p>• <strong>预取（Prefetching）</strong>：</p><p>• <strong>定义</strong>：根据预测，提前将可能需要的数据加载到缓存。</p><p>• <strong>优势</strong>：减少未来的缓存未命中。</p><p>• <strong>挑战</strong>：预测不准确可能导致资源浪费。</p><p>• <strong>回写（Write-Back）和直写（Write-Through）</strong>：</p><p>• <strong>回写策略</strong>：数据先写入缓存，后异步写入主存。</p><p>• <strong>直写策略</strong>：数据同时写入缓存和主存。</p><p>• <strong>权衡</strong>：回写策略性能更高，但存在数据丢失风险；直写策略数据更安全，但性能稍差。</p><p><strong>总结</strong></p><p>在设计和实现缓存机制时，关注以上关键概念可以帮助您：</p><p>• <strong>提高系统性能</strong>：通过优化命中率和降低延迟。</p><p>• <strong>确保数据一致性和可靠性</strong>：维护缓存与主存数据的一致性。</p><p>• <strong>增强系统可用性和可扩展性</strong>：设计高可用和可扩展的缓存架构。</p><p>• <strong>保障系统安全性</strong>：防止缓存引入的安全风险。</p><p>• <strong>优化资源利用</strong>：合理管理缓存资源，避免浪费。</p><p><strong>建议</strong></p><p>• <strong>深入理解业务需求</strong>：根据具体的应用场景选择和调整缓存策略。</p><p>• <strong>持续监控和优化</strong>：定期分析缓存性能指标，进行必要的调整。</p><p>• <strong>重视安全和稳定性</strong>：在提升性能的同时，确保系统的安全和可靠。</p><h2 id="让我从关键的缓存概念来分析这套机制" tabindex="-1"><a class="header-anchor" href="#让我从关键的缓存概念来分析这套机制"><span>让我从关键的缓存概念来分析这套机制：</span></a></h2><ol><li>缓存命中率</li></ol><ul><li>使用被动缓存策略：只缓存用户访问过的酒店，避免无效缓存</li><li>差异化缓存时间：详情页50s，列表页300s，平衡命中率和新鲜度</li></ul><ol start="2"><li>缓存替换策略</li></ol><ul><li>主要依赖超时淘汰，无传统LRU/LFU等策略</li><li>基于业务时效性需求设计的替换机制</li></ul><ol start="3"><li>缓存一致性</li></ol><ul><li>存在不一致情况：列表页和详情页价格可能不同</li><li>并发请求可能看到不同价格</li><li>通过回数模型和异步更新机制平衡一致性和性能</li></ul><ol start="4"><li>缓存失效策略</li></ol><ul><li>基于时间：50s/300s的基础过期时间</li><li>基于事件：代理商变价消息触发失效</li><li>回数模型：评估数据新鲜度决定是否失效</li></ul><ol start="5"><li>缓存问题防范</li></ol><ul><li>缓存击穿：使用回数模型评估，避免全部重新抓取</li><li>缓存雪崩：差异化缓存时间，异步更新机制</li><li>缓存穿透：未明确提及防范措施</li></ul><ol start="6"><li>监控和统计</li></ol><ul><li>RenderFeedbackStatus：记录刷新状态</li><li>FinalFeedbackStatus：记录最终结果</li><li>wrapper的回数统计</li></ul><p>该机制的特点是:</p><ul><li>围绕业务需求(价格新鲜度)设计</li><li>更注重时效性而非传统缓存关注的空间利用</li><li>通过多级判断和异步机制平衡性能与一致性</li></ul><p>不足之处：</p><ul><li>缓存安全性未提及</li><li>缓存穿透防范措施不清晰</li><li>监控体系可以更完善</li></ul>',166)]))}const a=o(p,[["render",g],["__file","缓存.html.vue"]]),c=JSON.parse('{"path":"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BC%93%E5%AD%98.html","title":"缓存","lang":"zh-CN","frontmatter":{"draw":null,"tags":[],"title":"缓存","date created":"2024-09-22T00:00:00.000Z","date modified":"2024-11-12T00:00:00.000Z","description":"核心矛盾 快 和 数据一致性 之间的矛盾 最简单的版本 列表页 300s，详情页 50s 流程 • 缓存命中（Cache Hit）：当请求的数据存在于缓存中，直接返回缓存数据，速度快。 • 缓存未命中（Cache Miss）：当请求的数据不在缓存中，需要从源头获取数据，可能会导致延迟。 替换策略 未命中是因为替换策略 超时失效策略 系统设置了多个超时时...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BC%93%E5%AD%98.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:title","content":"缓存"}],["meta",{"property":"og:description","content":"核心矛盾 快 和 数据一致性 之间的矛盾 最简单的版本 列表页 300s，详情页 50s 流程 • 缓存命中（Cache Hit）：当请求的数据存在于缓存中，直接返回缓存数据，速度快。 • 缓存未命中（Cache Miss）：当请求的数据不在缓存中，需要从源头获取数据，可能会导致延迟。 替换策略 未命中是因为替换策略 超时失效策略 系统设置了多个超时时..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F09%2F22%2F18-31-02-791bad42a2a1ca40c13255e852caaf8f-202409221831859-bf99f8.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-11T14:48:27.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-11T14:48:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"缓存\\",\\"image\\":[\\"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F09%2F22%2F18-31-02-791bad42a2a1ca40c13255e852caaf8f-202409221831859-bf99f8.png\\"],\\"dateModified\\":\\"2024-12-11T14:48:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":3,"title":"核心矛盾","slug":"核心矛盾","link":"#核心矛盾","children":[]},{"level":2,"title":"最简单的版本","slug":"最简单的版本","link":"#最简单的版本","children":[]},{"level":2,"title":"流程","slug":"流程","link":"#流程","children":[]},{"level":2,"title":"替换策略","slug":"替换策略","link":"#替换策略","children":[]},{"level":2,"title":"对于一套缓存机制，最应该关心的几个概念是什么？","slug":"对于一套缓存机制-最应该关心的几个概念是什么","link":"#对于一套缓存机制-最应该关心的几个概念是什么","children":[]},{"level":2,"title":"让我从关键的缓存概念来分析这套机制：","slug":"让我从关键的缓存概念来分析这套机制","link":"#让我从关键的缓存概念来分析这套机制","children":[]}],"git":{"createdTime":1732465042000,"updatedTime":1733928507000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":2}]},"readingTime":{"minutes":8.75,"words":2624},"filePathRelative":"2 第二大脑/1 节点/CS/缓存.md","localizedDate":"2024年11月25日","autoDesc":true}');export{a as comp,c as data};
