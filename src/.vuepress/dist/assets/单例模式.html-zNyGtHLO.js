import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,g as r,f as l,o}from"./app-DokaGNO4.js";const i={};function p(s,e){return o(),a("div",null,[e[0]||(e[0]=n("p",null,"Spring 中 bean 的默认作用域就是 singleton(单例) 的",-1)),r(" more "),e[1]||(e[1]=l('<h2 id="场景" tabindex="-1"><a class="header-anchor" href="#场景"><span>场景</span></a></h2><ol><li><strong>节省系统资源</strong>，空间和时间</li><li><strong>提供全局访问点</strong>：单例模式提供了一个易于访问的全局接口，其他对象可以通过这个接口访问单例类的实例，无需自行管理其生命周期和状态。</li></ol><h2 id="如何实现单例" tabindex="-1"><a class="header-anchor" href="#如何实现单例"><span>如何实现单例</span></a></h2><h3 id="饿汉式" tabindex="-1"><a class="header-anchor" href="#饿汉式"><span>饿汉式</span></a></h3><p>1、私有化构造方法</p><p>2、双重校验防止加锁过程中状态发生变化</p><p>3、加 volatile 防止重排序导致的假 singleton</p><h3 id="枚举实现单例模式" tabindex="-1"><a class="header-anchor" href="#枚举实现单例模式"><span>枚举实现单例模式</span></a></h3><p>枚举 1: 想通过枚举的反射拿构造函数会抛 IllegalArgumentException</p><p>枚举 2: 被反序列化时，不会通过调用构造函数来创建新的实例。相反，反序列化方法会返回已经存在的 enum 常量，这确保了 enum 的单例性。</p><h2 id="如何破坏单例" tabindex="-1"><a class="header-anchor" href="#如何破坏单例"><span>如何破坏单例</span></a></h2><p>反射和反序列化都会破坏单例模式，相当于绕开了 Java 提供的常规的 new 一个对象，用构造方法的机制</p>',12))])}const m=t(i,[["render",p],["__file","单例模式.html.vue"]]),h=JSON.parse('{"path":"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html","title":"单例模式","lang":"zh-CN","frontmatter":{"draw":null,"title":"单例模式","tags":["Dev","信息革命","设计模式"],"date created":"2024-05-08T00:00:00.000Z","date modified":"2024-11-12T00:00:00.000Z","description":"Spring 中 bean 的默认作用域就是 singleton(单例) 的 场景 节省系统资源，空间和时间 提供全局访问点：单例模式提供了一个易于访问的全局接口，其他对象可以通过这个接口访问单例类的实例，无需自行管理其生命周期和状态。 如何实现单例 饿汉式 1、私有化构造方法 2、双重校验防止加锁过程中状态发生变化 3、加 volatile 防止重排...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:title","content":"单例模式"}],["meta",{"property":"og:description","content":"Spring 中 bean 的默认作用域就是 singleton(单例) 的 场景 节省系统资源，空间和时间 提供全局访问点：单例模式提供了一个易于访问的全局接口，其他对象可以通过这个接口访问单例类的实例，无需自行管理其生命周期和状态。 如何实现单例 饿汉式 1、私有化构造方法 2、双重校验防止加锁过程中状态发生变化 3、加 volatile 防止重排..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-24T16:17:22.000Z"}],["meta",{"property":"article:tag","content":"Dev"}],["meta",{"property":"article:tag","content":"信息革命"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:modified_time","content":"2024-11-24T16:17:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"单例模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-24T16:17:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"场景","slug":"场景","link":"#场景","children":[]},{"level":2,"title":"如何实现单例","slug":"如何实现单例","link":"#如何实现单例","children":[{"level":3,"title":"饿汉式","slug":"饿汉式","link":"#饿汉式","children":[]},{"level":3,"title":"枚举实现单例模式","slug":"枚举实现单例模式","link":"#枚举实现单例模式","children":[]}]},{"level":2,"title":"如何破坏单例","slug":"如何破坏单例","link":"#如何破坏单例","children":[]}],"git":{"createdTime":1732465042000,"updatedTime":1732465042000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":1}]},"readingTime":{"minutes":0.97,"words":292},"filePathRelative":"2 第二大脑/1 节点/CS/软件工程/设计模式/单例模式.md","localizedDate":"2024年11月25日","autoDesc":true}');export{m as comp,h as data};
