import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a as s,g as p,b as i,d as n,e as l,f as o,r as d,o as k}from"./app-DokaGNO4.js";const c={};function B(m,e){const t=d("RouteLink");return k(),r("div",null,[e[9]||(e[9]=s("p",null,"excerpt",-1)),p(" more "),s("p",null,[e[1]||(e[1]=i("WebSocket 是基于 ")),n(t,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BD%91%E7%BB%9C/TCP.html"},{default:l(()=>e[0]||(e[0]=[i("TCP")])),_:1}),e[2]||(e[2]=i(" 的轻量级网络通信协议，和 ")),e[3]||(e[3]=s("a",{href:"2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/2%20%E7%9F%A5%E8%AF%86/CS/%E4%BA%92%E8%81%94%E7%BD%91/HTTP"},"2 第二大脑/2 知识/CS/互联网/HTTP",-1)),e[4]||(e[4]=i(" 同级的。"))]),s("p",null,[n(t,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BD%91%E7%BB%9C/HTTP%201.1.html"},{default:l(()=>e[5]||(e[5]=[i("HTTP 1.1")])),_:1}),e[7]||(e[7]=i("握手+")),n(t,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BD%91%E7%BB%9C/TCP.html"},{default:l(()=>e[6]||(e[6]=[i("TCP")])),_:1}),e[8]||(e[8]=i("长连接实现**双向通信"))]),e[10]||(e[10]=o(`<div class="language-mermaid line-numbers-mode" data-highlighter="shiki" data-ext="mermaid" data-title="mermaid" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sequenceDiagram</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    participant Client</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    participant Server</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Note over Client,Server: 1. HTTP 握手阶段</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Client-&gt;&gt;Server: HTTP GET 请求 + Upgrade: websocket</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Note right of Client: Connection: Upgrade&lt;br/&gt;Sec-WebSocket-Key: xxx&lt;br/&gt;Sec-WebSocket-Version: 13</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Server-&gt;&gt;Client: HTTP 101 Switching Protocols</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Note left of Server: Upgrade: websocket&lt;br/&gt;Sec-WebSocket-Accept: xxx</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Note over Client,Server: 2. WebSocket 连接建立</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Note over Client,Server: 3. 双向通信阶段（TCP长连接）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Client-&gt;&gt;Server: WebSocket Frame (数据帧)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Server-&gt;&gt;Client: WebSocket Frame (数据帧)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Client-&gt;&gt;Server: WebSocket Frame (数据帧)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Server-&gt;&gt;Client: WebSocket Frame (数据帧)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Note over Client,Server: 4. 任意一方都可以发起关闭</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Client-&gt;&gt;Server: Close Frame</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Server-&gt;&gt;Client: Close Frame</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Note over Client,Server: TCP 连接断开</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>与普通 HTTP 不同，WebSocket 是持久连接</li><li>支持<strong>服务器主动推送消息给客户端</strong>，后端主动给前端推消息</li></ul><p>WebSocket 和 HTTP 都是应用层协议，它们确实在网络协议的同一层（应用层）。让我们来看一下具体的协议层级:</p><ol><li><p>应用层 (Application Layer)</p><ul><li>HTTP</li><li>WebSocket</li><li>FTP, SMTP 等其他应用层协议</li></ul></li><li><p>传输层 (Transport Layer)</p><ul><li>TCP (是的，TCP 就是它们的下一层)</li><li>UDP</li></ul></li></ol><p>HTTP 和 WebSocket 的关系比较特殊:</p><ul><li>WebSocket 协议在建立连接时，会先通过 HTTP 进行握手</li><li>握手成功后，会升级为 WebSocket 协议，使用 TCP 长连接进行<strong>双向通信</strong></li></ul><p>主要区别:</p><ul><li>HTTP 是请求-响应模式，每次通信都需要客户端发起</li><li>WebSocket 建立连接后，服务器可以主动向客户端推送数据，实现了真正的双向通信</li></ul>`,8))])}const g=a(c,[["render",B],["__file","WebSocket.html.vue"]]),v=JSON.parse('{"path":"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BD%91%E7%BB%9C/WebSocket.html","title":"WebSocket","lang":"zh-CN","frontmatter":{"draw":null,"title":"WebSocket","tags":[],"date created":"2024-06-05T00:00:00.000Z","date modified":"2024-11-12T00:00:00.000Z","description":"excerpt WebSocket 是基于 的轻量级网络通信协议，和 2 第二大脑/2 知识/CS/互联网/HTTP 同级的。 握手+长连接实现**双向通信 与普通 HTTP 不同，WebSocket 是持久连接 支持服务器主动推送消息给客户端，后端主动给前端推消息 WebSocket 和 HTTP 都是应用层协议，它们确实在网络协议的同一层（应用层）...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E7%BD%91%E7%BB%9C/WebSocket.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:title","content":"WebSocket"}],["meta",{"property":"og:description","content":"excerpt WebSocket 是基于 的轻量级网络通信协议，和 2 第二大脑/2 知识/CS/互联网/HTTP 同级的。 握手+长连接实现**双向通信 与普通 HTTP 不同，WebSocket 是持久连接 支持服务器主动推送消息给客户端，后端主动给前端推消息 WebSocket 和 HTTP 都是应用层协议，它们确实在网络协议的同一层（应用层）..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-24T16:17:22.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-24T16:17:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"WebSocket\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-24T16:17:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1732465042000,"updatedTime":1732465042000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":1}]},"readingTime":{"minutes":1.48,"words":445},"filePathRelative":"2 第二大脑/1 节点/CS/网络/WebSocket.md","localizedDate":"2024年11月25日","autoDesc":true}');export{g as comp,v as data};
