import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,f as n,o as l}from"./app-DokaGNO4.js";const e={};function t(p,i){return l(),a("div",null,i[0]||(i[0]=[n(`<p>下面是一段极为简化、概念性的 Java 代码，用来模拟 xv6 操作系统中“中断陷阱（interrupt/trap）”的过程。这段代码无关实际硬件，只是帮助理解概念。</p><p>在 xv6 中，当 CPU 在用户态执行用户程序时，如果发生中断（如时钟中断）或异常（如除零错误），CPU 会自动切换到内核态执行内核中的 trap 处理例程。处理例程根据中断号或异常类型采取相应的动作，然后再返回用户态继续执行或终止进程。</p><p>通过这段代码你可以看到以下概念：</p><ul><li><code>UserCode</code> 类的 <code>runUserProgram()</code> 模拟用户程序运行。</li><li><code>TrapHandler</code> 类的 <code>handleTrap()</code> 模拟内核态的中断处理例程。</li><li>当用户代码中发生“事件”（这里用模拟的 <code>causeInterrupt()</code> 表达），就会调用 <code>TrapHandler.handleTrap()</code> 来处理。</li><li>处理完成后返回用户态继续运行用户程序。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 模拟用户程序的代码</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> runUserProgram</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;[User] Running user code...&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 假设在用户程序运行时发生中断（如时钟中断）</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 这里用一个函数来模拟中断的触发</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        causeInterrupt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;[User] User code resumes after interrupt handling.&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 这个方法用于模拟用户态运行过程中发生中断（trap）</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 实际xv6中中断由硬件和CPU模式自动完成，这里手动调用模拟</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> causeInterrupt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;[User] An event occurred that requires kernel intervention (interrupt).&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 模拟陷入内核态的处理函数</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        TrapHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">handleTrap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;TIMER INTERRUPT&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 模拟内核态的中断处理例程</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TrapHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> handleTrap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> trapType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 切换到内核态处理中断，这里用打印表示</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;[Kernel] Entering kernel trap handler for: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> trapType);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 根据 trapType 不同，采取不同动作</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 在真实的xv6中，这里会查看trap编号，然后执行相应的处理逻辑（例如时钟中断更新进程时间片，IO中断处理输入输出等）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 处理完毕后，返回用户态（这里直接返回上一级即可）</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;[Kernel] Trap handling complete, returning to user space.&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 模拟系统启动及运行用户程序</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Xv6InterruptTrapDemo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 在真实系统中：CPU最初在内核态启动，然后运行init进程，之后进程在用户态运行</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 这里直接new一个用户程序示例来运行</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        UserCode</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> userCode</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> UserCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        userCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">runUserProgram</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出示例</strong>（实际输出可能略有不同）：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[User] Running user code...</span></span>
<span class="line"><span>[User] An event occurred that requires kernel intervention (interrupt).</span></span>
<span class="line"><span>[Kernel] Entering kernel trap handler for: TIMER INTERRUPT</span></span>
<span class="line"><span>[Kernel] Trap handling complete, returning to user space.</span></span>
<span class="line"><span>[User] User code resumes after interrupt handling.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这段代码，你可以看到一个模拟流程：用户代码正在执行 → 遇到需要特权的事件（中断）→ 进入内核Trap处理函数（handleTrap） → 内核处理完成后返回用户态继续执行。</p><p>在真正的 xv6 中：</p><ul><li>中断发生时，硬件自动切换到内核态，压栈保存现场并跳转到特定的中断入口点。</li><li>xv6 的中断服务例程（trap handler）根据中断类型（trap number）进行处理（参考 <code>trap()</code> 函数）。</li><li>完成后通过 <code>iret</code> 指令（x86）或相应的返回机制再回到用户态继续执行。</li></ul><p>以上代码仅仅是一个高度抽象、概念化的示例，用来帮助你更直观地理解中断和陷入（trap）机制的基本工作方式。</p><h2 id="陷阱类型" tabindex="-1"><a class="header-anchor" href="#陷阱类型"><span>陷阱类型</span></a></h2><p>是的，在实际的 xv6 内核中，当出现陷阱（中断或异常）时，trap 处理函数会根据陷阱类型（trap number）来采取相应的策略。一般流程如下：</p><ol><li><p><strong>统一入口点</strong>：<br> 当 CPU 在用户态运行时发生中断、异常或系统调用陷阱时，会通过硬件机制（如中断描述符表 IDT）跳转到内核态的统一 trap 处理例程（在 xv6 中通常是 <code>trap()</code> 函数）。</p></li><li><p><strong>trap函数内部逻辑</strong>：<br> 在 <code>trap()</code> 函数中，会查看当前 trap 的类型（通过 <code>tf-&gt;trapno</code> 获取陷阱号）。每种陷阱号都对应不同的事件，例如：</p><ul><li>时钟中断（时钟中断号），用于执行进程切换或更新调度信息。</li><li>硬件设备中断（如 IDE 硬盘或 UART 串口中断），则会调用相应的驱动程序处理例程。</li><li>系统调用陷阱（<code>T_SYSCALL</code>），会调用 <code>syscall()</code> 函数，根据系统调用号执行相应的系统调用逻辑。</li><li>页故障异常（如 <code>T_PGFLT</code>），trap 会尝试处理缺页异常，如果无法处理则终止进程。</li><li>其他异常（如除零错误 <code>T_DIVIDE</code>），根据情况进行处理，例如终止有问题的进程。</li></ul><p>换句话说，每种 trap 类型在 trap 函数里都有一套对应的处理策略和逻辑分支。</p></li><li><p><strong>最终返回</strong>：<br> 处理完陷阱后，trap 例程会恢复上下文并返回到合适的地方（通常是原先的用户态进程继续执行，除非陷阱导致进程退出或切换）。</p></li></ol><p>在你之前看到的 Java 概念代码中，为了简化，只用 <code>handleTrap()</code> 函数接收一个单一字符串类型的“trapType”进行处理。实际 xv6 内核中，这段逻辑会更加复杂和精细：</p><ul><li>trap 号（trap number）是枚举值（整数常量）。</li><li>根据 trap 号可以精确区分系统调用、时钟中断、键盘中断、缺页异常、算数异常等不同情况。</li><li>每种情况都会在代码中以 <code>if</code> / <code>switch</code> 等控制流结构处理相应的逻辑。</li></ul><p>总结一下：是的，在 xv6 的陷阱处理框架中，所有可能的异常和中断类型在一个统一的处理函数（<code>trap()</code>）内会根据 trap number 进行判别，并针对各自的类型执行对应的处理策略。</p><h2 id="为啥叫-trap" tabindex="-1"><a class="header-anchor" href="#为啥叫-trap"><span>为啥叫 trap</span></a></h2><p>在操作系统设计领域中，“trap”一词有特定的技术含义。之所以使用“trap”这个名称，有以下原因和历史背景：</p><ol><li><p><strong>历史命名和传统</strong>：<br> 在早期的操作系统和计算机体系结构设计中，研究者和工程师将用户态与内核态之间的过渡机制称为“陷阱”（Trap）。这个词原本来自英文，意为“陷阱”或“诱捕”，含有使处理器“落入”内核控制的意向。也就是说，一旦用户程序触发了某种特殊的指令（如系统调用）、异常（如除零错误）或内存访问错误，CPU 就会“陷入”（Trap）到内核态的处理代码中。</p></li><li><p><strong>区别于中断(Interrupt)</strong>：<br> 尽管“trap”与“interrupt”在处理流程上有相似之处（都需要切换到内核态的处理程序），但二者侧重点不同：</p><ul><li><strong>Interrupt(中断)</strong>：通常指来自外部硬件设备的异步事件（如定时器中断、IO设备完成中断）。</li><li><strong>Trap(陷阱)</strong>：则更强调来自运行指令流本身的同步事件，如执行系统调用指令、遇到非法指令、算术异常或缺页异常。当 CPU 在执行指令的过程中“被迫”跳转到预定义的处理例程时，这个过程就叫做 trap。</li></ul></li><li><p><strong>统一异常和系统调用处理</strong>：<br> 在许多架构和操作系统中，系统调用和异常都通过 trap 机制统一进行处理。系统调用在本质上是用户程序有意通过一条特殊的“陷入”指令（如 <code>int</code> 指令、<code>syscall</code> 指令等）请求内核服务，从而使 CPU 从用户态进入内核态运行。这和异常处理（无意但同步产生的事件）在技术细节上有相似点，因此也常统一称为 trap。</p></li><li><p><strong>抽象层次</strong>：<br> “Trap”概念将所有导致模式切换的同步事件统称为陷阱，减少了对异常、系统调用、错误等概念的区分困难。程序员和操作系统设计者只需记住：当 CPU 遇到某些特殊条件（无论是故意的系统调用还是无意的异常）时，会“陷入”内核并在 <code>trap()</code> 函数内统一处理。</p></li></ol><p>简单来说，“trap”这个名称强调的是：用户程序或CPU在执行一条指令时，遇到特定条件而导致执行路径被“捕获”到内核中进行特殊处理，无论是用户主动请求的系统调用，还是程序错误导致的异常，这个动作的核心点在于 CPU 的控制流被捕获、转移到一个更高权限（内核）的执行环境，因此这个过程就叫做“trap”。</p><h2 id="除零异常" tabindex="-1"><a class="header-anchor" href="#除零异常"><span>除零异常</span></a></h2><p>在 xv6 中，除零错误对应的陷阱类型通常为 <code>T_DIVIDE</code>。在 <code>trap.h</code> 文件中有如下定义（以 xv6 源码为例）：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> T_DIVIDE</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">         0</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // divide error</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>也就是说，除零错误（divide error）的陷阱号（trap number）是 0，即 <code>T_DIVIDE = 0</code>。</p>`,25)]))}const k=s(e,[["render",t],["__file","中断陷阱.html.vue"]]),d=JSON.parse('{"path":"/1%20%E4%B8%80%E5%88%87%E7%9A%86%E9%A1%B9%E7%9B%AE/Q2%EF%BC%9A%E5%81%9ACS%E7%9A%84%E7%BB%8F%E5%85%B8lab/MIT%206.828/xv6/%E4%B8%AD%E6%96%AD%E9%99%B7%E9%98%B1.html","title":"","lang":"zh-CN","frontmatter":{"description":"下面是一段极为简化、概念性的 Java 代码，用来模拟 xv6 操作系统中“中断陷阱（interrupt/trap）”的过程。这段代码无关实际硬件，只是帮助理解概念。 在 xv6 中，当 CPU 在用户态执行用户程序时，如果发生中断（如时钟中断）或异常（如除零错误），CPU 会自动切换到内核态执行内核中的 trap 处理例程。处理例程根据中断号或异常类...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/1%20%E4%B8%80%E5%88%87%E7%9A%86%E9%A1%B9%E7%9B%AE/Q2%EF%BC%9A%E5%81%9ACS%E7%9A%84%E7%BB%8F%E5%85%B8lab/MIT%206.828/xv6/%E4%B8%AD%E6%96%AD%E9%99%B7%E9%98%B1.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:description","content":"下面是一段极为简化、概念性的 Java 代码，用来模拟 xv6 操作系统中“中断陷阱（interrupt/trap）”的过程。这段代码无关实际硬件，只是帮助理解概念。 在 xv6 中，当 CPU 在用户态执行用户程序时，如果发生中断（如时钟中断）或异常（如除零错误），CPU 会自动切换到内核态执行内核中的 trap 处理例程。处理例程根据中断号或异常类..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-23T03:18:33.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-23T03:18:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-23T03:18:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"陷阱类型","slug":"陷阱类型","link":"#陷阱类型","children":[]},{"level":2,"title":"为啥叫 trap","slug":"为啥叫-trap","link":"#为啥叫-trap","children":[]},{"level":2,"title":"除零异常","slug":"除零异常","link":"#除零异常","children":[]}],"git":{"createdTime":1734923913000,"updatedTime":1734923913000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":1}]},"readingTime":{"minutes":7.34,"words":2203},"filePathRelative":"1 一切皆项目/Q2：做CS的经典lab/MIT 6.828/xv6/中断陷阱.md","localizedDate":"2024年12月23日","autoDesc":true}');export{k as comp,d as data};
