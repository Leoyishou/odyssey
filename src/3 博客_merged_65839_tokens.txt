Directory Tree:
==============

└── 3 博客
    ├── AIGC可能并没有多强大.md
    ├── Welcome to my brain！.md
    ├── merged_content_65827_tokens.txt
    ├── obsidian 官方 publish 方案如何增加评论系统.md
    ├── odyssey_knowledge
    │   ├── graph_chunk_entity_relation.graphml
    │   ├── kv_store_full_docs.json
    │   ├── kv_store_llm_response_cache.json
    │   ├── kv_store_text_chunks.json
    │   ├── lightrag.log
    │   ├── vdb_chunks.json
    │   ├── vdb_entities.json
    │   └── vdb_relationships.json
    ├── 一千小时.md
    ├── 一千小时实战--程序员的英语学习指南.md
    ├── 人生与法治何为本？（一个任选课的作业）.md
    ├── 从大火 cursor 谈谈什么是好的软件，程序员该有危机了.md
    ├── 价值三万的健身计划.md
    ├── 关于 CS 的经典 Lab.md
    ├── 卢曼卡片盒笔记法.md
    ├── 后端开发写前端的一些思路.md
    ├── 回答网友关于英语学习的问题.md
    ├── 如何让1500一个月的ChatGPT回本？爬知乎小红书！.md
    ├── 思辨，是什么？.md
    ├── 文字与写作.md
    ├── 最佳实践
    │   ├── Markdown.md
    │   ├── pre的最佳实践.md
    │   ├── 可解释性输入的长期收益大于直觉.md
    │   ├── 学习的最佳实践.md
    │   ├── 成为程序员的最佳实践是什么.md
    │   ├── 搭建博客的最佳实践.md
    │   ├── 获取优质信息的最佳实践.md
    │   └── 设计的小技巧.md
    ├── 最佳实践.md
    ├── 比特币、共识算法、RAFT源码剖析.md
    ├── 比特币，共识算法，MIT6.824.md
    ├── 程序员的英语提高指南.md
    ├── 答辩、分享的三个要素.md
    ├── 莫言《透明的红萝卜》细节解读.md
    ├── 视频大纲
    │   ├── 从 chatgpt 转到 claude.md
    │   ├── 从番茄清单到滴答清单.md
    │   ├── 八个 Mac 上的杀手级应用.md
    │   └── 阿里听悟，免费的油管杀手.md
    ├── 随想录
    │   ├── AI 的能力到底是什么.md
    │   ├── iphone.md
    │   ├── 低级趣味与高级享受.md
    │   ├── 信息时代下，人的同化.md
    │   ├── 出厂设置.md
    │   ├── 别浪费收藏夹里的信息增益.md
    │   ├── 喜欢玩游戏不可怕.md
    │   ├── 我是谁.md
    │   ├── 维特根斯坦，与代码世界，还有小说.md
    │   └── 订阅的网络服务.md
    ├── 零门槛香港开户胎教级攻略 $.md
    └── 非科班一年转码找工作可行吗？.md

File Contents:
==============


[AIGC可能并没有多强大.md]
=================

---
draw:
tags: []
title: AIGC可能并没有多强大
date created: 2023-12-04
date modified: 2024-11-12
---
- [一、使用经历和分享内容](#%E4%B8%80%E3%80%81%E4%BD%BF%E7%94%A8%E7%BB%8F%E5%8E%86%E5%92%8C%E5%88%86%E4%BA%AB%E5%86%85%E5%AE%B9)
- [二、一些前置概念](#%E4%BA%8C%E3%80%81%E4%B8%80%E4%BA%9B%E5%89%8D%E7%BD%AE%E6%A6%82%E5%BF%B5)
	- [2.1 大模型幻觉](#2.1%20%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%B9%BB%E8%A7%89)
	- [2.2 大模型的本质是什么？](#2.2%20%E5%A4%A7%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%9C%AC%E8%B4%A8%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F)
- [三、项目一：旅行助手](#%E4%B8%89%E3%80%81%E9%A1%B9%E7%9B%AE%E4%B8%80%EF%BC%9A%E6%97%85%E8%A1%8C%E5%8A%A9%E6%89%8B)
- [四、一些概念](#%E5%9B%9B%E3%80%81%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5)
	- [4.1 AI决策](#4.1%20AI%E5%86%B3%E7%AD%96)
	- [4.2 上下文限制、embedding与向量数据库](#4.2%20%E4%B8%8A%E4%B8%8B%E6%96%87%E9%99%90%E5%88%B6%E3%80%81embedding%E4%B8%8E%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93)
	- [4.3 prompt engineering有必要吗？](#4.3%20prompt%20engineering%E6%9C%89%E5%BF%85%E8%A6%81%E5%90%97%EF%BC%9F)
	- [4.4 结果约束](#4.4%20%E7%BB%93%E6%9E%9C%E7%BA%A6%E6%9D%9F)
	- [4.5 Streaming](#4.5%20Streaming)
	- [4.6 总结](#4.6%20%E6%80%BB%E7%BB%93)
- [五、项目二：口语复盘工具](#%E4%BA%94%E3%80%81%E9%A1%B9%E7%9B%AE%E4%BA%8C%EF%BC%9A%E5%8F%A3%E8%AF%AD%E5%A4%8D%E7%9B%98%E5%B7%A5%E5%85%B7)
	- [Openai的最新API](#Openai%E7%9A%84%E6%9C%80%E6%96%B0API)
	- [展示数据处理过程](#%E5%B1%95%E7%A4%BA%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E8%BF%87%E7%A8%8B)
	- [总结](#%E6%80%BB%E7%BB%93)
- [六、避免大模型幻觉，反复确认它的真实本领](#%E5%85%AD%E3%80%81%E9%81%BF%E5%85%8D%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%B9%BB%E8%A7%89%EF%BC%8C%E5%8F%8D%E5%A4%8D%E7%A1%AE%E8%AE%A4%E5%AE%83%E7%9A%84%E7%9C%9F%E5%AE%9E%E6%9C%AC%E9%A2%86)
	- [6.1 第一类工具的范畴](#6.1%20%E7%AC%AC%E4%B8%80%E7%B1%BB%E5%B7%A5%E5%85%B7%E7%9A%84%E8%8C%83%E7%95%B4)
	- [6.2 第二类工具的范畴](#6.2%20%E7%AC%AC%E4%BA%8C%E7%B1%BB%E5%B7%A5%E5%85%B7%E7%9A%84%E8%8C%83%E7%95%B4)
- [七、总结：时刻用两类工具论审视AI发展](#%E4%B8%83%E3%80%81%E6%80%BB%E7%BB%93%EF%BC%9A%E6%97%B6%E5%88%BB%E7%94%A8%E4%B8%A4%E7%B1%BB%E5%B7%A5%E5%85%B7%E8%AE%BA%E5%AE%A1%E8%A7%86AI%E5%8F%91%E5%B1%95)
- [八、其他](#%E5%85%AB%E3%80%81%E5%85%B6%E4%BB%96)
	- [8.1 多模态的AI产品](#8.1%20%E5%A4%9A%E6%A8%A1%E6%80%81%E7%9A%84AI%E4%BA%A7%E5%93%81)
	- [8.2 怎么样快速上手一款AI产品](#8.2%20%E6%80%8E%E4%B9%88%E6%A0%B7%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%E4%B8%80%E6%AC%BEAI%E4%BA%A7%E5%93%81)
	- [8.3 怎么样获取最新的AI资讯](#8.3%20%E6%80%8E%E4%B9%88%E6%A0%B7%E8%8E%B7%E5%8F%96%E6%9C%80%E6%96%B0%E7%9A%84AI%E8%B5%84%E8%AE%AF)
		- [1. hugging face](#1.%20hugging%20face)
		- [2. youtuber：Matt Wolfe、assemblyAI](#2.%20youtuber%EF%BC%9AMatt%20Wolfe%E3%80%81assemblyAI)

## 一、使用经历和分享内容

Chatgpt、Midjourney、Elvenlabs、assemblyai  
![image.png|1000](https://cdn.jsdelivr.net/gh/Leoyishou/imageHosting@main/img/20231213162208.png)

分享内容简单介绍

## 二、一些前置概念

### 2.1 大模型幻觉

  " 大模型幻觉 " 是指人们在与大语言模型交互时可能产生的一种错觉，即错误地认为这些模型具有真正的理解能力、意识或感知。这种幻觉通常源于模型生成的文本质量非常高，能够流畅、连贯地回答问题或进行对话，使人们感觉就像是在与一个真实的、有理解力的人类交谈。  
  举一个论坛上的例子，怎么写出更好的 prompt？回答 A 介绍了一堆循序渐进的步骤，但是高赞的回答 B 说到，这一切的前提首先是它是个 prompt 专家！那么它是吗？

  

### 2.2 大模型的本质是什么？

  是人类的工具，但是无法提供情感支持。  
  有两类工具，第一种是拿来就可以解决问题，实现目标的，比如战场上的一把枪，可以对赤手空拳的敌人降维打击；第二种是拿来可以提高我们自己解决问题的能力的，比如一个哑铃，我们可以通过它练习自己的力量，从而战胜力量不如我们的敌人。

## 三、项目一：旅行助手

![image.png|1000](https://cdn.jsdelivr.net/gh/Leoyishou/imageHosting@main/img/20231213150959.png)  
![image.png|1000](https://cdn.jsdelivr.net/gh/Leoyishou/imageHosting@main/img/20231213151812.png)

langchain 只是将大模型开发的过程高度抽象化，最终 tools、agent 等都是基于老的 API 实现（在 playground 展示老的 api）
![image.png|1000](https://cdn.jsdelivr.net/gh/Leoyishou/imageHosting@main/img/20231213150655.png)  
![image.png|1000](https://cdn.jsdelivr.net/gh/Leoyishou/imageHosting@main/img/20231213151952.png)

## 四、一些概念

### 4.1 AI 决策

	traditional deterministic code

 通过大量的 if-else 或者 switch 做出确定性的逻辑判断  
![image.png|1000](https://cdn.jsdelivr.net/gh/Leoyishou/imageHosting@main/img/20231213153420.png)  
 这是大模型幻觉吗？这个决策过程是科学有效的吗？用户真的去玩了七天后，回来会满意吗？这其实是一个未验证的能力，也可能是未来 AI 发展的魅力所在，因为我们人脑可能也没有那么强的逻辑，解决一个问题时似乎也是产生一个模糊的似是而非的经验性的解决步骤。

 

### 4.2 上下文限制、embedding 与向量数据库

![image.png|1000](https://cdn.jsdelivr.net/gh/Leoyishou/imageHosting@main/img/20231213152540.png)

![image.png|1000](https://cdn.jsdelivr.net/gh/Leoyishou/imageHosting@main/img/20231213150325.png)

### 4.3 prompt engineering 有必要吗？

应用开发中是有用的！以 json 输出为例  
个人应用中性价比不高，另外对于一个黑箱，大量场景无法测试收益，设置为 template 嵌入到工具中更高效，核心是人设 + 结果约束  
![image.png|1000](https://cdn.jsdelivr.net/gh/Leoyishou/imageHosting@main/img/20231213160747.png)

### 4.4 结果约束

展示项目中的 json 约束 prompt  
![image.png|1000](https://cdn.jsdelivr.net/gh/Leoyishou/imageHosting@main/img/20231213141914.png)

### 4.5 Streaming

![image.png|1000](https://cdn.jsdelivr.net/gh/Leoyishou/imageHosting@main/img/20231213152831.png)

### 4.6 总结

- langchain 的本质：最终 tools、agent 等都是基于老的 API 实现（在 playground 展示老的 api），所有机制的实现都只是一段一段的 prompt。
- 最炫的点是通过自然语言调用本地函数

## 五、项目二：口语复盘工具

### Openai 的最新 API

使用开发者大会之后的新 api 开发（在 playground 展示新的 api）
![image.png|1000](https://cdn.jsdelivr.net/gh/Leoyishou/imageHosting@main/img/20231213151616.png)

### 展示数据处理过程

![image.png|1000](https://cdn.jsdelivr.net/gh/Leoyishou/imageHosting@main/img/20231213151451.png)  
![image.png|1000](https://cdn.jsdelivr.net/gh/Leoyishou/imageHosting@main/img/20231213151144.png)  
![image.png|1000](https://cdn.jsdelivr.net/gh/Leoyishou/imageHosting@main/img/20231213151049.png)

### 总结

- 这个工具能够奏效的逻辑起点是：对于中文，gpt 只会说没道理的话，但是不会产生不通顺的话，而通顺正是这个场景下用户的使用目的。
- 只是复盘的工具，解决不了沟通的欲望。市面上一些其他的口语 AI 应用，无法让人产生持久的交流欲望  
	是人类的工具，但是无法提供情感支持

## 六、避免大模型幻觉，反复确认它的真实本领

### 6.1 第一类工具的范畴

- 基本都是围绕着它的两个核心能力展开的，1: 语义理解 2: 一定能生成一个回答
- 检查错别字
- 降重改写
- 简单的信息检索
	- 1. 语义理解
	- 2. 适合个人对于一个新领域的冷启动，适合没有官方文档，或者官方文档不够完整或者不够有趣的前提下，提供一定的词汇扩展和交互性。
	- 3. 但是对于更细分更专门化的知识更好的选择是找到对应的群体  
![image.png|100](https://cdn.jsdelivr.net/gh/Leoyishou/imageHosting@main/img/20231213155245.png)  
![image.png|100](https://cdn.jsdelivr.net/gh/Leoyishou/imageHosting@main/img/20231213155322.png)

### 6.2 第二类工具的范畴

- 语言学习
- 对于一个新领域的冷启动，交互式初探

## 七、总结：时刻用两类工具论审视 AI 发展

	  有两类工具，第一种是拿来就可以解决问题，实现目标的，比如战场上的一把枪，可以对赤手空拳的敌人降维打击；第二种是拿来可以提高我们自己解决问题的能力的，比如一个哑铃，我们可以通过它练习自己的力量，从而战胜力量不如我们的敌人。
- 当 AI 作为第一类工具时，一定会被各种公司通过商业化制作成简单易上手的产品，对于个人来说，无需焦虑，只需享受，真的好用的 AI 产品一定会快速出圈！
- 当 AI 作为第二类工具时，更考验我们的自我规划，自我探索，热爱和自律，一个比较现实的切入点是，尽可能多得保留个人痕迹的数据。
- 信息检索和吸收能力 --> 认知能力
- 间隔重复，大量练习，时间的投入永远是个人能力的护城河
- 数据驱动&心态开放

## 八、其他

### 8.1 多模态的 AI 产品

文字、图片、视频、声音  
Midjourney  
Eleven labs

### 8.2 怎么样快速上手一款 AI 产品

1. playground 试接口（展示 [OpenAI](OpenAI.md)和、assemblyai、Eleven labs）
2. 遇到问题查 forum 或者 discord

### 8.3 怎么样获取最新的 AI 资讯

#### 1. hugging face

[Hugging Face – The AI community building the future.](https://huggingface.co/)  
![image.png|1000](https://cdn.jsdelivr.net/gh/Leoyishou/imageHosting@main/img/20231213150520.png)

The platform where the machine learning community collaborates on models, datasets, and applications.

#### 2. youtuber：Matt Wolfe、assemblyAI

![image.png|1000](https://cdn.jsdelivr.net/gh/Leoyishou/imageHosting@main/img/20231213144248.png)



[Welcome to my brain！.md]
=========================

---
draw:
tags: []
title: Welcome to my brain！
date created: 2024-10-23
date modified: 2024-12-27
---

![image.png|1000](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F11%2F12%2F01-13-27-940e914a4a2b396431a33c442512f94f-202411120113094-324476.png)

如果你需要一个闹钟的话，那么你也一定需要一个第二大脑。
『计算机科学只存在两个难题：缓存失效和命名』，学习或者知识管理也是如此。

<!-- more -->

## 一、本质

[缓存](缓存.md)，浏览维基百科的时候，可以看到很多关键性的『词汇』，标记为蓝色，并且可以点击跳转到对应的词条。再扩大一点，乃至整个互联网，无非就是将各种概念信息相互联系，能彼此间跳转的一张巨大的网络。我们可以删繁就简，随着自己对这个世界实践和认识的加深，构建起一张世界的缓存网，作为世间真理的抽象，岂不美哉！

[命名](命名.md)，每一个 [concept](2%20第二大脑/2%20飞轮/3%20项目系统/笔记系统/concept.md) 对应一种概念，本质是对世界的某个抽象，对应着的其实是编程中的命名。选择并组织好整个第二大脑的各个 node，是第二大脑的关键。目前的一个经验是，每当命名找**大词**，比如说『前端从 A 子页面跳到 B 子页面，切回来的时候仍然能看到之前的数据』，这样的表达就不如『状态管理』这一个大词好用，起码在信息保留和传递中是如此。大词往往意味着更大范围的共识和更标准化的表达，意味着更容易组织起周围的概念，意味着未来复习知识时更低的搜索成本！

也就不奇怪那句话了，『计算机科学只存在两个难题：缓存失效和命名』，学习或者知识管理也是如此。

## " 什么是好的笔记系统？"

正如 Jeff Su 所说，" 你经历的摩擦越少，笔记系统就越有效。"

1. before: 你能轻松开始做笔记吗？
2. during: 你能多快写下所有内容？
3. complete: 你能轻松的共享你的笔记吗？
4. after: 您能轻松地重新呈现相关笔记吗？

## 二、过去的怀疑

起初，我并没有那么看好第二大脑，也不是特别相信这种类似知识图谱的笔记组织方式。我甚至怀疑其可视化的美观性远远大于了它的实用性。

当然，从 [知识图谱](知识图谱.md) 的角度来看，第二大脑可能只是看起来炫酷。

知识图谱有很好的可解释性。但可解释性本身就是一个很尴尬的东西，以生成模型为例，从 GAN，到 VAE，再到 NF，模型的约束越来越大，当然可解释性也越来越强，但落地应用最广泛的却是最不可控 GAN。再往大了说，所有的深度学习方法都是不可解释的，但这并没有影响深度学习的广泛应用，当一个黑箱模型确实好用的时候，谁会去关注它内部的原理呢？

以学 Java 为例，拿搜索引擎用知识图谱分析各个技术点，不如直接找个黑马的课程，对着 JD 来学来的高效。黑马的课程设计者就类似一个不可解释的深度学习框架。凭着市场嗅觉，给出了一个课程大纲，来保证学员的竞争性。

参考：知识图谱是否是 NLP 的未来？- Maple 小七的回答 - 知乎  
https://www.zhihu.com/question/267242467/answer/1862160175

我们的大脑就是一个超级版本的不可解释的知识图谱，并且已经被证明非常 work。我们更重要的，可能是加深对于原子化的概念，也就是各个 [concept](2%20第二大脑/2%20飞轮/3%20项目系统/笔记系统/concept.md) 的理解。然后通过人类大脑对于概念的自组织的机制，强化我们的能力，拓展我们的边界。

> 这里我说的可能是 [隐形知识](隐形知识) 的概念

那我们为什么还要费尽心思再去体外构建一个呢？

## 三、可能的好处

### 为什么需要概念库？

为什么要收集定义，并借此厘清自己脑子里有哪些清晰的概念？

李笑来一直在强调概念很重要，甚至把判断聪明人的标准是脑子中有多少清晰准确的概念。

语言学家告诉我们：如果我们的大脑对一件事情没有概念，那么我们的大脑就倾向于不去想那件事情；如果一个民族的语言里缺少某个概念，那么这个民族就倾向于从未思考过那个概念。

回想自己学习和精进一个领域的过程，本质上就是对这个领域内各个重要概念不断接触 - 理解 - 领悟的过程。不管是精通一门知识，还是掌握一项技能，fundamentals 都至关重要，与之对应的，便是第二大脑的 [知识图谱](知识图谱.md) 上的一个个 [concept](2%20第二大脑/2%20飞轮/3%20项目系统/笔记系统/concept.md)。

### 为什么需要双链特性？

原子化、唯一更新处。

在概念库的基础上，会引申出另一个问题，就是重复的问题。如同 [软件工程@](软件工程@.md) 的 [设计模式@](设计模式@.md) 中对高内聚、低耦合的追求一样，我们在构建概念库的同时，最清晰的方式也是原子化地处理，一处更新则处处迭代。这就需要我们用到类似代码中引用、import 这样的特性了。OB 的 [双向链接](双向链接.md) 无疑是一个很好的实现，给了每个概念一个*唯一*更新处。我想，这一点也是极重要的。解耦之后，我们少了很多繁琐的反复定义，能专心在一处将我们对于某个概念的最新认知更新好。

就比如这篇文章，我差不多前后修改了十多次，大部分都是新认知的迭代，而这在我过去的记录方式中几乎是不可想象的。

### 为什么需要记录下来？

一、对于单个概念，避免注意力资源的重复投入。

比如 markji 中的卡片，有些之前总结的宝贵经验如果没有记录留存的话，之后过了一段时间，要对某个问题达到当时的认知，确实需要再投入一些重复的精力。一份组织好的，由自己切身总结出的知识库，确实可以避免这种重复的投入。

如果我们真的将专注力视为脑力工作者最弥足珍贵的资源，那就绝不能眼睁睁地坐视我们所取得的阶段性成果付诸东流；如果我们真的认识到生命中可用于非凡创作的时间无比珍贵，那就务必要构建起一个给力的知识系统，对各种过程性信息进行有效的回收再利用。

资产可以带来回报，而回报又可作为再投资创造其他价值。知识同样也可以随着时间推移而产生收益和复利，从而成为一种高回报的资产。就像每个月都在股市里投入一小笔资金一样，你在知识领域投入的每一分精力，都让你变得更加博学和聪慧。

二、对于整个网络，可以提示我们对于边缘节点的重视，

工作中，或者对于某个领域的学习了解中，我们常常会陷入一种境地，就是对核心概念了解比较深入了，但是对于目前的边缘概念无法很好拓展出去。一个重要的原因就是生物大脑要触达边缘概念本身就比较费力。第二大脑从整体上构建出概念网络后，其实相当于储存了我们当前网络能触达的边缘，这对于下一次的进一步拓展，其实是非常有利的。

## 混乱性

I try to embrace messiness because my brain is also messy.

### 数据结构与数据的视角

同一份数据，不同的数据结构导致 sort 的时间复杂度不同，知识可能也是如此，有效的组织可能会带来效率的提升。

## 四、操作细节

> [!最佳实践]
> 1. 每一篇 markdown 对应一个概念、文章或者方案。`$`符号结尾的是一些行动计划和执行方案，比如[托福考到100$](托福考到100$.md)，@结尾的是一些带有目录性质的概念，比如[Java@](Java@.md)。除了`$`行动方案外，其他文章的标题都尽可能用大词、术语，这是为了降低和 AI 交流，和他人交流，以及自己未来回溯搜索时的成本，因为大词就以为着更广泛的共识。
> 2. [面向对象](面向对象.md)，[原子笔记](原子笔记.md)
>    - 单个文件命名上尽量用标准化的大词，就比如『设计模式』比『高内聚低耦合的设计思想』这样的话标准化和大众接受化程度高。这样以后搜索和引用都会比较方便
>    - 当一个概念的 usage 次数足够多的时候，才拆成原子笔记/ [concept](2%20第二大脑/2%20飞轮/3%20项目系统/笔记系统/concept.md)，如果被引高，抽出来收益就比较大。反之，就像 Java 中的[内部类](内部类.md)一样。
> 3. [常青笔记](常青笔记.md)，处处留意，常常迭代。
>    - 一篇内，围绕一个概念经常性地将更新上最新的认知，保持缓存的实时性。用---语法做分割，区分出 Unstaged 区域
>    - 文件夹内，随项目进度不断移动和调整file tree，一般是按照 最近项目->第二大脑和博客的方向做沉淀。Just do it！The most valuable notes I have today would never come to be if I needed to think about a folder or category for it.
> 4. [最佳实践](最佳实践.md)，将一些总结出的最佳实践用call out 语法 hightlight 出来。

整体是从信息 -> 知识 -> 习惯和智慧 的一个过程  
![image.png|1000](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F09%2F29%2F11-56-56-af81333825b6dabd4f2320f56690cd8c-202409291156311-ac525e.png)

1. [滴答清单](滴答清单.md)做 inbox 收集闪念笔记
2. 项目驱动, 制定方案，吸收信息，项目结束后，信息部分归入 2.1，项目部分归入 2.3
3. 结构化吸收新信息，逐步沉淀吸收，从知识-> 沉淀
4. 一些输出性质的东西放到 3 博客部分
5. 整个文档做版本控制，基于 commit 的 diff 定期做 AI 复盘

```shell
├── 1 一切皆项目           
├── 2 第二大脑            
│   ├── 1 知识
│   ├── 2 沉淀
│   ├── 3 存档
│   └── PARA.md
├── 3 博客
├── 4 复盘
│   ├── 2024-10-10.md
│   ├── 2024-10-11.md
│   ├── 2024-10-12.md
│   ├── 2024-10-13.md
│   ├── 2024-10-15.md
```

> **比如记录「反常识」「人名」「术语」**，「反常识」主要是用来拓展认知边界；「人名」是找到知识源头的创造者；「术语」是找到知识的源头  
> [📥 为何收藏无用 | flomo 101 (flomoapp.com)](https://help.flomoapp.com/thinking/stop-fav.html)

![image.png#pic_center|650](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F06%2F11%2F15-54-33-93ecdfc66154666a85ca72a0cf3b4320-20240611155433-abfdd0.png)

如果你有这个问题，推荐阅读我们撰写的 flomo 方法：

- [用自己的话，写卡片](https://help.flomoapp.com/method/use-card.html)（阅读需 3 分钟）
- [用标签，让结构生长](https://help.flomoapp.com/method/use-tag.html)（阅读需 4 分钟）
- [用回顾，持续刺激记忆](https://help.flomoapp.com/method/use-review.html)（阅读需 4 分钟）

第一次主动输出 -> 有规则组织输出成果 -> 第二次避免注意力重复投入 -> 有新认知能继续更新

形成 [习惯](习惯) -> 降低心智负担

## 它山之石

- obsidian 官方，obsidian 部署，[Obsidian 中文帮助 - Obsidian Publish](https://publish.obsidian.md/help-zh/)
- 在读博士 - 落山鸡，obsidian 部署，[Obsidian中文教程 - Obsidian Publish](https://publish.obsidian.md/chinesehelp)
- 后端程序员，群友，logseq 部署，[https://notes.singee.me](https://notes.singee.me/)
- 学生，群友，jekyll 部署，[骏豪的梦呓小站](https://notes.zustcv.fun)
- 设计师，obsidian 部署，[chi's memory - chi's memory - Obsidian Publish](https://publish.obsidian.md/chiux/chi's+memory)
- [2022-08-24](2022-08-24) 收录
	- sspai 作者，vuepress 部署，[LearnData 开源笔记 | LearnData-开源笔记](https://newzone.top/)
- [2023-03-21](2023-03-21) 更新
	- 网友，quartz 部署，[知识Cool😊](https://ob.tianzhongs.ml)  
[Quartz Showcase (jzhao.xyz)](https://quartz.jzhao.xyz/showcase)  
[Digital Garden - Publish Obsidian Notes For Free (ole.dev)](https://dg-docs.ole.dev/)
- [Knowledge - Nikita Voloboev](https://github.com/nikitavoloboev/knowledge) is the one that made me discover this concept, I really love the way he structure things.  
    [知识 - Nikita Voloboev](https://github.com/nikitavoloboev/knowledge)是让我发现这个概念的人,我真的很喜欢他组织事物的方式。
- [Maggie Appleton](https://maggieappleton.com/garden-history), mostly about second brain and productivity  
    [玛吉·阿普尔顿](https://maggieappleton.com/garden-history),主要关于第二大脑和生产力
- [Ness Lab - Anne-Laure LeCunff](https://nesslabs.com/), awesome articles about productivity, mindfulness, neurosciences...  
    [Ness Lab - 安-勒库夫](https://nesslabs.com/),关于生产力、正念和神经科学的优秀文章...
- [Joel Hooks](https://joelhooks.com/), various things, mostly about programming with a great manifesto on digital gardening  
    [乔尔·胡克斯](https://joelhooks.com/)，各种各样的事情,主要是关于编程,还有一篇很棒的关于数字园艺的宣言
- [Tynan](https://tynan.com/), I don't think Tynan will call he's blog a digital garden, but it's very close to. About investing and travels  
    [泰南](https://tynan.com/)，我不认为泰南会把他的博客称为数字花园,但这非常接近。关于投资和旅行
- [Notes - Andy Matuschak](https://notes.andymatuschak.org/About_these_notes), one of the most iconic digital garden. Mostly on software, ed-tech, research...  
    [笔记 - Andy Matuschak](https://notes.andymatuschak.org/About_these_notes),这是最具标志性的数字花园之一。主要关注软件、教育技术、研究等方面。
- [Paul Graham's notes](http://www.paulgraham.com/index.html), from one of the most iconic entrepreneurs.  
    [保罗·格雷厄姆的笔记](http://www.paulgraham.com/index.html)，来自最具标志性的企业家之一。


- [Nikita Voloboev's favorites  
    尼基塔·沃洛勃耶夫的最喜欢的](https://docs.google.com/spreadsheets/d/1KtEjnuZEHxUmoiA37_MMM4OFyQcbwVUaLBFa12P8cnU/edit#gid=0)
- [A digital gardeners spreadsheet  
    一个数字园丁的电子表格](https://docs.google.com/spreadsheets/d/1KtEjnuZEHxUmoiA37_MMM4OFyQcbwVUaLBFa12P8cnU/edit#gid=0)
- [Second-Brain list on Github  
    Github 上的第二大脑列表](https://github.com/KasperZutterman/Second-Brain)

## 过程容器

因此我通过 Obsidian 来写作，进行思考。笔记软件就是我思考过程的运行时载体，也就是思考的过程容器。

就像平时思考总会中断，或不完善。笔记库有很多笔记没写完整，或只是挖了个坑，待以后有新的机缘巧合可以引用、填充和迭代。生命不息，挖坑不止。

同时也是一个 [博客](博客.md) 的功能，在博客区输出一些东西，来对抗[知识诅咒](知识诅咒.md)。

[渐进式](渐进式.md)



[obsidian 官方 publish 方案如何增加评论系统.md]
===================================

---
draw:
tags: []
title: obsidian 官方 publish 方案如何增加评论系统
date created: 2024-07-15
date modified: 2025-01-21
---

关于评论系统的更换。

前几天有位朋友给我留言，让我挺受感动的：

Eason²⁰²⁰：

Hi, 初次造访，你的知识储备让我感到震撼，我会向你学习:smile:

本来想回复他，可是来必力的评论竟然无法在页面下显示，让我颇为郁闷，网上查阅了相关资料后依旧没有解决，所以最后决定更换成valine评论系统，目前感觉确实更好用一些，不过之前的评论是没法迁移过来了（尽管比较少），这里还是稍微有点可惜。

评论系统参考资料（leancloud）记得选国际版：

[https://yuanmomo.net/2019/06/20/hexo-add-valine/](https://yuanmomo.net/2019/06/20/hexo-add-valine/)

[https://tding.top/archives/ed8b904f.html](https://tding.top/archives/ed8b904f.html)

[http://www.zhaojun.im/hexo-valine-admin/](http://www.zhaojun.im/hexo-valine-admin/)

[https://github.com/DesertsP/Valine-Admin](https://github.com/DesertsP/Valine-Admin)

[https://mrhuanhao.cn/2020/03/25/emailreply/](https://mrhuanhao.cn/2020/03/25/emailreply/)

备注：

leancloud数据迁移参考资料：

[https://felixxiong.github.io/2020/09/25/LeanCloud%E8%BF%81%E7%A7%BB%E8%87%B3%E5%9B%BD%E9%99%85%E7%89%88/](https://felixxiong.github.io/2020/09/25/LeanCloud%E8%BF%81%E7%A7%BB%E8%87%B3%E5%9B%BD%E9%99%85%E7%89%88/)

这里补充下邮件提醒碰到的坑

## [](https://doraemonzzz.com/2020/10/17/%E6%9B%B4%E6%8D%A2%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/#%E9%82%AE%E4%BB%B6%E6%8F%90%E9%86%92 "邮件提醒")邮件提醒

- SMTP_PASS为授权码
- 如果用自己的邮箱留言，应该是不会收到邮件提醒的。
- 535报错：[https://moxiaoqin.club/post/valine-pei-zhi-bo-ke-pei-zhi-you-xiang-ti-xing-chu-xian-535jie-jue-fang-an/](https://moxiaoqin.club/post/valine-pei-zhi-bo-ke-pei-zhi-you-xiang-ti-xing-chu-xian-535jie-jue-fang-an/)

[Integrating Comments in Obsidian Publish - Sparrow's Digital Garden](https://garden.sparrow.zone/Integrating+Comments+in+Obsidian+Publish)

obsidian 的官方发布方案无疑是最省心最方便的一种笔记发布方式，遗憾的是，其并没有提供原生的评论系统。我们可以利用其 publish.js 文件的机制手动添加。

评论系统的方案可以参考 [博客评论](博客评论.md) 中列举的，这里选择了比较轻量化的 utterances

下面是 publish.js 的代码

```javascript
console.log("publish.js script started");

function addUtterancesIframe() {
  console.log("addUtterancesIframe function called");

  const scriptContainer = document.createElement('div');
  scriptContainer.id = 'utterances-container';
  scriptContainer.style.width = '60%';  // Set the width to 60%
  scriptContainer.style.marginTop = '20px';
  scriptContainer.style.float = 'left';  // Align to the left

  const script = document.createElement('script');
  script.src = 'https://utteranc.es/client.js';
  script.setAttribute('repo', 'Leoyishou/brain.liugongzi.org');
  script.setAttribute('issue-term', 'pathname');
  script.setAttribute('theme', 'github-light');
  script.crossOrigin = 'anonymous';
  script.async = true;

  scriptContainer.appendChild(script);

  console.log("Utterances script created");

  function checkAndInsert() {
    const markdownView = document.querySelector('.markdown-preview-view');
    if (markdownView) {
      markdownView.appendChild(scriptContainer);
      console.log("Utterances script appended to the markdown view");
    } else {
      console.log("Error: Could not find .markdown-preview-view element, retrying in 500ms");
      setTimeout(checkAndInsert, 500);
    }
  }

  checkAndInsert();
}

function initTest() {
  console.log("initTest function called");
  if (document.readyState === 'complete') {
    console.log("Document already complete, adding iframes immediately");
    addUtterancesIframe();
  } else {
    console.log("Document not yet complete, adding load event listener");
    window.addEventListener('load', addUtterancesIframe);
  }
}

initTest();
```



[一千小时.md]
=========

---
draw:
title: 一千小时
date created: 2024-03-19
date modified: 2025-02-14
---

一千小时这个阈值却很奇妙，它不那么短，但坚持下来不容易，它也没有很久，但是也已足见一些分晓。

<!-- more -->

周末阅读了李笑来的一千小时的书籍，这个人虽然似乎因为割韭菜在币圈名声不太好，但是这本书中的很多东西还是引起了自己极大的共鸣。因为截止工作之前，自己在编程和英语上面刚好各刻意投入了一千个小时，分别达到了入行工作和基本听说读写的水平。一万小时 master 的期许对于年轻人来说往往遥遥无期，难以感知，但一千小时这个阈值却很奇妙，它不那么短，但坚持下来不容易，它也没有很久，但是也已足见一些分晓。基于此，在思考两个问题：一是：当下的中国，英语和编程无疑是个人知识方面的两个最大杠杆，那么我自己的下一个 1000h 应该投入到哪个方面，说白了就是 top3 是什么？二是：英语和编程天然具备数字化的优势，整个学习的过程，一台电脑就可以 manage，做一些数字化的反馈，但是其他领域呢？比如一项运动技能，通过录音录像吗？尤其是在目前大模型底座 context 越来越大的背景下，这个问题值得深思。

- top3 是健身与营养学



[一千小时实战--程序员的英语学习指南.md]
=======================

---
draw:
tags: []
title: 一千小时实战--程序员的英语学习指南
date created: 2024-12-22
date modified: 2025-01-13
---

## 程序员的英语学习指南——千小时实战

> _作者按：_  
> 如果把我们的英语能力想象成一堵结实的墙，那么每一个"单词的音形义"映射就像是"一块砖"。只有不断地、系统地筑起这些砖，才能最终形成听说读写的综合能力。借助今天各种数字化工具与 AI，程序员完全可以找到一条高效、可行的英语学习之路，而这一切的核心都离不开"刻意练习"与"科学规划"。

---

从一个午后说起，大二或者大三的一个中午，自己在食堂打饭，伴随着正午的阳光，一个念头突然袭来。为什么从小学三年级开始接触英语，已经十年了，但是我似乎从未真正拥有过这项能力？来自山西的我，高考甚至没有英语听力，哪怕学了十年，可是对于任何一段英语音频，我都像天书一样疑惑。挫败感涌上了心头。
大四前的那个暑假，开始准备考研了，时间紧任务重，对于英语这个科目我并没有太多时间去准备。获取了词频意识。
读研的时候希望能战胜听力，用之前的词频意识，在没有 AI 的时代东搜西搜居然写了一套爬虫的代码，破解了听力之谜，callback 了那个午后。
后来又希望自己能主动输出（写作、听力），无意中在淘宝找到了很便宜的外教资源，正宗的美音外教可以用 30 人民币每小时的价格获取，我就开始了录屏上课，听录音复盘，记忆的日复一日的循环，最终达到了一个基本的外语自然交流，并能讨论一定深度的话题的能力。

对英语的学习，伴随了自己转码前后的整个时间，希望用程序员的视角去讲清楚这件事，如何拿下这件事，真正形成能力。不管是个人信息源的拓展、能力的发展还是为数字游民的未来打下基础提供一些帮助。
在此过程中几乎遍览了简中互联网上所有知名点的和英语学习相关的资源，注意，我说的是所有！

### 1. 英语是最简单的知识 / "图结构"

#### 1.1 为什么说英语是最简单的"图结构"？

- **英语学习**在所有知识领域中相对简单，具备清晰的输入输出体系（读、听、写、说）。
- 大部分中国程序员在学校接受过多年的英语教育，却往往卡在了"无法输出"或"读不顺畅"上；究其原因，很多时候并不是缺少努力，而是缺少**行之有效的"间隔复习"与"刻意练习"机制**。

#### 1.2 我们需要怎样的"刻意练习"？

- 没有"刻意练习"，就没有"可被追踪的进步"。程序员写代码会依赖单元测试、代码审查等方式来发现问题、改进方案；同理，学习英语也需要一套可以持续反馈并不断校正的流程。
- 在当下，背单词工具 Anki、墨墨背单词等都提供了优秀的**间隔复习算法**和**复习调度**，让我们能精准地分配时间。再结合足够的沉浸式输入（听力、阅读）与实时互动（口语、写作），才能构建起稳固的能力结构。

#### 1.3 "一千小时"的许诺

- 程序员常说，要成为某个领域的"熟手"需投入"一千小时"的练习，这是一个并不玄乎的"量变到质变"门槛。对英语学习来说，也需要在各种场景下**真刀真枪**地花够时间。
- 每一个小时都要确保有明确的**练习目的**和**方法**，把"混时间"变成"高质量沉浸"。一千小时后，英语能力自然会得到跨越式提升。

### 2. 英语学习的本质：四个 Map

在思考如何形成语言能力时，可以把**英语能力**视为四种**输入输出**之间的映射关系——

|映射|形式|举例|备注|
|---|---|---|---|
|**看到符号 → 脑中意**|**阅读**|看见单词 _scientist_ 能立刻想起"科学家"|被动型映射，典型的阅读场景|
|**声音 → 脑中意**|**听力**|听见 _obligation_ 能秒懂"义务"|被动型映射，典型的听力场景|
|**脑中意 → 声音**|**口语**|想说"科学家正在探索前沿领域"，即可脱口而出|主动型映射，典型的口语场景|
|**脑中意 → 书写符号**|**写作**|想写"Fulfilling our obligation is essential."|主动型映射，典型的写作场景|

- **被动型映射**（阅读、听力）：最典型的就是读懂、听懂。
- **主动型映射**（写作、口语）：最典型的就是写出、说出。

从认知角度看，这四个方向的背后都是**音、形、义**的互相匹配与调用。某个单词如果能被你**读懂**，那在掌握了音标的前提下，也通常能被你**听懂**。同理，如果能**写出**某个单词，也多半能**说出**它（口语可能还需部分发音训练，但差距不大）。

---

### 3. 记忆的本质：反馈调节的 Queue

#### 3.1 为什么间隔复习（Spaced Repetition）如此重要？

- **人类记忆具有遗忘曲线**。如果不反复复习，所学内容很快就会"消退"。
- **Anki**、墨墨背单词等工具，都在帮助我们更科学地安排复习时间与频次，以最少的时间巩固最多的知识点。
- 对程序员来说，可以把间隔复习看作是一种**缓存替换策略**（如 LRU、LFU）的思想：把需要被"缓存"（记住）的单词在恰当的时机进行"更新"，从而保证"内存命中率"最大化。

### 什么单词更值得先记住？排序算法

1. **词频驱动**：优先记忆核心高频词，比如借助 [COCA](https://chatgpt.com/c/COCA.md)（美国当代英语语料库）或其他爬虫统计数据，对高频词进行重点攻破。
2. **场景驱动**：围绕自己日常或工作环境（如技术文档、会议沟通、常见聊天话题）中的高频单词，打造针对性的词库。
3. **主动驱动 vs 被动驱动**：
    - "主动"指的是你有计划地主动去获取资料、设置场景对话并刻意练习；
    - "被动"指的是当你碰到新单词或外文文章时，立即用 Anki 或别的工具进行记录、整理并跟进复习。

> **提示：**
>
> - 词频并不是唯一依据，有时你的业务领域可能出现一些高专业度、但频次不高的词汇，也需要纳入重点攻克。
> - 无论"场景驱动"还是"词频驱动"，关键在于执行和回看效果，动态调整策略。

#### 3.3 具体工具与实践

- **Anki** 演示：自定义卡片格式，把"单词-中文意思-发音（或音标）-例句"等信息录入，配置好间隔复习策略。
- **墨墨背单词**：提供了完善的记忆曲线设计、熟词跳过等功能，也可以满足不同学习阶段需求。
- **听力/口语**：
    - 基础听力可用 [KMF](https://chatgpt.com/c/KMF.md) 等平台进行系统化训练；
    - 沉浸互动可通过 [cambly](https://chatgpt.com/c/cambly.md)、[OpenAI](https://chatgpt.com/c/OpenAI.md) + 语音 API（如 [AssemblyAI](https://chatgpt.com/c/AssemblyAI.md)、[ElevenLabs](https://chatgpt.com/c/ElevenLabs.md)）等方式，为自己创造语言输出的环境。
- **写作**：
    - 多使用 [Viva](https://chatgpt.com/c/Viva) 这类工具，或者在线的**英语写作辅助工具**；
    - 在 [Telegram Bot](https://chatgpt.com/c/Telegram%20Bot) 或其他渠道，与 AI 进行实时对话并获得纠错反馈。

---

### 4. 程序员思维：把英语"数据结构化"

#### 4.1 第一性原理：不漏掉任何"信息墒"

- 作为程序员，常思考如何把**数据结构**与**算法**的思想应用到英语学习上：
    - **信息组织**：每个单词相当于一个节点；通过词形变换、搭配、语法规则，形成网络关系。
    - **索引与检索**：借助数据库思想，把所有输入输出都记录在可检索的工具（Anki、笔记系统）中，以备后续多次查询、复习、升级。
- **"为什么要排序？"**——因为我们要从最高频处开始，或者从最想掌握的业务场景开始，这跟数据库的优先级调度同理。

#### 4.2 为什么时间管理至关重要？

- 程序员的项目管理理念：要有看板、要有迭代、要有可度量的进步指标。
- 对应到英语学习中，也需要：
    - **MVP**（最小可行产品）：一个最小的词表或最核心的语法点，先练习起来，做出"能输出、能阅读"的雏形。
    - **迭代**：按照"学-用-反馈"的节奏周期迭代，不断拓展词汇，拓展场景，丰富表达。
    - **评估与度量**：定期查看 Anki 统计或考试模拟成绩，确认进步情况，及时复盘。

---

### 5. 实践案例：从阅读到口语，再到写作

#### 5.1 阅读（看到符号 = 脑中意）

- 建议先建立一个**输入的"底层词汇表"**。可以用自己平常阅读的英文文档/技术博客进行词频统计，然后导入 Anki 或墨墨背单词里。
- 积累一定规模的"被动词汇"后，通过常见的**技术文档**、**英文原著**或**官方文档**，结合 [COCA](https://chatgpt.com/c/COCA.md) 的词频信息，继续深耕。
- 当你能轻松读懂一些英文技术文档时，你的"阅读"映射已经基本稳固。

#### 5.2 听力（声音 = 脑中意）

这个 Object 多了一个成员变量是音标，对应的数据结构是国际音标，是需要快速掌握的元能力

- **听力是上限**：很多时候，能读懂的词汇却听不出来。
- 解决方法：**基于音标学习** + **大量泛听 + 精听**。
- 可以从一些技术类播客、YouTube 讲解或 [KMF](https://chatgpt.com/c/KMF.md) 真题开始，每天都要保证有**一定时长的听力输入**。
- 保持"泛听—精听—重听"这几种模式交替，刺激大脑形成牢固的声音→语义连接。

#### 5.3 口语（脑中意 = 声音）

- **口语是下限**：如果你能流利地说，通常意味着对应的话题词汇、句型都比较熟悉；但想突破口音、流利度，还要进行额外的口部肌肉与发音练习。
- 推荐使用 [cambly](https://chatgpt.com/c/cambly.md) 或其他线上外教平台，有条件的可以组队练习；或者与 [OpenAI](https://chatgpt.com/c/OpenAI.md) 聊天机器人结合语音输入，做自我对话。
- **刻意"输出"**：抓住任何机会，比如在线会议时多说几句英文，或在某些国外技术社区直接用英文提问、回答。

#### 5.4 写作（脑中意 = 书写符号）

- **写作是上限**：能写出复杂句子，说明你对词汇、语法有了更高级的掌握；和口语类似，输出时能暴露知识漏洞。
- 推荐：**结合 GitHub、技术论坛、邮件**等实际工作场景进行英语写作。
- 也可以尝试搭建个人博客或在公司内分享英文技术文档，循序渐进练习。
- 借助 **AI 辅助写作**工具（如 GPT、[Viva](https://chatgpt.com/c/Viva)），用它们来做语法、用词方面的初步纠正，然后保留错漏记录进行二次学习。

---

### 6. 展望与思考：让 AI 成为你的"数字化大脑"

#### 6.1 超越语言：其它复杂知识领域的同理心

- 英语只是一种形式，我们也可以思考把同样的"刻意练习 + 数据结构 + 间隔复习"模式迁移到编程、数学、音乐等更宏大的知识网络。
- 当**Google眼镜**乃至更先进的记录设备出现时，我们也许能实时记录并索引整个学习过程，彻底解放大脑的容量。
- 语言本质上是一种**有损压缩**，任何语言都无法百分之百传递我们的内心想法，但随着 AI 赋能，信息传递的准确度与效率会更高。

#### 6.2 "Taste"时代：审美力与创造力

- 大模型时代，看似信息唾手可得，但**审美力**与**创造力**才是核心竞争力。
- 在英语学习中，学会如何判断哪些表达更有"高级感"或更能准确传情达意，也是一种"taste"的训练。
- 当 AI 工具足够成熟，面对"批量翻译/润色/总结"这类任务，我们更需要思考的是如何让英语为我们的**创新**与**思考**服务。

#### 6.3 与其追求"英语思维"，不如先"学好山西话"

- 语言环境是"思维"的母体。所谓"英语思维"，本质上是建立在当地生活与长期沉浸之上，而非一朝一夕就能"玄学变身"。
- 类似地，如果你想学方言，只有先掌握足够的词汇表达与语音符号，才能进一步深入体会当地文化和思维方式。

---

### 7. 总结：程序员学英语，先用"数据结构"做规划

1. **把英语拆解成四种映射**（读、听、写、说），针对性地加强各自模块。
2. **借助 Anki、墨墨背单词等工具**落实间隔复习，并持续在工作/生活中用起来。
3. **场景驱动 + 词频驱动**结合，动态调整自己的学习计划。
4. **记录与度量**（MVP、迭代、数据可视化），让你的进步有据可查。
5. **打通数字化工具链**（语音识别、文本生成、写作辅助），让学习效率更高。
6. **千小时实战**：足够的量变，才能带来质变。确保每天都有"高质量沉浸与输出"。

> _写在最后：_  
> 学英语就像搭积木，没有哪一块积木是多余的，也没有哪一块能让你一蹴而就。程序员的优势在于对数据和流程的敏感度，只要把这些"砖块"用心堆砌，在实践与迭代中修正，我们终能用英语自如表达。愿你能在这条路上坚持下去，等到回头再看，会发现一千小时不算什么——那只是一个更大舞台的开始。

---



[人生与法治何为本？（一个任选课的作业）.md]
========================

---
draw:
tags: []
title: 人生与法治何为本？（一个任选课的作业）
date created: 2024-07-14
date modified: 2024-11-12
---

![image.png|1000](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F07%2F17%2F11-42-24-35a7b7303c8e9403751ec424affe0414-20240717114223-c7cfbb.png)

人生与法治，什么才是根本呢，我以为答案是不言而喻的。就算将法治的外延扩展为秩序，答案也是如此。小时候我一定是不会有这样的认知的。慢慢长大，有很多不可解之事，想着想着，我才想通这个道理。举两个最近的例子说吧，之前看了一部纪录片《国家监察》，有很多落马省委书记现身说法，我很惊异。在中国的体制之下，省委书记，一方大员，在无数的事务上有着相当的影响力，可是其行径呢，令人侧目，甚至惊诧。不难想象，当一个地区的最高权力者都如此的时候，对于一个几十万平方公里，几千万人民土地上的政治生态会有怎样的影响。这样一个无视法治的权力者会对这块土地上的法治践履造成怎样的破坏。

另一个例子，是一个革命老兵，两个一等功一个特等功，那应该是黄继光邱少云之类的人物了，可是连这些军功章也只是无意中孩子发现的，问起他的事迹，这位将近九十岁的老人说他已经忘记了。对，已经忘记了！

我在这里无意去讨论前者的龌龊、后者的善良。我在他们身上，看到的是一种意义的消解。一个是世俗规范中的最恶者，一个是世俗规范中的最善者，前者接受惩罚，但我相信有很多也已安全着陆，后者无意于奖赏，甚至已然忘却。我相信很多这两种人中，前者不以为恶，后者不以为善。难道你只能称后一种为人生吗？有恶贯满盈的人生，有默默奉献的人生，有浪子回头的人生，也有老实人接盘的人生。

但我相信，如果让他们回忆一生，一定都不会加上这样的冠词，因为这些都来自于秩序意义。他们能想起的，只有童年时的幸与不幸，青年时的爱与不爱，壮年时的成功与落寞，晚年时的充盈与孤寂。他们更在乎自己的体验。有的人以华衣美眷为体验，有的人以给人方便为体验。他们不会说自己是个好人还是坏人，是个秩序者还是破坏者。有的人自我体验与社会意义想谐，那么便会得到更多的世俗利益。有的人相违背，或许独善其身，严重的就会被彻底消灭，比如枪毙。可那也都是人生吧。所有的意义归于个体都被消解了。

同样这样的消解也适用于家庭。无论你在共同秩序中处于怎样的位置，一个家庭中他总会将这些东西消解。我记得之前落马的常委周永康，有个儿子，从来不参与家庭的事情，自己开一个书店，也不会受到牵连。也有很多罪恶滔天的人会受到家庭的理解与体谅，杀人犯的母亲也同样只把他当一个孩子。或正向或反向，都是意义消解的结果。

可能我是一个很唯心的人吧，我未看此花时，此花与汝同归于寂，我来看此花时，则此花颜色一时明白起来。人生是一个和宇宙一样大的概念。我相信，当我漂流瀚海，沉浮一生，法治一定只是其中的一个元素，不是说它不重要，吃饭也重要，可吃饭也只算人生的一部分吧。我们需要它，但也包括它。



[从大火 cursor 谈谈什么是好的软件，程序员该有危机了.md]
==================================

---
draw:
tags: []
title: 从大火 cursor 谈谈什么是好的软件，程序员该有危机了
date created: 2024-09-17
date modified: 2024-11-12
---

## 小小的复制粘贴就价值十亿美金吗？Paste

1. 文件维度
	- request 侧：自动添加上下文，@一键添加
	- Response 侧：基于 diff 的 inline 式的 apply 和 reject
2. 项目维度
	- 项目结构
	- new 文件
3. 模型抽象
4. AI review，以前自己试过 github 里的 action 实现
	1. Review Working State
	2. Review Diff with Main Branch
	3. Review Last Commit
5. terminal AI

## 后端、软件的本质

data in， data out

douyin 的券和瑞幸的打通

所有让 data flow 更丝滑的软件（这本身就意味着效率和生产力），都是好软件！挖掘 data flow中数据规律的，都是牛逼软件！

Apple Intelligence

## 我们自身目前的竞争力

- 基于人脑 index 的超大 context 能力

## 机会点

1. 资金杠杆
2. 人力杠杆
	- CPU杠杆/代码杠杆
3. 信息杠杆
	- 软件、自媒体



[价值三万的健身计划.md]
==============

---
draw:
tags: []
title: 价值三万的健身计划
date created: 2024-07-22
date modified: 2024-11-12
---

第一阶段：体重降到 67.5  
第二阶段：能够完成一个自重引体  
第三阶段：卧推、硬拉、深蹲分别达到 1 倍、2 倍、1.5 倍体重  
第四阶段：纵向弹跳 or 体脂率

## 减重

## 引体向上

## 减脂、髋、后侧链

可以观察一下这个阶段的 [减脂](减脂.md) 速度，看看有没有因为肌肉含量提高，代谢增加，而变得更快。



[关于 CS 的经典 Lab.md]
==================

---
draw:
tags: []
title: 关于 CS 的经典 Lab
date created: 2025-01-01
date modified: 2025-01-27
---

随着实验的一步步做下来，本质就像做一个需求一样。

一步步熟悉不同的类，里面的代码逻辑细节，从而和过去的抽象的知识（端上的产品）结合起来的过程。

---

- **选好公开课与其配套Lab**
    
    - **操作系统**：MIT 6.828 (xv6)、Harvard CS161、清华OS课程(UCore) 等
    - **分布式系统**：MIT 6.824 (Golang实现 Raft)、CMU 15-440 (网络/分布式系统) 等
    - **数据库**：CMU 15-445 (C++实现 DB Lab)、MIT 6.830 (Java 版 MiniSQL)  
        除此以外，还可以关注Stanford CS144(网络)、CMU 15-213(CSAPP对并发与网络的实践) 等。
- **Lab 驱动，重视 debug 与设计思考**
    
    - 碰到无法通过的测试，不要只顾埋头改bug，要反思：系统抽象、接口、并发或锁策略、性能瓶颈……
    - 将自己卡住的问题做记录，然后查资料/看论文/看别人的代码思路，培养系统思考与调试习惯。
- **阅读论文或经典著作**
    
    - 课堂中会让你读一批论文 (如 GFS、MapReduce、BigTable、Spanner、FaRM)；在读论文时可多做笔记，关注问题、思路和权衡。
    - 常见书籍：CSAPP、DDIA(数据密集型应用系统设计)、Dragon Book(编译原理)、SICP(程序构造与解释)等，都能让你拓展眼界。
- **多总结：构建自我知识脉络**  
    分布式系统、操作系统、数据库三者有许多共通之处：
    
    - 都涉及并发、锁、日志、recovery
    - 都需要追求高性能与可靠性
    - 都离不开对硬件资源(磁盘、内存、网络)的高效利用  
        建议在学完一门课、一篇论文后，都要尝试做一个知识地图（思维导图）或概念小结，把细节规整起来，形成自己的一份"知识体系"，方便融会贯通。

## 四、面对海量课程与知识的思考

- **不要急于一时"全学完"**  
    MIT、Stanford、CMU 等课程琳琅满目，一时半会想都刷完往往难以坚持。最好根据自己未来打算深入的方向(如后端开发、系统内核、分布式数据库等)选 1~2 门公开课 + lab 认真完成即可。
- **实践与理论并重**  
    课程lab 通常覆盖了不少核心实现细节，但仍只是个雏形。若有精力，可自己再做小型项目(如写个精简 Redis、KV存储、RPC框架等)；或阅读知名开源项目(MariaDB、TiDB、Redis、Nginx)的内核源码，进一步提升工程能力与品味。
- **建立多维度的思考方式**  
    在做lab时，多想想"这个设计为什么？它的替代方案是什么？对性能/一致性/部署带来何种影响？" 这些思考往往比单纯 coding 重要得多。

确实如此。在很多计算机专业的经典 Lab（如 Stanford CS144、MIT 6.S081、Berkeley CS162 等）里，大家常常会发现这些实验的设计思路就像是**分阶段完成一个"真实项目"**一样。

- **前期**往往从最基础的模块入手。例如在网络课程中，一开始先让你实现一个对字节流进行简单处理的类（如 `StreamReassembler`），这看起来只是一个很小的功能，但它正是后续网络协议栈上更复杂功能的**基石**。
- **中期**进一步加层，比如加上 TCP 协议中的序列号、重传、拥塞控制或其他功能，你可能会在原先搭好的"基石"之上，去修改、扩展或抽象出更多的类和接口。
- **后期**当你把所有组件都做完并且集成到一起时，就会发现——原来这些分散的模块，其实正是一个"微缩版"的**完整 TCP/IP 协议栈**、或一个"微缩版"的操作系统核心组件、或其他大型系统的一部分。

这样一步步下来，你会发现：

1. **知识的抽象与落地**
    
    - 之前在课程或书本里学到的概念（TCP 乱序重组/窗口机制、操作系统的进程管理/虚存机制等）都比较抽象。
    - 做实验时，你需要自己写代码去实现具体功能；实现时会发现许多实际的细节处理、性能考虑、边界情况和错误处理等等，这些部分是课堂里只是一带而过，或者很难在纯理论中感受得到的。
2. **对已有架构的"需求"意识**
    
    - 就像你提到的——"本质就像做一个需求一样"。
    - 一开始，我们往往会收到一份"功能需求"（比如"需要一个能处理乱序分段的模块"），并且会看到测试用例或自动评分脚本，它们相当于"验收标准"。
    - 你在实现的过程中，需要思考如何设计代码结构、如何把功能拆分为若干个类或方法、以及如何处理数据流在模块之间的流转。
    - 最后，这些逻辑都和实际的网络产品、操作系统产品或数据库产品等等对上了，因为他们也要做同样（或更复杂）的需求，只是规模更大、更完善。
3. **工程化思维**
    
    - 这些实验通常也会模拟一些**工程化**的习惯或流程，比如给你一套测试框架、一份自动化脚本，或要求你写单元测试等等。
    - 通过这样的过程，就能更清晰地知道——"哦，原来做一个真正可用、可维护的网络协议栈/操作系统，需要从头到尾经历规划、设计、编码、测试、迭代这些环节。"
    - 等你日后去做更大的项目时，这些套路就能**举一反三**，而不是"闭门造车"或仅仅停留在理论阶段。

综上所述，**一步步熟悉不同的类及其功能逻辑、再把它们跟抽象概念联系起来**——就是这些实验想达到的教学目标：让我们把课本中的**概念**真正转变成能够解决现实问题、可以跑起来的**代码**。这样，在你完成所有实验后，不仅对相关理论有了更踏实的理解，同时也掌握了"把需求落地为具体实现"的过程和方法。



[卢曼卡片盒笔记法.md]
=============

---
draw:
tags: []
title: 卢曼卡片盒笔记法
date created: 2024-08-10
date modified: 2024-11-12
---

闪念笔记，不错过任何一个思考的结果



[后端开发写前端的一些思路.md]
=================

---
draw:
tags: []
title: 后端开发写前端的一些思路
date created: 2024-07-29
date modified: 2024-12-27
---

上周在优化报价组的排查工具，主要是写一些前端。总结了一下，作为后端开发，写前端关注两个点就够了：

1. 首先是从数据和交互的角度出发，为各种类型的数据选择合适的组件
2. 其次是从用户体验出发找到合适的样式风格。之前就感觉像饿了么，得物，Instagram 整体风格比较简洁，美团相对就比较乱，在完善工具样式的时候，发现前面这一普遍类都采用了**高饱和度白色背景，小图标，大留白**的风格，所以能给人以整洁干净的感受。

<!-- more -->

- [总体风格](#%E6%80%BB%E4%BD%93%E9%A3%8E%E6%A0%BC)
- [一个好的搜索框是什么样的？](#%E4%B8%80%E4%B8%AA%E5%A5%BD%E7%9A%84%E6%90%9C%E7%B4%A2%E6%A1%86%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%EF%BC%9F)
- [好的详情页是什么样的？](#%E5%A5%BD%E7%9A%84%E8%AF%A6%E6%83%85%E9%A1%B5%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%EF%BC%9F)
	- [卡片风格](#%E5%8D%A1%E7%89%87%E9%A3%8E%E6%A0%BC)
	- [重要信息前置](#%E9%87%8D%E8%A6%81%E4%BF%A1%E6%81%AF%E5%89%8D%E7%BD%AE)
		- [枚举性质数据用高亮表示](#%E6%9E%9A%E4%B8%BE%E6%80%A7%E8%B4%A8%E6%95%B0%E6%8D%AE%E7%94%A8%E9%AB%98%E4%BA%AE%E8%A1%A8%E7%A4%BA)
		- [时间轴设计](#%E6%97%B6%E9%97%B4%E8%BD%B4%E8%AE%BE%E8%AE%A1)
		- [重要字段便于复制](#%E9%87%8D%E8%A6%81%E5%AD%97%E6%AE%B5%E4%BE%BF%E4%BA%8E%E5%A4%8D%E5%88%B6)
		- [图标表意](#%E5%9B%BE%E6%A0%87%E8%A1%A8%E6%84%8F)
	- [必要信息](#%E5%BF%85%E8%A6%81%E4%BF%A1%E6%81%AF)
		- [默认展开](#%E9%BB%98%E8%AE%A4%E5%B1%95%E5%BC%80)
		- [表头凸显](#%E8%A1%A8%E5%A4%B4%E5%87%B8%E6%98%BE)
		- [表格规整](#%E8%A1%A8%E6%A0%BC%E8%A7%84%E6%95%B4)
		- [两列 diff 高亮设计](#%E4%B8%A4%E5%88%97%20diff%20%E9%AB%98%E4%BA%AE%E8%AE%BE%E8%AE%A1)
- [溯源工具 - 视口](#%E6%BA%AF%E6%BA%90%E5%B7%A5%E5%85%B7%20-%20%E8%A7%86%E5%8F%A3)

## 总体风格

![image.png|1000](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F07%2F18%2F20-41-15-68faf1a7ec15e6e86680bc2d8432b3fd-20240718204114-c50473.png)

![image.png|1000](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F07%2F18%2F20-40-11-836eae405e4cb42d05ec2e43f64dd99c-20240718204010-ab86f4.png)

![image.png|1000](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F07%2F18%2F20-29-41-7a5cdea97fdc5926f4fe42241d7c9758-20240718202939-98d492.png)

## 一个好的搜索框是什么样的？

![image.png|1000](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F07%2F18%2F20-43-37-7aa750c4886e7a8a4a3697437a684833-20240718204336-76d847.png)  
![image.png|1000](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F07%2F18%2F20-43-51-5c383e9625d96348af3f91ce9973ccaf-20240718204351-96793d.png)  
![image.png|1000](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F07%2F18%2F22-49-47-2c97155760b34719278f2ecef19bef6e-20240718224946-ecf14e.png)

![image.png|1000](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F07%2F18%2F20-31-24-0be3e213b255199785b167ee1dbbdbe7-20240718203123-6dbb41.png)

1. 搜索前
	1. all in on，只有一个框，前端做判断 `const trimmedValue = traceIdOrOrderNo.value.trim()` `trimmedValue.startsWith("ops_slugger_")`  
![image.png|1000](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F07%2F25%2F22-20-00-6597385ff758caea268cc7b675c4a955-20240725221959-a6f594.png)

	2. 支持回车，在输入框上添加了 `@keyup.enter="debouncedSearch"` 事件处理，允许用户按回车键搜索。
2. 搜索中 [防抖搜索](防抖搜索.md) 功能: 使用 `lodash` 的 `debounce` 函数来创建一个防抖的搜索函数,这可以有效地减少不必要的 API 调用。
	1. 转圈  
![image.png|1000](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F07%2F18%2F20-50-07-b1fa58d410b0283a972225878f32fca3-20240718205007-aaa148.png)
3. 搜索后
	1. 成功失败提示  
![image.png|1000](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F07%2F18%2F20-50-33-d7ba3cb770080d4bdbb1c57898462122-20240718205032-1979b4.png)

## 好的详情页是什么样的？

### 卡片风格

三板斧：card、圆角、阴影

![image.png|1000](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F07%2F18%2F21-01-48-7928d67174e928f47725ae7cc167f4aa-20240718210147-c5808b.png)

```js
<el-card shadow="always" round class="box-card">

.box-card {  
  border-radius: 10px;  
  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);  
  padding-top: 1px;  
  margin-top: 30px;  
  margin-bottom: 30px; /* 增加下边距 */
}
```

![image.png|1000](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F07%2F18%2F20-57-31-46c877dbd4f9b63289c0c66010ab67b7-20240718205730-91247b.png)

### 重要信息前置

![image.png|1000](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F07%2F18%2F20-55-34-1596ccda367a13aa4cbd98c9fe9517d2-20240718205534-71dc55.png)

![image.png|1000](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F07%2F18%2F20-54-26-ed21462953a2f844ba6bf8b6d1e81c04-20240718205425-7339de.png)

#### 枚举性质数据用高亮表示

![image.png|300](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F07%2F18%2F21-11-26-58a150f03afcf8c747139315ef229e10-20240718211126-a63a24.png)

#### 时间轴设计

![image.png|500](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F07%2F18%2F21-11-41-f4a089ff3005012351271f4460efc432-20240718211140-16a08f.png)

#### 重要字段便于复制

#### 图标表意

![image.png|500](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F07%2F18%2F21-12-02-6912fe52ab2f36fb92bb81948f046358-20240718211202-750a78.png)

### 必要信息

#### 默认展开

![image.png|1000](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F07%2F18%2F20-55-34-1596ccda367a13aa4cbd98c9fe9517d2-20240718205534-71dc55.png)

#### 表头凸显

![image.png|1000](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F07%2F18%2F20-55-15-8c5c42fb22ef666f36e5e0803594f2bb-20240718205514-6053c3.png)

#### 表格规整

![image.png|1000](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F07%2F18%2F21-08-06-a0176b1472cfeb78420aa954b4608924-20240718210805-c64bcd.png)

#### 两列 diff 高亮设计

忽略小数位数的 diff

```js
// 比较每个元素，忽略小数位数  
return oldArr.some((oldVal, index) => {  
  const oldNum = parseFloat(oldVal);  
  const newNum = parseFloat(newArr[index]);  
  
  // 如果解析失败（非数字），直接比较字符串  
  if (isNaN(oldNum) || isNaN(newNum)) {  
    return oldVal !== newArr[index];  
  }  
  
  // 比较整数部分  
  return Math.floor(oldNum) !== Math.floor(newNum);  
});
```

## 溯源工具 - 视口

![image.png|1000](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F07%2F19%2F15-02-47-ff7821ba74995e70a0cd5e18c6b404be-20240719150245-90ac8d.png)

- 定义：
    - 不同于 px 固定高度，% 表示相对父元素的比例，视口是浏览器中实际显示网页内容的部分。不包括浏览器的工具栏、滚动条等界面元素。使用 vw 单位：1vw 等于视口宽度的 1%。
    - 100vw 表示整个视口的宽度。
- 响应式设计中的作用：
    - 允许设计根据不同设备的视口大小自动调整布局。
    - 帮助创建在各种屏幕尺寸上都能良好显示的网页。

```css
.iframe-container {
  height: 90vh;
  width: 87vw; 
  overflow: hidden; 
}

.iframe-main {
  padding: 0; 
  height: 100%;
}

.full-iframe {
  width: 100%;
  height: 100%;
  border: none; 
  display: block; 
}
```



[回答网友关于英语学习的问题.md]
==================

---
draw:
tags: []
title: 回答网友关于英语学习的问题
date created: 2024-07-29
date modified: 2024-11-12
---

昨天测单词的时候能体会的，好多点不认识的单词其实都见过。；；；非常不想把学英语变得目的性很强，很不情愿去做一件事情。；；；当然 duolingo 之前学的 4000+ 生词以及 高频 2000，我也会再导到墨墨去记。

非常不想把学英语变得目的性很强，很不情愿去做一件事情。

> 学习的愉悦和乐趣非常重要，另外如何保持一定的疼痛感和持续走出舒适圈，有指标去衡量自己的持续进步，而不是自己骗自己式、自我感动、原地打转的学习，这是我通过自学考研、学英语、转码这三个千小时级的项目中得到的最深刻的教训。围绕这个话题有很多可以说的，并不是简单逼自己，或者简单去找容易的乐趣那么简单就能说清楚。

7.28 昨天和我弟，聊了大概一个半小时，他的学英语经历。毕竟自家人聊天没成本，哈哈。他是高中英语就很好，**高考 150 经常 145+**，他给我说的主语原因是：高二在没任何电子设备的情况下，把六级词汇背完了；后面 4 级 6 级一直都是裸考，6 级他 630+。但是他六级前也都是哑巴英语。

> 这意味着基础的 [语法](语法) 体系的掌握、[音标](音标.md) 体系的掌握

他那两个月练口语的方式就是明读和复诉，

> 前提是基础的语法体系的掌握、音标体系的掌握

很不情愿说这些，因为这某种程度在否定你的计划。。。

> 我的并不是一份计划，我给你的建议只是我花了很长时间接受这么多信息后自己甄别好坏的一个认知的传递。这也是当我自己进入一个较新的领域时最渴望得到的东西。
> 比如你说的『自然拼读法』、『或者自己喜欢的英文歌，拆成一句一句 ANKI 正面背面卡片去读，』我都花时间实践过，将我自己实践之后的感受变成一个简单粗暴的结论给你，来节约你的时间。
> 我觉得更有价值的是对要做成这件事各个方面需要到什么程度，包括最后怎么衡量自己能力的认知（四种映射的数量，这个应该是最有价值的）

雅思考了 3 次才上岸，第一次口语只有 5.5，不过准备两个月就听力阅读 8.5，写作 7，口语 6.5（据说他发挥的要比 6.5 好，可能大陆压分了）。他并没有经历和老外聊天对话的那个过程，所以可能口语词汇的激活并不是想象中一定又得从 O 打怪升级？

> 我说过，最终指标只有一个就是主动词汇映射的数量，至于怎么获得无所谓，我课中甚至举过极端的例子，拿着中文挨个背一遍  
> 另外，我可以大胆假设，他高考和六级的这个水平的话，他从未对你的境遇有过切实的感受，他在最初接触英语的时候，语法和音标就有个比较牢固的基础。他分享是有 [知识诅咒](知识诅咒.md) 的（可以查一下这个词），也可能带了三分轻而易举的炫示，另外他不会有充足的时间思考对于你的情况该如何提升。想象 60 分的基础对他来说是一件很难的事情，相信我。亲戚并不意味着信息传递的严谨，但是编辑过的文字一定比随口的语音严谨。

我觉得学习的过程是一个不断反思的过程，要找到适合自己的路径，才有可能坚持。学英语干人干面，就像前天我们聊到最后，其实只要能坚持下去的方法都是好方法，个人观点仅供参考。

> 嗯，如果只用一句话概括或者形容，肯定想办法坚持到最后是王道。
> 我的所有所谓的建议、计划都只是给你一个辅助的参考信息而已。我相信这也是进入任何领域初来乍到之时，最值钱的东西。你怎么实现，与我无关，你也不必介怀。但是我随时可以根据我自己的认知给你反馈。
> 回到疼痛感的话题，这是一个非常值得研究的点。如果能结合自己的情况找到一个最 effective 的档位，那么做什么都会无往而不利。可以看马斯克的一个采访，问他最大的挑战，犹豫很久后的答案是 [Corrective feedback Loop](Corrective%20feedback%20Loop.md)



[如何让1500一个月的ChatGPT回本？爬知乎小红书！.md]
=================================

---
draw:
tags: []
title: 如何让1500一个月的ChatGPT回本？爬知乎小红书！
date created: 2025-01-27
date modified: 2025-01-27
---
1. 思考力资源、注意力资源 -> 信息吞吐量变了
2. 爬取内容 https://github.com/NanmiCoder/MediaCrawler
3. AI 总结：
	1. https://aistudio.google.com/prompts/new_chat
	2. https://www.deepseek.com/
	3. o1 pro、o1
	4. claude
4. notebooklm

 加餐：利用好一切前端小技巧 => 信息的吞吐量！信息熵！



[思辨，是什么？.md]
============

---
draw:
tags: []
title: 思辨，是什么？
date created: 2024-09-17
date modified: 2024-11-12
---

真正的思辨不是育良书记的辩证法，把话正着说反着说的诡辩论。而是，当一群人都向你介绍他最牛逼的时候，你能靠思辨能力慢慢琢磨出谁才是最牛逼的。找到了最牛逼的三五个之后，又能靠思辨能力品鉴出每个人不一样的牛逼之处，而摒弃了最初非要分个高下的分别之心。
所以，所谓思辨，一是为了避免上当受骗，二是为了审美。



[文字与写作.md]
==========

---
draw:
tags: []
title: 文字与写作
date created: 2024-09-17
date modified: 2024-11-12
---

我是一个文字方面有些做天赋的人。

中学的时候就以细腻的文笔，和文章的思想有一点小小的名气。上了大学之后，开始放空自己，会写一些诗歌，动笔的文章并不多。

但是说来也可笑，后来读研的三年，我几乎很少动笔。虽然专业是考古，一个貌似会很频繁地与写作打交道的学问。

工作之后，试用期要求每天写日报。这个时候我才又一次地频繁与文字打起了交道，也得到了当时的领导的鼓励。后来大量的文档写作中，慢慢融合了技术表达和思想表达的风格，随着对 Obsidian 的熟悉，自己慢慢写起了这个网站。



[最佳实践/Markdown.md]
==================

---
draw:
title: Markdown
tags: [最佳实践]
date created: 2024-03-28
date modified: 2024-12-27
---

Markdown 是 bit 赠予世界的笔，就像 code style 一样，Linter 是个很好的风格固化工具！

<!-- more -->

- [ ] 探索一段时间 linter 后把配置信息粘贴到这里就可以了 ⏰ 2024-05-07 📅 2024-05-07

大标题和小标题之间要有内容过渡

## 标题

标题要简短，结尾不带标点符号。
（源码上）标题前后空一行（段前距和段后距）。

### 层级

正文的标题从 ```Java  
段落1（这里是第一行）

段落2（这里其实是第三行）
```2 开始，```Java  
段落1（这里是第一行）

段落2（这里其实是第三行）

```3 要留给整篇文章的标题（也可以不写）。这样的大纲结构也可以很方便地转换为思维导图（Markdown to [Xmind](https://www.xmind.cn/) / [MindNode](https://mindnode.com/) / [幕布](https://mubu.com/) / [百度脑图](http://naotu.baidu.com/)……），也符合 SEO（搜索引擎优化）的规则。

谨慎使用四级标题（除非是长文章）。如果三级标题下有并列性的内容，可以使用加粗、有序列表或无序列表代表末级标题。

标题要避免孤立编号（即同级标题只有一个）

> Markdown 是 bit 赠予世界的笔

1. 手工排序
2. 自动排序
3. 巧妙！

## 序列号

序列号之前空一行，不然有的 markdown 渲染器不能正常缩进

序列号之中如果有代码块，需要将代码块整体向后缩进，不然有的 markdown 渲染器会截断序列号

## 空格

中文和数字或者英文之间应该有一个空格的距离

## 中文博客排版指南

### 标题

正确：（Markdown 语法）

```markdown
# 文章的标题

## 文章内容的一级标题

### 文章内容的二级标题

#### 文章内容的三级标题
```

原则：

（1）文章内容的标题一般用 ```Java  
段落1（这里是第一行）

段落2（这里其实是第三行）
```4 和 ```Java  
段落1（这里是第一行）

段落2（这里其实是第三行）
```5。为保证层级的简单，请尽量避免出现 ```Java  
段落1（这里是第一行）

段落2（这里其实是第三行）

```6 的标题。

（2）为保证标题的连贯性，```Java
段落1（这里是第一行）

段落2（这里其实是第三行）
```7 的标题下不要直接出现 ```Java
段落1（这里是第一行）

段落2（这里其实是第三行）
```8 的标题。

### 图片

#### 1、图片大小

为方便网络传输，且保证清晰度，图片大小尽量控制在**100 KB**至**500 KB**之间。

如果图片过大，可以使用网址 <https://tinypng.com/> 进行压缩；如果图片不够清晰，请重新制图。

#### 2、图片格式

![](https://img.oldwinter.top/20190908_2238.png)

静态图片用 png、jpg 格式。

动态图用 gif 格式。gif 动图可以使用软件 [LICEcap](https://www.cockos.com/licecap/) 录制屏幕生成。

**gif 图的帧数不要超过 300 帧**，否则无法上传到公众号。一般情况下，gif 图的大小控制在 500kb 以内，基本能符合要求。

#### 3、图片文件名

图片的文件名使用**当前时间戳**，格式：```Java
段落1（这里是第一行）

段落2（这里其实是第三行）
```9。格式举例：

```Java
20190902_1010.png

20180228_1505.jpg

20180616_1618.gif
```

#### 4、截图工具

- 最常用的截图工具：[Snipaste](https://zh.snipaste.com/)
- 截图时可带阴影的截图工具：[Xnip](https://zh.xnipapp.com/)、[iShot](https://sspai.com/post/57302)
- gif 录屏工具：[LICEcap](https://www.cockos.com/licecap/)

#### 5、流程图制作工具

- 流程图、思维导图（在线）：<https://www.processon.com>
- 思维导图（在线）：<https://naotu.baidu.com>
- 思维导图（本地）：<https://www.xmind.cn>
- 列清单、思维导图（在线）：<https://mubu.com>

#### 6、图片素材网站

- <https://unsplash.com>

Unsplash 是国外知名度最高的免费高清网站（图片素材免费、无版权），是现代年轻人喜欢的 ins 简约风，到处都充满生活剪影。

- <https://pixabay.com>

免费正版高清图片素材库。

### Markdown 规范

#### 1、换行

每两段的中间，需要空出一行。

正确：

```Java
段落1（这里是第一行）

段落2（这里其实是第三行）
```

错误：

```Java
段落1（这里是第一行）
段落2（这里是第二行）
```

#### 2、四级标题

文中的四级标题，请不要用 ```Java  
段落1（这里是第一行）
段落2（这里是第二行）

```0，建议使用加粗文本即可。

正确：

```Java
**我是四级标题**：
```

错误：（四级标题渲染出来的字体大小，其实跟普通文本差不多，所以不要用）

```Java
#### 我是四级标题
```

### 空格

#### 中英文之间需要增加空格

正确：

```Java
任何可以使用 JavaScript 来编写的应用，最终都会由 JavaScript 编写。
```

错误：

```Java
任何可以使用JavaScript来编写的应用，最终都会由JavaScript编写。
```

#### 中文和数字之间需要增加空格

正确：

```Java
一年有 12 个月。
```

错误：

```Java
一年有12个月。
```

#### 数字和单位之间需要加空格

正确：

```Java
20190902_1010.png

20180228_1505.jpg

20180616_1618.gif
```0

错误：

```Java
20190902_1010.png

20180228_1505.jpg

20180616_1618.gif
```1

#### 完整的英文整句时标点与单词之间需要加空格

正确：

```Java
20190902_1010.png

20180228_1505.jpg

20180616_1618.gif
```2

错误：

```Java
20190902_1010.png

20180228_1505.jpg

20180616_1618.gif
```3

#### 例外：度的标志、百分号不加空格

正确：

```Java
20190902_1010.png

20180228_1505.jpg

20180616_1618.gif
```4

#### 例外：全角标点与其他字符之间不加空格

正确：

```Java
20190902_1010.png

20180228_1505.jpg

20180616_1618.gif
```5

### 专有名词使用正确的大小写

正确：

```Java
20190902_1010.png

20180228_1505.jpg

20180616_1618.gif
```6

错误：

```Java
20190902_1010.png

20180228_1505.jpg

20180616_1618.gif
```7

正确：

```Java
20190902_1010.png

20180228_1505.jpg

20180616_1618.gif
```8

### 标点

#### 关于全角和半角

简单来说，全角占两个字节，半角占一个字节。你可以理解成中文汉字和中文标点是全角，英文字母和英文标点是半角。体现在排版上的差异就是，全角字符屏幕打印宽度是两个，而半角字符屏幕打印宽度是一个，如中文逗号和英文逗号他们的显示分别是「，」和「,」。

更详细的介绍，可以查看维基百科的词条「[全角和半角](https://zh.wikipedia.org/wiki/%E5%85%A8%E5%BD%A2%E5%92%8C%E5%8D%8A%E5%BD%A2)」

#### 使用全角中文标点

中文排版中，所有的标点都应该使用全角中文标点。

示例：

```Java
20190902_1010.png

20180228_1505.jpg

20180616_1618.gif
```9

#### 遇到英文整句、特殊名词时使用半角标点

示例：

```Java
段落1（这里是第一行）

段落2（这里其实是第三行）
```0

### 需要特别强调的词，建议用直角引号

示例：

```Java
段落1（这里是第一行）

段落2（这里其实是第三行）
```1

### 图床工具

写文章免不了要做图片传图片，推荐使用 [PicGo](https://molunerfinn.com/PicGo/) 工具，不论屏幕截图、还是复制图片，都可以自动上传、保存 Markdown 格式的链接，直接粘贴插入。

对了，在使用 PicGo 之前，先要保证你要有一个保存图片的图床服务器，配置到 PicGo 上，然后再让 PicGo 帮你生成图片的 url 链接。

### 公众号 Markdown 编辑器推荐

> 市面上常见的、大众的、小众的、在线版的 Mardown 排版工具，都在这儿了。

> 大部分排版工具，可以针对外链，自动生成脚注。

#### 可能吧排版

- 网址<：https://knb.im/mp/>

#### Rabbit Hole 微信排版编辑器

- 网址：https://rabbit.zoepi.online

无广告、沉浸式写作、支持定制化主题、审美在线、一键复制后即可发布 的排版编辑器。免登陆＋免费使用。

详细介绍：[Juicing 工具篇——「Rabbit Hole」微信排版编辑器上线](https://mp.weixin.qq.com/s/JOZsf4CL0yY_yj70gjlacw)、[Juicing Juice 导论 | 一份榨汁机说明书](https://mp.weixin.qq.com/s/aMJHXw57oOYzQwGJGdTVag)

#### Markdown 在线编辑器

- <https://markdown.com.cn/editor/>

#### lab.lyric.im 排版

- markdown 在线转换工具：<https://lab.lyric.im/wxformat>

歌词经理作品。

#### zkqiang.cn 排版

- 网址：<http://prod.zkqiang.cn/wxeditor/index.html>

#### aclickall.com 排版

- 网址：<http://md.aclickall.com/>

#### openwrite 排版

- 网址：<https://md.openwrite.cn/>

#### mdnice 排版

- mdnice 网址：<https://www.mdnice.com/>

这个 markdown 排版网站用的人挺多，在程序员的圈子流传很广。但自 2020 年 10 月底开始，需要登录才能使用；它已经不再单纯是一个排版工具了，逐渐向社区演进，略显臃肿。

### 文本纠错

写作猫（文本纠错网站）：<https://xiezuocat.com/>

### 参考链接

- [《中文技术文档的写作规范》](https://github.com/ruanyf/document-style-guide)
- [《写给大家看的中文排版指南》](https://zhuanlan.zhihu.com/p/20506092)
- [《中文文案排版指北》](https://github.com/sparanoid/chinese-copywriting-guidelines)
- [《中文排版指南》](https://github.com/ctf-wiki/ctf-wiki/wiki/%E4%B8%AD%E6%96%87%E6%8E%92%E7%89%88%E6%8C%87%E5%8D%97)
- [《README 文档的规范写法》](https://github.com/AweiLoveAndroid/CommonDevKnowledge/blob/master/github_README/README%E6%96%87%E6%A1%A3%E7%9A%84%E8%A7%84%E8%8C%83%E5%86%99%E6%B3%95.md)
- [stormzhang | 每个人都需要的中文排版指南](https://mp.weixin.qq.com/s/k5DAmYtMrdSlK1jHsW-hrg)
- [《这是曹将公众号排版的所有秘密！》](https://mp.weixin.qq.com/s/DEUUcO4FhCiIYmh61wGXnw)
- [文章排版规范](https://wiki-power.com/#/post/%E6%95%88%E7%8E%87/%E6%96%87%E7%AB%A0%E6%8E%92%E7%89%88%E8%A7%84%E8%8C%83)

---

### 出处

[GitHub - qianguyihao/document-guide: 中文博客的排版指南。](https://github.com/qianguyihao/document-guide)



[最佳实践/pre的最佳实践.md]
==================

---
draw:
title: pre的最佳实践
tags: [最佳实践]
date created: 2024-04-09
date modified: 2024-12-27
---

excerpt

<!-- more -->

- pre 准备，其实第一优先级的是自我逻辑，因为这会极大影响现场发挥的状态，一个事情换一百种方式讲给别人中，留下的大家认识的子集是一次 pre 的底色，其他的临场因素是能出彩的点。
- 复杂问题的讲解，是否可以 demo 先行，抽象后行。
- 意识到组内周会【RDQA 结果介绍】部分的重要性，这是感知行业动态，熟悉产品策略的一个很好的机会。
- 在完成需求的时候，新增的逻辑如果仅仅通过 if~else 来完成，虽然可以降低风险、快速完成需求，但是会带来代码的冗余性，逻辑不够简洁，长此以往代码就变的晦涩难懂、排查问题难度加大。如果遇见以前老代码存在不和合理或者新增逻辑后不能够很好的适配，在 排期时间内可以进行小范围的重构，简洁明了的代码是靠大家日常工作中共同维护的。并且重构的过程也是锻炼自己思考和创新的过程。期待后续的需求你能自己发现代码的优化点并实现，加油！在导师的帮助下重构了【FD-208543 变价消息支持 seq】的代码，使得这次新增逻辑的改动范围更加容易测试和定位，减少了代码的冗余。
- 这周有一个对于日报的思考，起因是发现一些曾经学习过的，甚至当天写在日报里的东西，过了一段时间后自己还是忘了，甚至翻找都很麻烦。我想底层的原因是日报天然的独立性，不太容易增量地呈现信息。对于某时刻的状态来说，可能过去日报的有些信息成了 nonsense 的东西，而另一些当时的心得经验由于没有及时地复习和框架性地归纳白白流失。自己过去每天发完邮件会把自己的日报更新到 wiki，所以决定改进一下自己的这个动作，变为增量更新。只是 merge 进去一些新东西，减少工作量的同时，保证了定期的回顾和思考，利用好自己产出的信息。
- 解决需求时，实践了培训中学到的最小 commit 原则，尽可能细地拆分任务，让每一个最小单元的动作十分清晰，同时将 commit 维度也与其对齐，保证 commit message 的规范。好处是在任务执行中，对于之前的操作都能及时定位和 undo，今天的需求中有大量的 replace，涉及的监控埋点比较多，不是很清楚替换逻辑时，利用这个方法提高了出现 undo 时的解决效率。
- 名与实的距离，领域知识的理解和代码实现之间存在一定的鸿沟，当我们用自然语言表述一件事时往往存在语义上的含糊，甚至代码中变量与方法的取名也是如此，代码的准确性无非来自于每个变量和方法被逻辑门牢牢卡在了一个地方，才有了所谓逻辑上的清晰边界。如何减少这个鸿沟，似乎是软件开发一个永恒的话题。从实践上来讲，个人感觉比较好操作的是两方面，一是不吝啬于编码中取名的长度，赋予更准确、贴合领域知识的命名。二是保持代码和注释的同步更新，不让注释腐化。
- 个人提效上，作为一个程序员，我觉得应该具有天然的对重复的警觉性，任何的操作（无论是工作向还是个人向），如果有五次以上的重复，都应该考虑做工具提效了，希望自己能做好这一点，并在这个过程中了解其他语言或者工具，保持技术上的开放性。



[最佳实践/可解释性输入的长期收益大于直觉.md]
=========================

---
draw:
title: 可解释性输入的长期收益大于直觉
tags: [最佳实践]
date created: 2024-04-07
date modified: 2024-11-12
---

可解释性输入的长期收益大于直觉！

<!-- more -->



[最佳实践/学习的最佳实践.md]
=================

---
draw:
title: 学习的最佳实践
tags: [最佳实践]
date created: 2024-04-03
date modified: 2024-11-12
---

学习本身也是有套路的！

<!-- more -->

刻意练习包含了三个步骤。
第一，找字典：找到你要学习的这个领域体系的范式（pattern）；
第二，找题和答案：针对每个范式刻意的反复学习和练习；
第三，改错：及时反馈。

helloworld 式、[MVP](MVP.md)：先跑起来！比如做博客，先跑起来一个再逐个点去完善，对于逐个点也是，先 run 再精进。这背后其实是一种广度优先的结构化思维。



[最佳实践/成为程序员的最佳实践是什么.md]
=======================

---
draw:
title: 成为程序员的最佳实践是什么
tags: [最佳实践]
date created: 2024-03-31
date modified: 2024-11-12
---

![Picture7.png|400](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/Picture7.png?x-oss-process=image/resize,l_400)

开始 > 完成 > 完美

<!-- more -->

如果是说初期想入行的话，感觉最佳实践就是 B 站找一个培训班课程开始上手，写一行见到一行的效果，才有动力开始和坚持。

如果是说一步步成为大佬的话，一个可能的最佳实践也许是把北大飞猪整理的名校课程资源好好啃一遍，希望我以后有这个时间和兴趣吧，哈。

[CS自学指南 (csdiy.wiki)](https://csdiy.wiki/)

- 第一阶段，crud boy 调包侠，只追求把业务流程串起来完成各个需求，脚本式开发。代码风格较随意，无容错告警监控意识。系统裸奔，逐步形成烟囱式难维护的大泥球。不直接和业务沟通，主管分配任务专心写代码。
- 第二阶段，意识到系统生命周期最长的是维护期，可读性很重要，开始注意代码风格，[设计模式](设计模式)使用，有些面向对象思维。并上监控告警容错能力，但是没有成体系。系统设计仍是优先数据库思维，并且系统基于需求进行迭代，而需求是个性化不稳定的，导致系统跟着需求走，逐渐腐化。独立负责需求，和业务方基于需求维度沟通顺畅。
- 第三阶段，知道分布式系统设计的套路，知道关注系统的性能，可用性，可扩展性，一致性，资源占用率等。关注系统指标并且持续运营。知道技术选型对比，并能根据业务现状和增量情况，给出最合适设计方案。设计思维变为领域驱动设计，以系统建设平台能力来支撑需求接入，让个性化不稳定的需求来依赖平台化稳定的系统，而不是相反。基于平台能力，评估需求是否合理，对于排期许诺慎重。
- 再往上的阶段就是软实力的提升，在把事情做成落地后，做自己的技术影响力，内部赛马，把自己负责的盘子搞大，争取资源。



[最佳实践/搭建博客的最佳实践.md]
===================

---
draw:
title: 搭建博客的最佳实践
tags: [最佳实践]
date created: 2024-03-21
date modified: 2024-12-27
---

![Picture4.png|400](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/Picture4.png?x-oss-process=image/resize,l_400)

搭建博客的第一性原理是，快速构建一个符合自己审美的，带着常见博客功能的网站，放置自己的文字，促进自己的写作，培养互联网声望。

<!-- more -->

## [](https://liugongzi.org/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E7%9B%AE%E5%BD%95 "目录") 目录

- [以终为始，找到有结果的人！](https://liugongzi.org/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E4%BB%A5%E7%BB%88%E4%B8%BA%E5%A7%8B%EF%BC%8C%E6%89%BE%E5%88%B0%E6%9C%89%E7%BB%93%E6%9E%9C%E7%9A%84%E4%BA%BA%EF%BC%81)
    - [为什么](https://liugongzi.org/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E4%B8%BA%E4%BB%80%E4%B9%88)
    - [脚手架 hexo](https://liugongzi.org/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E8%84%9A%E6%89%8B%E6%9E%B6%20hexo)
    - [本地 obsidian](https://liugongzi.org/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E6%9C%AC%E5%9C%B0%20obsidian)
    - [域名和服务器](https://liugongzi.org/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E5%9F%9F%E5%90%8D%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8)
    - [插入视频](https://liugongzi.org/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E6%8F%92%E5%85%A5%E8%A7%86%E9%A2%91)
    - [字数统计与阅读时长](https://liugongzi.org/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1%E4%B8%8E%E9%98%85%E8%AF%BB%E6%97%B6%E9%95%BF)
    - [评论系统](https://liugongzi.org/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F)
    - [模版设置](https://liugongzi.org/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E6%A8%A1%E7%89%88%E8%AE%BE%E7%BD%AE)
    - [图片](https://liugongzi.org/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E5%9B%BE%E7%89%87)
    - [定时任务](https://liugongzi.org/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1)
    - [参考资料：](https://liugongzi.org/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99%EF%BC%9A)

## [](https://liugongzi.org/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#1-%E4%B8%8D%E5%90%8C%E5%8D%9A%E5%AE%A2%E7%B1%BB%E5%9E%8B%E7%9A%84%E9%80%89%E6%8B%A9 "1. 不同博客类型的选择")1. 不同博客类型的选择

目前搭建个人网站主要有两种选择：

- 动态网站：通常包括前端和后端两个部分，是通过数据库进行架构的网站，用户访问时网站会从数据库中提取信息并实时变更网站内容。这种网站通常利于维护、可交互性强，功能相对强大，但网站本身更加臃肿，用户访问时网页的打开速度也较慢。主流的动态博客框架有 Wordpress、Typecho 等。
- 静态网站：指全部通过 html 代码格式页面组成、所有内容都保存在 html 页面中的网站。可维护性较差，修改网页内容需要重新生存 html 页面，但访问速度极快、简洁、轻量。主流静态博客框架有 Hexo、Hugo 等。

## [](https://liugongzi.org/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E4%BB%A5%E7%BB%88%E4%B8%BA%E5%A7%8B%EF%BC%8C%E6%89%BE%E5%88%B0%E6%9C%89%E7%BB%93%E6%9E%9C%E7%9A%84%E4%BA%BA%EF%BC%81 "以终为始，找到有结果的人！") 以终为始，找到有结果的人

- 先完成再完美，践行 " 最小可行性产品 "
- 与人的链接可能是最直接的完成方式

### [](https://liugongzi.org/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E4%B8%BA%E4%BB%80%E4%B9%88 "为什么") 为什么

将公司向的东西和个人向的东西分开，避免自己与某一份具体工作的深度耦合。

### [](https://liugongzi.org/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E8%84%9A%E6%89%8B%E6%9E%B6-hexo "脚手架 hexo") 脚手架 hexo

hexo 的 next 系列里的 mist 是我目前见到的博客里看着最舒服的

### [](https://liugongzi.org/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E6%9C%AC%E5%9C%B0-obsidian "本地 obsidian") 本地 obsidian

丰富的插件

### [](https://liugongzi.org/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E5%9F%9F%E5%90%8D%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8 "域名和服务器") 域名和服务器

域名可以去 CloudFare 买

服务器的话用 AWS Lightsail，另外本地 terminal 工具我推荐一下 warp，蛮不错的

搭好以后服务器上搞一个 git hook，部署起来很方便

### [](https://liugongzi.org/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E7%BD%91%E7%AB%99-logo "网站 logo") 网站 logo

在这里做好 [LLFavicon.ico图标生成器 | 一键免费制作ico图标 - 标小智 (logosc.cn)](https://www.logosc.cn/logo/favicon?s=LL)，然后去配置文件里配置一下即可

### 文中插入视频音频

视频嵌入  
有时候和老外聊完天，发了 B 站视频的同时，想写一些 comment，所以有这个诉求

1. 首先复制用于分享的 `嵌入代码`
2. 然后按照 markdown 格式嵌入 HTML 标签即可，设置成圆角更好看一些

```html
<iframe src="https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/477_1712389648.mp4" allowfullscreen="true" style="border-radius: 30px; overflow: hidden; border: 3px solid #ccc; width: 360px; height: 640px; display: block; margin: 20px auto; aspect-ratio: 9 / 16;" frameborder="0"></iframe>
```

音频嵌入

```html
<div style="max-width: 600px; margin: 20px auto; text-align: center; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); border-radius: 10px; padding: 20px;">
    <p style="font-weight: bold; font-size: 36px;">When You Are Old</p>
    <p>by W.B. Yeats</p>
    <p>Narrated by Luis Leonard</p>
    <audio controls style="width: 100%; margin-top: 20px; border-radius: 10px;">
      <source src="https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fliuyishou%2Ftmp%2F2024%2F04%2F08%2F00-28-48-8072eeb92a65a9f8cf66e809f5d4ee77-When%20you%20are%20old%20and-c561ce.mp3" type="audio/mpeg">
      Your browser does not support the audio element.
    </audio>
</div>
```

[hexo博客网页嵌入bilibili视频（免插件） | 峡州仙士之页 (cjh0613.com)](https://cjh0613.com/20200405hexo-bilibili)

### [](https://liugongzi.org/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1%E4%B8%8E%E9%98%85%E8%AF%BB%E6%97%B6%E9%95%BF "字数统计与阅读时长") 字数统计与阅读时长

![image.png|400](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/20240330224535.png)

[字数统计 - Hexo-NexT](https://hexo-next.readthedocs.io/zh-cn/latest/next/advanced/%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1/)

### [](https://liugongzi.org/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F "评论系统") 评论系统

用 valine 就挺不错的

[使用Valine为你的Hexo个人博客添加评论功能 | LorrBlog (lorrlai.github.io)](https://lorrlai.github.io/2021/12/18/20211217-ping-lun-gong-neng-tian-jia/)

### [](https://liugongzi.org/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E6%A8%A1%E7%89%88%E8%AE%BE%E7%BD%AE "模版设置") 模版设置

|   |
|---|
|---  <br>title: 博客搭建  <br>date: <% tp.date.now("YYYY-MM-DD") %>  <br>updated: 2024-04-07  <br>categories: 文以载道  <br>tags: <%*  <br>const folders = tp.file.folder(true).split("/").filter(n => n); // Excludes the top-level directory to align with your request  <br>tR += folders.join(", ");  <br>%>  <br>---  <br>  <br>excerpt  <br>  <br><!-- more -->|

利用 obsidian 的 templater 插件，实现每新建一个文件能自动出现博客展示需要的 properties，以及用于折叠全文需要的综述区域

### 封面图片

每篇文章可以选一个代表性的图片作为封面，有两点处理技巧：

1. [PNG图片免费下载_PNG素材_觅元素 (51yuansu.com)](https://www.51yuansu.com/all/) 中搜索透明背景的图片，某鱼有无限制账号哦！
2. WPS 为图片添加轮廓阴影
3. 上传到阿里云 OOS 图床，并用?x-oss-process=image/resize,l_300 的 url 后缀处理图片大小，避免图名重复，可以用 picgo 的 rename-file 1.0.4 插件

### 视频音频

### [](https://liugongzi.org/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1 "定时任务") 定时任务

目的是为了解放 publish 这一步，通过在 mac 上设定定时任务，实现无感知的自动将本地博客内容同步到服务器

使用 `launchd`，你需要创建一个 `.plist` 文件来定义你的任务。以下是创建一个 `launchd` 任务的步骤：

1. 创建一个名为 `com.user.hexoblogupdate.plist` 的文件，并保存到 `~/Library/LaunchAgents/` 文件夹。
2. 将以下内容复制到你的 `.plist` 文件中，这将设置任务在每天的 12 点和 0 点执行你的命令：
3. 保存 ```html
<div style="max-width: 600px; margin: 20px auto; text-align: center; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); border-radius: 10px; padding: 20px;">
    <p style="font-weight: bold; font-size: 36px;">When You Are Old</p>
    <p>by W.B. Yeats</p>
    <p>Narrated by Luis Leonard</p>
    <audio controls style="width: 100%; margin-top: 20px; border-radius: 10px;">
      <source src="https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fliuyishou%2Ftmp%2F2024%2F04%2F08%2F00-28-48-8072eeb92a65a9f8cf66e809f5d4ee77-When%20you%20are%20old%20and-c561ce.mp3" type="audio/mpeg">
      Your browser does not support the audio element.
    </audio>
</div>
```0 文件。
    
1. 运行以下命令来加载你的 ```html
<div style="max-width: 600px; margin: 20px auto; text-align: center; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); border-radius: 10px; padding: 20px;">
    <p style="font-weight: bold; font-size: 36px;">When You Are Old</p>
    <p>by W.B. Yeats</p>
    <p>Narrated by Luis Leonard</p>
    <audio controls style="width: 100%; margin-top: 20px; border-radius: 10px;">
      <source src="https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fliuyishou%2Ftmp%2F2024%2F04%2F08%2F00-28-48-8072eeb92a65a9f8cf66e809f5d4ee77-When%20you%20are%20old%20and-c561ce.mp3" type="audio/mpeg">
      Your browser does not support the audio element.
    </audio>
</div>
```1 任务：
    

    ```html
<div style="max-width: 600px; margin: 20px auto; text-align: center; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); border-radius: 10px; padding: 20px;">
    <p style="font-weight: bold; font-size: 36px;">When You Are Old</p>
    <p>by W.B. Yeats</p>
    <p>Narrated by Luis Leonard</p>
    <audio controls style="width: 100%; margin-top: 20px; border-radius: 10px;">
      <source src="https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fliuyishou%2Ftmp%2F2024%2F04%2F08%2F00-28-48-8072eeb92a65a9f8cf66e809f5d4ee77-When%20you%20are%20old%20and-c561ce.mp3" type="audio/mpeg">
      Your browser does not support the audio element.
    </audio>
</div>
```2

    
1. 如果需要卸载此任务，可以使用以下命令：

    ```html

<div style="max-width: 600px; margin: 20px auto; text-align: center; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); border-radius: 10px; padding: 20px;">
    <p style="font-weight: bold; font-size: 36px;">When You Are Old</p>
    <p>by W.B. Yeats</p>
    <p>Narrated by Luis Leonard</p>
    <audio controls style="width: 100%; margin-top: 20px; border-radius: 10px;">
      <source src="https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fliuyishou%2Ftmp%2F2024%2F04%2F08%2F00-28-48-8072eeb92a65a9f8cf66e809f5d4ee77-When%20you%20are%20old%20and-c561ce.mp3" type="audio/mpeg">
      Your browser does not support the audio element.
    </audio>
</div>
```3

    

#### 自动更新 properties 的脚本

```python
import os  
import re  
from datetime import datetime  
  
# 路径设置为你的 Markdown 文件所在的目录，这里是 _posts 的父目录  
markdown_path = r'/Users/liuyishou/Library/Mobile Documents/com~apple~CloudDocs/blog/source'  
  
# 遍历指定目录下的所有 Markdown 文件  
for root, dirs, files in os.walk(os.path.join(markdown_path, '_posts')):  
    for file in files:  
        # 将文件名转换为小写并检查是否以 '.md' 结尾且不是指定的排除文件  
        if file.lower().endswith('.md') and file.lower() != 'template for blog.md':  
            filepath = os.path.join(root, file)  
            # 获取文件的最后修改时间  
            mtime = os.path.getmtime(filepath)  
            modified_datetime = datetime.fromtimestamp(mtime)  
            # 解析 categories 和 tags            path_parts = root.split(os.sep)  
            posts_index = path_parts.index('_posts')  
            category = path_parts[posts_index + 1] if posts_index + 1 < len(path_parts) else 'Uncategorized'  
            tags = path_parts[posts_index + 1:] if posts_index + 1 < len(path_parts) else []  
  
            with open(filepath, 'r+', encoding='utf-8') as f:  
                content = f.read()  
  
                # 检查是否存在 Front Matter                front_matter_match = re.search(r'^---\s+(.*?)\s+---', content, re.DOTALL)  
                if front_matter_match:  
                    # 获取现有的 Front Matter                    front_matter_block = front_matter_match.group(1)  
  
                    # 如果 date 字段不存在，则使用 updated 的值作为 date 的值  
                    if not re.search(r'^date:', front_matter_block, flags=re.MULTILINE):  
                        updated_date = f'date: {modified_datetime.strftime("%Y-%m-%d")}\n'  
                        front_matter_block = updated_date + front_matter_block  
  
                    # 更新或添加必要的字段  
                    updated_front_matter = re.sub(r'^title:.*', f'title: {file[:-3]}', front_matter_block,  
                                                  flags=re.MULTILINE)  
                    updated_front_matter = re.sub(r'^updated:.*', f'updated: {modified_datetime.strftime("%Y-%m-%d")}',  
                                                  updated_front_matter, flags=re.MULTILINE)  
                    updated_front_matter = re.sub(r'^categories:.*', f'categories: {category}', updated_front_matter,  
                                                  flags=re.MULTILINE)  
  
                    # 处理 tags                    tags_block = '\n'.join([f'  - {tag}' for tag in tags])  
                    if 'tags:' in updated_front_matter:  
                        updated_front_matter = re.sub(r'^tags:.*(?:\n  - .*)*', f'tags:\n{tags_block}',  
                                                      updated_front_matter, flags=re.MULTILINE)  
                    else:  
                        updated_front_matter += f'\ntags:\n{tags_block}'  
  
                    # 替换整个 Front Matter 区块  
                    content = re.sub(r'^---\s+.*?\s+---', f'---\n{updated_front_matter}\n---', content, flags=re.DOTALL)  
                else:  
                    # 创建新的 Front Matter                    new_front_matter = f'---\ntitle: {file[:-3]}\nupdated: {modified_datetime.strftime("%Y-%m-%d")}\ncategories: {category}\ntags:\n' + '\n'.join(  
                        [f'  - {tag}' for tag in tags]) + '\n---\n'  
                    content = new_front_matter + content  
  
                # 重写文件  
                f.seek(0)  
                f.write(content)  
                f.truncate()
```

### [](https://liugongzi.org/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99%EF%BC%9A "参考资料：") 参考资料

[庭说 - 保持蓬勃的好奇心 (tingtalk.me)](https://tingtalk.me/)  
[基于Hexo的静态博客网站搭建并部署至云服务器 | Glimound的个人技术经验分享](https://www.glimound.com/build-hexo-blog/)  
[基于Hexo的静态博客网站搭建并部署至云服务器 | Glimound的个人技术经验分享](https://www.glimound.com/build-hexo-blog/)  
[hexo设置网站的图标Favicon - 简书 (jianshu.com)](https://www.jianshu.com/p/82c1d33420ba)



[最佳实践/获取优质信息的最佳实践.md]
=====================

---
draw:
title: 获取优质信息的最佳实践
tags: [最佳实践]
date created: 2024-03-28
date modified: 2024-12-27
---

![Picture6.png|400](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fliuyishou%2Ftmp%2F2024%2F04%2F07%2F23-59-19-a86303d8a15471fc3d4251147978bc2f-Picture6-d8bdcc.png?x-oss-process=image/resize,l_400)  
我即我食

<!-- more -->

![image.png|1000](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/20240319112045.png)

## 思考

上周末阅读了李笑来的一千小时的书籍，这个人虽然似乎因为割韭菜在币圈名声不太好，但是这本书中的很多东西还是引起了自己极大的共鸣。因为截止工作之前，自己在编程和英语上面刚好各刻意投入了一千个小时，分别达到了入行工作和基本听说读写的水平。一万小时 master 的期许对于年轻人来说往往遥遥无期，难以感知，但一千小时这个阈值却很奇妙，它不那么短，但坚持下来不容易，它也没有很久，但是也已足见一些分晓。基于此，在思考两个问题：一是：当下的中国，英语和编程无疑是个人知识方面的两个最大杠杆，那么我自己的下一个 1000h 应该投入到哪个方面，说白了就是 top3 是什么？二是：英语和编程天然具备数字化的优势，整个学习的过程，一台电脑就可以 manage，做一些数字化的反馈，但是其他领域呢？比如一项运动技能，通过录音录像吗？尤其是在目前大模型底座 context 越来越大的背景下，这个问题值得深思。

发现 [Meditation](https://en.wikipedia.org/wiki/Meditation) 对大脑有特别多的好处…… 这些好处就是好处，与宗教全然没有任何关系的好处。

> - [Harvard neuroscientist: Meditation not only reduces stress, here's how it changes your brain](https://www.washingtonpost.com/news/inspired-life/wp/2015/05/26/harvard-neuroscientist-meditation-not-only-reduces-stress-it-literally-changes-your-brain/)
> - [This Is Your Brain on Meditation -- The science explaining why you should meditate every day](https://www.psychologytoday.com/us/blog/use-your-mind-change-your-brain/201305/is-your-brain-meditation)
> - [Researchers study how it seems to change the brain in depressed patients](https://news.harvard.edu/gazette/story/2018/04/harvard-researchers-study-how-mindfulness-may-change-the-brain-in-depressed-patients/)
> - [Meditation's Calming Effects Pinpointed in the Brain](https://www.scientificamerican.com/article/meditations-calming-effects-pinpointed-in-brain/)
> - [Different meditation types train distinct parts of your brain](https://www.newscientist.com/article/2149489-different-meditation-types-train-distinct-parts-of-your-brain/)

收藏夹的处理，inbox-later-achieve 机制

[lifehack.com 上的这篇文章](https://www.lifehack.org/articles/technology/20-tips-use-google-search-efficiently.html) 也的的确确值得细读——读过且真正理解之后，不夸张地讲，你的 " 搜索技能 " 已经足够灭掉整个人类当前活跃群体中的 99% 了…… 这个说法真的完全没有夸张，绝大多数人就是不会在搜索的过程中使用那些符号的，比如 `-` `*` `~` `@` `#` `:` `"` `..` ——还有很多其它技巧…… 话说，你在 Google 上用过 `Time *place*` 吗？

已经掌握了正则表达式以及 glob 的你，学习一下如何使用这种符号，实在是太小菜一碟了——然而，这么简单的东西所能带来的未来收益是非常惊人的，不信走着瞧。

可实际上，还是得应用我们之前说过的原则：

> 首选查询，肯定是官方文档。

这么做的重要理由之一，是为了让你少受 " 二手知识 " 的蒙蔽和误导。这里有一个绝佳的例子让你理解二手知识的局限性：[我写过的一本 “书”，发布在网上](https://github.com/xiaolai/ji) ——这本 " 书 " 的另外一个 " 神 " 之处，在于它能让你 " 顿悟 " 阅读的力量，不管你是男生还是女生…… 若是这个链接错过了，你竟然会错过整个生活！



[最佳实践/设计的小技巧.md]
================

---
draw:
title: 设计的小技巧
tags: [最佳实践]
date created: 2024-04-16
date modified: 2024-11-12
---

excerpt

<!-- more -->

ppt 字后面的阴影团怎么用 todo



[最佳实践.md]
=========

---
draw:
tags: []
title: 最佳实践
date created: 2024-08-10
date modified: 2024-11-12
---

本质是：验证有效 + 广泛认可  
背后是：信息源的全面性和判断力的敏锐、触达本质  
践行：在整个[第二大脑](第二大脑.md)中，将一些总结出的最佳实践用call out 语法 hightlight 出来。



[比特币、共识算法、RAFT源码剖析.md]
======================

---
draw:
tags: []
title: 比特币、共识算法、RAFT源码剖析
date created: 2024-12-08
date modified: 2024-12-27
---

## 比特币突破 10 万美金

![image.png|1000](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F12%2F08%2F23-44-05-281e654d442163be1833b57d0ff9dedd-202412082344323-207020.png)

背景事件：比特币价格近期创新高，突破 10 万美金

比特币是一个没有中心机构管理的数字货币系统，全球无数节点共同维护一个账本，但他们是如何在缺乏权威机构的情况下保证每一笔交易记录一致且可信的？这一切的基础是"分布式共识（Distributed Consensus）"。

上限：无政府、去中心化  
下限：目前的金融体系中的一部分资金有去中心化的诉求，BTC 作为金融系统中的润滑剂而存在

需求：去中心化  
解法：分布式共识

## 什么是分布式共识？

定义：分布式共识是指在没有中央权威的情况下，使多个独立节点对某个状态或数据达成相同的看法。

- 在比特币中的体现：所有节点同步维护一个区块链账本，确认哪条链是"最长链"，从而确认交易的有效性。
- 拜占庭将军问题：共识难题的理论根源

[拜占庭将军问题](拜占庭将军问题)：共识难题的理论根源  
目的：以拜占庭将军问题为理论基石，说明分布式共识的核心挑战。

- 拜占庭将军问题简介：多支军队围攻一座城池，指挥官之间通过不可靠的通讯达成一致行动的难题。一些将军可能是叛徒，对信息进行篡改。
- 与网络环境类比：在分布式系统中，一些节点可能故障、延迟或恶意，如何在这种情况下仍然达成一致？

其他例子：

1. 桃花源记中的不知有汉 无论魏晋
2. 有一名日本军官，二战结束后仍在菲律宾孤岛负隅顽抗30年

不管是比特币解决传统金融的痛点，还是拜占庭将军问题，其核心需求都是解决共识的问题，基于此出现了很多共识算法。

1. 共识 -> 协作
2. 女巫

## 共识算法

|特性|PoW（工作量证明）|PoS（权益证明）|PBFT（实用拜占庭容错）|Paxos|Raft|
|---|---|---|---|---|---|
|场景|公有区块链（如比特币）|公有/联盟链（如以太坊）|联盟链/许可网络|传统分布式系统|传统分布式系统（分布式存储、KV服务）|
|信任模型|无中心、匿名节点|无中心(但依赖持币权益)|有限规模、已知节点身份|内部受控集群，有身份控制|内部受控集群，有身份控制|
|容错能力|抗拜占庭节点（需≥50%算力诚实）|抗拜占庭节点（需≥50%权益诚实）|可容忍f个恶意节点 (3f+1节点)|通常假设节点故障非恶意（可扩展支持拜占庭）|通常假设节点故障非恶意（崩溃容错）|
|确认速度|慢（需等待多个区块确认）|相对较快（实现差异大）|快速（固定轮次达成共识）|相对较快（有时较复杂）|较快（通过选举和日志复制机制）|
|能耗与成本|高（大量算力挖矿）|低（无需大量算力）|低（消息交换为主）|低（消息交换与日志复制）|低（消息交换与日志复制）|
|吞吐量与延迟|低吞吐量，高延迟|相对较高吞吐、较低延迟|较高吞吐量、低延迟|中等吞吐，依实现而定|较高吞吐量、低延迟，适合小规模集群|
|节点规模扩展性|可非常大（性能受限）|可较大（仍有性能限制）|通常小到中规模（几十到数百）|通常小规模（几台到十几台）|通常小规模（几台到十几台）|
|最终一致性类型|概率最终一致性（可分叉）|通常可更快或明确的最终性|确定最终一致性（达成即不可逆）|确定最终一致性（决议达成后不可逆）|确定最终一致性（日志提交后不可逆）|

众所周知，[Paxos](Paxos) 是一个非常划时代的共识算法。在 Raft 出现之前的 10 年里，Paxos 几乎统治着共识算法这一领域：因为绝大多数共识算法的实现都是基于 Paxos 或者受其影响，同时 Paxos 也成为了教学领域里讲解共识问题时的示例。但是不幸的是，尽管有很多工作都在尝试降低 Paxos 的复杂性，但是它依然十分难以理解。并且，Paxos 自身的算法结构需要进行大幅的修改才能够应用到实际的系统中。这些都导致了工业界和学术界都对 Paxos 算法感到十分头疼。比如 Google Chubby 的论文就提到，因为 Paxos 的描述和现实差距太大，所以最终人们总会实现一套未经证实的类 Paxos 协议。

基于以上背景，Diego Ongaro 在就读博士期间，深入研究 Paxos 协议后提出了 [Raft](Raft.md) 协议，旨在提供更为易于理解的共识算法。Raft 的宗旨在于可实践性和可理解性，并且相比 Paxos 几乎没有牺牲多少性能。

1. 比特币的共识机制：工作量证明（PoW）
目的：用比特币的实例，描述一种共识算法具体是如何实现的。
- PoW 原理：矿工通过消耗计算资源（电力、算力）来进行哈希碰撞寻找合适解，谁先找到就获得记账权。
- 最终一致性（概率性）：最长链代表共识结果，最终确认为不可逆，虽然存在分叉的可能，但随时间推移这种概率会降低。
- 优点与缺点：去信任化、去中心化，但能耗巨大，吞吐量和确认时间较慢。

下面是加入 Raft 后的一张简要对比表格，将 PoW、PoS、PBFT、Paxos、Raft 几种常见共识算法特性进行比较：

```mermaid
flowchart TD
    subgraph ConAlgo["Consensus Algorithms"]
        RAFT[Raft]
        POW[Proof of Work]
        ZAB[ZooKeeper Atomic Broadcast]
        PAXOS[Paxos]
    end
    subgraph KeyChar["Key Characteristics"]
        LEADER[Leader Election]
        CONSISTENCY[Strong Consistency]
        FAULT_TOLERANCE[Fault Tolerance]
    end
    RAFT --> LEADER
    RAFT --> CONSISTENCY
    
    POW --> |Decentralized| FAULT_TOLERANCE
    
    ZAB --> LEADER
    ZAB --> CONSISTENCY
    
    PAXOS --> LEADER
    PAXOS --> CONSISTENCY
    RAFT <--> ZAB["ZAB (特点相似)"]
    PAXOS --> |更复杂的前身| RAFT

    classDef subgraphStyle fill:#e6f3ff,stroke:#4a90e2,stroke-width:2px
    classDef algorithmNode fill:#f0f7ff,stroke:#2d6da3,stroke-width:2px
    classDef characteristicNode fill:#fff0f7,stroke:#d4638f,stroke-width:2px
    
    class RAFT,POW,ZAB,PAXOS algorithmNode
    class LEADER,CONSISTENCY,FAULT_TOLERANCE characteristicNode
    class ConAlgo,KeyChar subgraphStyle

    linkStyle default stroke:#666,stroke-width:2px
```

## 非拜占庭容错-RAFT

下面是一个类比场景，将 MIT 6.824 中的几个实验的实现思路，用「只能用微信点对点私聊、不能群聊」的方式来形象解释。请注意，这只是类比，不是精确的技术描述，但有助于理解分布式系统中所面临的问题和解决方案。

### 基本设定

想象一群同事（节点），平时想协同完成任务，但微信群功能故障，无法建群、无法群聊。每个人只能单独私信给其他人发送消息。整个系统要完成各种分布式任务，而 MIT 6.824 的几个 lab 就是解决这些在"只能单聊"的世界里如何合作达成一致、存储共享数据、分工处理任务。

### Lab 1: MapReduce（分工处理信息）

[Lab 1 MapReduce](Lab%201%20MapReduce.md)

**场景类比**：
假设老板（Coordinator）想请大家（Workers）统计一大堆文件中的词频。正常情况下可以在群里发任务，让大家分头做、最后在群里汇总结果。但是现在没有群聊，只能私聊。

**实现思路（类比）**：

1. 老板先把大文件分成小块，然后私信给小张、小李，让他们各自数自己的那部分词频（Map 相当于局部统计）。
2. 小张和小李统计完后，再私信老板他们统计好的中间结果。
3. 老板再根据他们的反馈，私信给小王，让小王把所有结果合并（Reduce）成最终的统计结果。
4. 最终老板收集到结果后再单独私信各人公布最终成绩。

没有群聊，协调者（老板）就得当中介，一个个分配、收集信息，最终保证数据处理完成。这体现了 MapReduce 的中心协调思想。

### Lab 2: Raft（一致性复制）

[Lab2 raft](Lab2%20raft.md)

**场景类比**：
有一群同事需要对一个决策达成一致（例如对公司章程文本的每次修订）。正常可以拉个群，全员投票通过就行，但现在只能点对点私聊。

**实现思路（类比）**：

1. 大家约定好：先选出一个组长（Leader）。但没有群聊，选组长怎么办？大家只能相互私聊投票。当某个人超时没等到组长指令时，就私信给别人说："要不我来当组长？" 收到多数同意后，他就成为组长。
2. 作为组长的人，每次有新决策（日志条目）需要大家同意，他就逐个私信给其他人（Follower），收集他们的确认回复。
3. 只要有过半的人同意，组长就把这条决策定下来，然后再私信告诉大家"决定已经生效"。
4. 若组长挂了（不回复私信），其他人再次通过私信互相推选新组长，继续达成一致。

这样的"点对点约定"和"多数确认"就是 Raft 的精髓：有一个 Leader，不断通过单聊确认大家的状态，确保日志同步和一致。

[共识算法](共识算法.md) 允许一组节点像一个整体一样一起工作，即使其中一些节点出现故障也能够继续工作下去，其正确性主要源于复制状态机的性质：

> 任何初始状态一样的状态机，如果执行的命令序列一样，则最终达到的状态也一样。如果将此特性应用在多参与者进行协商共识上，可以理解为系统中存在多个具有完全相同的状态机（参与者），这些状态机能最终保持一致的关键就是起始状态完全一致和执行命令序列完全一致。

```mermaid
flowchart TD
    subgraph Initial["初始状态 (完全相同)"]
        S1[["状态机 A\n状态: S0"]]
        S2[["状态机 B\n状态: S0"]]
        S3[["状态机 C\n状态: S0"]]
    end

    subgraph Commands["命令序列 (通过共识算法保证一致)"]
        CMD1["命令1"] --> CMD2["命令2"] --> CMD3["命令3"]
    end

    subgraph Final["最终状态 (完全一致)"]
        F1[["状态机 A\n状态: S_final"]]
        F2[["状态机 B\n状态: S_final"]]
        F3[["状态机 C\n状态: S_final"]]
    end

    S1 --> CMD1
    S2 --> CMD1
    S3 --> CMD1

    CMD3 --> F1
    CMD3 --> F2
    CMD3 --> F3

    classDef stateNode fill:#e1f5fe,stroke:#0288d1,stroke-width:2px
    classDef commandNode fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px
    classDef subgraphStyle fill:#f5f5f5,stroke:#616161,stroke-width:2px

    class S1,S2,S3,F1,F2,F3 stateNode
    class CMD1,CMD2,CMD3 commandNode
    class Initial,Commands,Final subgraphStyle
```

### Lab 3: Fault-tolerant Key/Value Service（基于 Raft 的容错 KV 存储）

**场景类比**：
现在大家需要维护一份共享的钥匙-柜子对照表（KV存储），让团队随时查某把钥匙对应哪个柜子。为了避免单点故障，大家决定每个人都保存一份一模一样的表。

**实现思路（类比）**：

1. 大家继续用 Raft 的方法：选出一个组长来负责更新KV表。
2. 有人找组长私信说："我新买了个柜子，记得更新表格。"
3. 组长在收到新信息后，一个个私信给其他人让他们更新自己的表，并等待大多数人回复"已更新成功"后，组长再私信广播确认最终版本。
4. 如果表太大，一条条更新太慢，组长可能会让大家定期拍快照（snapshot）。私聊发一下当前完整表格，确保崩溃恢复后能快速同步。

这体现了实验中在 Raft 基础上实现分布式一致性存储的思路：用 Leader 协调每次更新，用多数确认保证数据强一致，单聊方式只是让协调成本提高，但基本原理不变。

### Lab 4: Shard Master & Sharded KV（分片与全局管理）

**场景类比**：
团队越来越大，柜子数量飙升，一个人管理所有柜子的映射表太累。大家想把键值对分片（shard），每个人只管一部分钥匙（类似把通讯录分成多本，每个人维护一部分）。
但是仍然只能单聊！
为了动态调整分片分配，需要一个「分片大师」（Shard Master），它统一规划谁负责哪部分。

**实现思路（类比）**：

1. Shard Master 在 Raft 基础上形成一个小团队（依然只能私聊选出组长，存储分片配置）。
2. 客户端（同事）如果想查某个钥匙，就先私信 Shard Master："这把钥匙的映射在哪个同事手里？"
3. Shard Master 根据当前分片规则，私信回复告诉你去找小张。
4. 你再私信小张拿到对应的值。
5. 如果 Shard Master 要调整分片（因为小张任务太多了），它就更新配置，再一对一私信告知各相关人分片变化情况，让他们数据迁移时相互点对点传输分片数据。

整个流程就像一个没有群聊的公司运转，通过无数次的一对一私信来实现动态重分片和数据查询。虽然麻烦，但逻辑上还是能达成一致和共享状态。

---

**总结类比**：

- **Lab1(MapReduce)**：像老板通过私聊给不同人分配统计任务，汇总结果。
- **Lab2(Raft)**：像用私聊投票选出组长，组长通过私聊给大家同步决定，确保所有人笔记本上写下相同决策。
- **Lab3(容错KV)**：在 Raft 基础上，组长通过私聊同步数据更新，让大家手头的KV表始终保持一致。
- **Lab4(分片管理)**：引入分片管理者，利用私聊来告诉你该去找谁查询数据；分片变化时，各节点也只能点对点地私聊传数据。

这些过程的核心是：在无法群聊（无法广播）的环境中，通过点对点沟通和多数派确认，一层层搭建出容错、高一致性、高可用的分布式系统。

## 拜占庭容错-POW

首先，在公网的 P2P 系统中，我们必须设计出支持拜占庭容错的共识算法。相比 Raft 等非拜占庭容错的共识算法，区块链算法本质上利用了真实物理硬件的工作量证明 POF(Proof of Work) 而非可以随意捏造的 IP，域名等信息来标识节点从而解决女巫问题，其可以保证：只要网络中的大多数节点是无恶意的，恶意的节点就无法干被大家都承认的坏事。

## 需求

货币、账本？
![image.png|500](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F12%2F11%2F16-22-01-c84261436fb3914a4c3041f45d021ab8-202412111622093-388141.png)

- 有一群完全不信任彼此的人（节点），他们都想维护一份共同的记账本（交易记录表）。
- 正常情况下，如果有一个群聊群，大家可以在群里轻松发布各自的交易记录和确认新的"账本版本"，谁赚了钱谁消费了大家一目了然。但现在没有群聊，只能一对一私聊，信息传播变慢且无保障。
- 这些人互不相信对方的身份，每个人都有可能是坏人，会试图伪造交易或发布虚假账本版本。

### 解法 PoW

```mermaid
flowchart TD
    subgraph 初始状态和首轮挖矿
        G[Genesis] --> B1A[Block1-A\nPoW:0x00f]
    end
    
    subgraph 多分叉情况
        B1A --> B2B[Block2-B\nPoW:0x00e]
        B1A --> B2A[Block2-A\nPoW:0x00d]
        B1A --> B2E[Block2-E\nPoW:0x00c]
    end
    
    subgraph 分叉解决
        B2B --> B3B[Block3-B\nPoW:0x00f]
        B3B --> B4C[Block4-C\nPoW:0x00e]
        B4C --> B5D[Block5-D\nPoW:0x00d]
        
        B2A -.-> |放弃分叉|B2B
        B2E -.-> |放弃分叉|B5D
    end
    
    subgraph 最终状态["最终状态 (所有节点)"]
        B5D_A[Block5-D\nPoW:0x00d]
        B5D_B[Block5-D\nPoW:0x00d]
        B5D_C[Block5-D\nPoW:0x00d]
        B5D_D[Block5-D\nPoW:0x00d]
        B5D_E[Block5-D\nPoW:0x00d]
    end
    
    B5D --> B5D_A
    B5D --> B5D_B
    B5D --> B5D_C
    B5D --> B5D_D
    B5D --> B5D_E
    
    classDef genesis fill:#f9f9f9,stroke:#333,stroke-width:2px
    classDef active fill:#e3f2fd,stroke:#1565c0,stroke-width:2px
    classDef abandoned fill:#ffebee,stroke:#c62828,stroke-width:2px,stroke-dasharray: 5 5
    classDef final fill:#e8f5e9,stroke:#2e7d32,stroke-width:2px
    
    class G genesis
    class B1A,B2B,B3B,B4C,B5D active
    class B2A,B2E abandoned
    class B5D_A,B5D_B,B5D_C,B5D_D,B5D_E final
```

## 数据结构：账单 branch

区块链是一个每十分钟多一个节点的链表，类似 [Git](Git.md) 中的 branch

每个 revision 是 zip 之后的账单信息，执行 zip 打包的人会被奖励比特币，奖励个数随四年半衰期减半一次，所以 Sum 求极限之后总奖励额度为 2100 万，比特币一共有 2100 万枚，和黄金一样具有稀缺性。

## 如何确定谁 commit？

工作量证明（Proof of Work）机制，通过穷举哈西函数的入参去 match 设置好的出参的 0 的个数来完成工作，打包权给谁是看 GPU 的计算工作量的，通过调整 0 的个数，进一步能保证十分钟打包一次的节奏。

## 双重支付问题，一钱双花问题

a 同时发出给 b 和 c 的账单，会导致分布式网络上不同的节点认知不同，直到打包的时候打包人的认知才会 commit 成所有人的认知。

## 分叉问题，多 branch 问题

链表可能会因为同时打包提交而变成多叉，所有人接收的时候以最长节点数的 branch 为准，因为 commit 是十分钟匀速的，所以其实也就是看哪个 branch 的最后一次提交时间更新鲜。

    

## 小结

1. **无法信任的环境**：
    大家必须在没有共同"老板"或"领导"的情况下更新账本。
    在微信单聊世界里，没有一个公认的权威，不存在"组长"角色帮助达成一致。所以，只能靠某种"难以造假"的方式来让大家普遍认可同一版本的账本。
    
2. **难题求解（挖矿）**：
    想象每过一段时间（比如10分钟），可以生成一页新的账本页面（区块）来记录最近发生的交易。
    但谁来制作这页账本呢？
    在没有群聊的情况下，每个人都在自己家偷偷尝试解一道非常困难的数学难题（相当于 PoW 中的哈希碰撞），这个难题需要大量尝试才能解出来（比如不断给账本尾部附加随机数，直到满足某个严格条件）。
    解题没有捷径，只能多次尝试（消耗计算资源，就像矿工消耗算力），这样解决难题的人被认为确实投入了真实资源和成本。
    
3. **竞争出块（形成区块）**：
    一旦某个节点（矿工）花费巨大努力解出了难题，他就有了"记账的权利"。他会赶紧把他做出的新账本页面（包含一些交易记录和解题结果的证明）通过私聊的方式，尽可能地发送给他认识的其他节点，让更多的人知道"我解出题了，这是最新账本页面"。
    
4. **消息的传播与认可**：
    没有群聊的情况下，这个新账本页面的消息需要节点与节点之间一对一地私聊传播。就像谣言在朋友间口口相传一样，消息会慢慢扩散给更多的人。
    大家收到这份新账本页面后，会检查难题解答是否正确（校验PoW），如果确认无误，就把这个页面附在自己已有的账本后面，认可这是最新的合法状态。
    
5. **最长链原则（最长的账本版本获胜）**：
    由于没有群聊，有可能不同的节点在类似时间各自解决了难题，形成两个版本的账本页面。这时大家就观望：哪个版本会传得更广、接下来有其他节点基于哪个版本继续解下一个难题？
    通常，最终会有一条账本链发展得更长（得到更多后续区块的叠加），因为大多数诚实节点只愿意在最多人认可的、难度最高（累计算力最大）的链上继续工作。
    当一条链变得更长时，其他分叉自然被人们抛弃。
    
6. **保证安全性**：
    恶意节点想要更改过去的账本内容，需要重新解很多之前的难题，这在现实中成本极高。即使他能够一点点私信欺骗一些人，但由于难题求解代价高、时间长，他很难让经过全网传播的正规链被所有人放弃。
    最终，PoW 机制保证了在这个"全是私聊、无统一管理"的世界里，每个人只相信难度最高、工作量最大的账本链。这样即便只能一对一传消息，系统仍能在全球范围内达成一个难以篡改的公共账本。
    
- 在"只能私聊"的比喻中，比特币的 PoW 像是一个"公开比赛"：
    - 每个人暗地里努力"解题"（挖矿），无法走捷径。
    - 谁先解出题，就获得提议新账本版本的权利。
    - 其他人用私聊将该版本传播开来，并根据认证难题解答的正确性和链的长度来达成最终共识。

虽然没有群聊，但共识最终通过全网每个节点对工作量证明的认可以及最长链的选择规则慢慢达成，从而在无中心信任的环境中共享一个可靠的账本。

## GO 的语法特色

总结中

## 工具和思考

1. https://csdiy.wiki（问题）+ github（标准答案）+ git（抄作业）
2. cursor、claude、o1 pro（好老师）
![image.png|1000](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F12%2F08%2F23-11-59-b0470a2b296a5e40d94534e4d6b2ba58-202412082311398-c257ef.png)

思考：

1. 宾利里的老鼠、所有领域的**基本想法**、复用概念  
![image.png|1000](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F12%2F11%2F16-26-03-be7298e0722519d9f80c9aa1fe28bdfa-202412111626604-c3a87f.png)

2. **显学**性质的技术已经无门槛可言，花费时间即可获得，学习曲线平滑。
3. 实战和真实场景的意义在于给理论概念排一个真实的优先级，这是只学习理论时无法切实感受到的。



[比特币，共识算法，MIT6.824.md]
======================

---
draw:
tags: []
title: 比特币，共识算法，MIT6.824
date created: 2024-09-21
date modified: 2024-11-12
---

## 道，IBIT的收益

## 法，共识算法

## 术，Lab 中的代码

## 器，如何快速学习一个新 Lab



[程序员的英语提高指南.md]
===============

---
draw:
tags: []
title: 程序员的英语提高指南
date created: 2024-01-07
date modified: 2024-12-27
---

```mermaid
graph TD
    A[开始] --> B(动机和心理准备)
    B --> C(前置概念学习)
    C --> D(输入阶段)
    D --> |阅读a阶段| E(输出阶段)
    D --> |听力a阶段| E
    E --> |口语a阶段| F(精进阶段)
    E --> |写作a阶段| F
    F --> |阅读b阶段| G[结束]
    F --> |听力b阶段| G
    F --> |口语b阶段| G
    F --> |写作b阶段| G

    subgraph 前置概念
    C1[四种单词量] --> C
    C2[词频意识] --> C
    C3[间隔复习] --> C
    end

    subgraph 输入
    D1[阅读a: 词频驱动] --> D
    D2[听力a: 高频单词练习] --> D
    end

    subgraph 输出
    E1[口语a: 音标和高频词汇] --> E
    E2[写作a: 语法和句间关系] --> E
    end

    subgraph 精进
    F1[阅读b: 沉浸阅读] --> F
    F2[听力b: 多媒体内容] --> F
    F3[口语b: AI辅助和实践] --> F
    F4[写作b: 深化和创新] --> F
    end
```

- [前言](#%E5%89%8D%E8%A8%80)
- [一、动机、渴望](#%E4%B8%80%E3%80%81%E5%8A%A8%E6%9C%BA%E3%80%81%E6%B8%B4%E6%9C%9B)
	- [1.1 后高考时代为什么还要学习英语](#1.1%20%E5%90%8E%E9%AB%98%E8%80%83%E6%97%B6%E4%BB%A3%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E8%A6%81%E5%AD%A6%E4%B9%A0%E8%8B%B1%E8%AF%AD)
	- [1.2 心理准备](#1.2%20%E5%BF%83%E7%90%86%E5%87%86%E5%A4%87)
- [二、几个前置概念](#%E4%BA%8C%E3%80%81%E5%87%A0%E4%B8%AA%E5%89%8D%E7%BD%AE%E6%A6%82%E5%BF%B5)
	- [2.1 四种单词量](#2.1%20%E5%9B%9B%E7%A7%8D%E5%8D%95%E8%AF%8D%E9%87%8F)
	- [2.1 词频意识](#2.1%20%E8%AF%8D%E9%A2%91%E6%84%8F%E8%AF%86)
	- [2.2 间隔复习](#2.2%20%E9%97%B4%E9%9A%94%E5%A4%8D%E4%B9%A0)
- [三、输入](#%E4%B8%89%E3%80%81%E8%BE%93%E5%85%A5)
	- [3.1 阅读a阶段](#3.1%20%E9%98%85%E8%AF%BBa%E9%98%B6%E6%AE%B5)
	- [3.2 听力a阶段](#3.2%20%E5%90%AC%E5%8A%9Ba%E9%98%B6%E6%AE%B5)
- [四、输出](#%E5%9B%9B%E3%80%81%E8%BE%93%E5%87%BA)
	- [4.1 口语a阶段](#4.1%20%E5%8F%A3%E8%AF%ADa%E9%98%B6%E6%AE%B5)
	- [4.2 写作a阶段](#4.2%20%E5%86%99%E4%BD%9Ca%E9%98%B6%E6%AE%B5)
- [五、精进](#%E4%BA%94%E3%80%81%E7%B2%BE%E8%BF%9B)
	- [阅读b阶段](#%E9%98%85%E8%AF%BBb%E9%98%B6%E6%AE%B5)
	- [听力b阶段](#%E5%90%AC%E5%8A%9Bb%E9%98%B6%E6%AE%B5)
	- [口语b阶段](#%E5%8F%A3%E8%AF%ADb%E9%98%B6%E6%AE%B5)
	- [写作b阶段](#%E5%86%99%E4%BD%9Cb%E9%98%B6%E6%AE%B5)
- [写在最后](#%E5%86%99%E5%9C%A8%E6%9C%80%E5%90%8E)
- [资料与工具](#%E8%B5%84%E6%96%99%E4%B8%8E%E5%B7%A5%E5%85%B7)

## 前言

编程好的技术在国外

国内增长乏力，大公司的出海热潮

The English Odyssey.  
记录一个传统的中国学生，  
起点：在结束中学的英语教育后，  
终点：变成一个能真正运用这门语言的人  
之间的冒险，奥德赛！

我一共花了 xxxx 时间，取得了什么结果，托福多少分，油管无压力，进外企。想把整个过程中总结出的一些最佳实践分享出来。当然也可能会有知识诅咒。

Well-educated 的英语和三十秒露馅的英语，深入的文化理解，深入的一对一的理解

知识诅咒：指的就是**一旦我们自己知道某样东西，我们就会发现很难想象不知道它的时候会是什么样子**。

[口语](口语.md)  
[英语语法@](英语语法@.md)

[英语写作](英语写作.md)

每个映射代表一块砖，四面墙代表四种映射  
![image.png|1000](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fliuyishou%2Ftmp%2F2024%2F07%2F31%2F14-39-20-28ac40c13e87651a3c4ef0a5ac3e7909-kisspng-brick-wall-clip-art-brick-5ab58e97d68fa9.2673084215218479598789-f32cc2.png)

四种映射共同组成了英语能力  
![image.png|1000](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fliuyishou%2Ftmp%2F2024%2F07%2F31%2F14-38-12-512934aac593bfcb3810ce88f4f1350e-kisspng-stone-wall-brick-clip-art-brick-wall-5abf2a18ab3631.5554477315224775927013-4aa636.png)

## 一、动机、渴望

### 1.1 后高考时代为什么还要学习英语

- 装逼
- 提高上限：更多的信息，比如很多框架的官方文档，可以模糊提高各个领域的上限
- 语言之美：When you are old
- 沉没成本：三年级到大学，前期投入太多，不转化成真正能力的话，==沉没成本太大==
- 存量转化：而且之前输入积累远远大于输出，即使不学习新的输入，将已有的全部转化成主动输出，就已经非常可观了

### 1.2 心理准备

- 没有速成，需要大量时间，但是好的方法和认知可以让你找到门路，不会有劲无处使，会让过程变得科学可靠，可落地，易于操作。

## 二、几个前置概念

### 2.1 四种单词量

 拆解成一个个映射关系

 1. 形 - 意单词量 视力 - 想法
 2. 音 - 意单词量 听音 - 想法
 3. 意 - 声单词量 想法 - 发音
 4. 意 - 形单词量 想法 - 拼写/手写

### 2.1 词频意识

1. 不同的词频意味着不同的性价比
2. 克拉克语言习得的 N+1 原理的本质是词汇由高频到低频的逐步扩展
 

### 2.2 间隔复习

间隔复习是最省时高效的记忆方式！遗忘曲线、supermo 算法

## 三、输入

### 3.1 阅读 a 阶段

#### 逻辑推导

本质连接是什么？终点是什么？

1、听力和手没有关系，做笔记、边听边写，全是假的，没有用，做听力就要解放双手用耳朵

2、听力的本质是：一个==外界的声音==和你==脑中的意思==能产生联系 安瑞额 -> 区域 穿克 ->轨迹

3、听力好的绝对终点是：一大段英语的声音袭来，你能清晰地知道她的每个词表达了啥，需要苦练十年

4、单词的性价比不一样，有的值钱有的不值钱，听懂 " 一 z"，对 99% 的句子都有帮助，能听懂 " 安色弱怕了几 "，对 0.001% 的句子有用

5、听力好的相对终点是：一大段英语声音袭来，其中==高频单词==的声音，和你脑中的意思，已经具备了联系，只需要苦练几月

#### 刻意练习

词频驱动  
很多词频透析类型的软件，可以标注出待阅读文本中的生词  
文本透析

### 3.2 听力 a 阶段

#### 逻辑推导

本质连接是什么？终点是什么？

1、听力和手没有关系，做笔记、边听边写，全是假的，没有用，做听力就要解放双手用耳朵

2、听力的本质是：一个==外界的声音==和你==脑中的意思==能产生联系 安瑞额 -> 区域 穿克 ->轨迹

3、听力好的绝对终点是：一大段英语的声音袭来，你能清晰地知道她的每个词表达了啥，需要苦练十年

4、单词的性价比不一样，有的值钱有的不值钱，听懂 " 一 z"，对 99% 的句子都有帮助，能听懂 " 安色弱怕了几 "，对 0.001% 的句子有用

5、听力好的相对终点是：一大段英语声音袭来，其中==高频单词==的声音，和你脑中的意思，已经具备了联系，只需要苦练几月

#### 刻意练习

1. 低效版：闲看美剧、闲听 bbc，因为不符合刻意练习
2. 背！
3. 怎么背？
	1. 用软件、间隔复习更科学
	2. 闭眼背！因为 3.2.1.1
	3. 两种路径
		1. 高效枯燥版：直接找一本单词书，选高频的 7000 个背完背熟
		2. 高效有趣版：==频率逼近法==，
			1. 选一门考试，找到所有试卷，比如 100 篇，写个脚本跑出 100 篇的总词频，选出 100 篇的高词频
			2. 每天 n 篇，做之前，写个脚本找到这 n 篇中属于高词频的部分，导入墨墨背单词，背完，然后听录音做题
			3. 优点：依托于具体内容不枯燥、先背后听没有痛苦、有答题和分数反馈爽歪歪、顺便捞一门成绩
4. 背多少？
	1. 5000，初步具备听力能力
	2. 无痛听懂油管的常见内容可能需要一万加

https://v2ex.com/t/489712

## 四、输出

对于主动输出来说，无论是口语还是写作，都是一个模式，即 ==准确的用词 -> 准确的词间关系 -> 准确的句子 -> 准确的句间关系 -> 好的篇==。从实施上，关键要素有二，一是起码拥有上千个脑中意到合理单词选择的映射关系，二是需要有完备的语法知识体系。关于 " 准确的用词 "，我主要放在了口语 a 阶段。关于 " 准确的词间关系 -> 准确的句子 -> 准确的句间关系 -> 好的篇 "，我主要放在了写作 a 阶段。  
上面这个阶段结束以后有了基本的词汇的驾驭能力，才可以真正雕琢写作，不然比如简单的 " 真的首饰假的首饰 " authentic fake 都用不好。

### 4.1 口语 a 阶段

#### 几个里程碑

1. 音标体系
2. 高频主动词汇积累
3. 语法体系的应用
4. 人工智能和实地生活 打磨细节

#### 逻辑推导

1. 口语的本质是：一个==脑中的念头==一动，立刻想到==发什么声音== 具体的 - 死波赛飞可 确实 - 一个 zan 克特力
2. 口语好的绝对终点是：脑中的任何念头一起，你都能立刻发出对应的声音，需要苦练十年
3. 单词的性价比不一样，有的值钱有的不值钱，脑中 " 是 " 的念头一起，想到发出 " 一 z"，对 99% 的表达场景都有帮助，脑中 " 人类学 " 的念头一起，想到发出 " 安色弱怕了几 "，对 0.001% 的表达场景有用
4. 口语好的相对终点是：脑中的任何念头一起，其中高频意念，你都能立刻发出对应的声音，只需要苦练几月
5. 如何达到==高频意念==和发什么声音的连接？

#### 刻意练习

1. 音标的符号体系
2. 听力词汇 5000 以上，具体实操可参考听力章节

```Java
	听力是口语的前提，没有说不出来的话，只有听不懂的话
```

1. 舌位知识

```Java
	不求地道，只求自洽，以后慢慢迭代，我现在的认知是 /a/ 你叫他阿猫阿狗都行，但是你每次都得这么叫！
	
	现在不管怎么进化，都是自以为的更标准，没用！
	
	现在练一百遍不得其意，后面慢慢就会懂，因为会发生，你说了一个单词，连外教听不懂，那么就是你这个单词的元音辅音出现问题了  
	
	根据天赋，会越来越趋近标准的
	
	以后不管中国人还是外国人说你发音有问题，那你就进一步问他，哪个单词，哪个音节，哪个元音或者辅音？然后基于以上认知，你就可以改变了！
```

1. 背音标

```Java
	背一遍单词音标（前3000） electronic    approach -> /əˈproʊtʃ/

	重音
```

1. 连读知识 一周

```Java
	任何让你口语更地道炫酷的东西，都没必要话太多时间
	
	连读、吞音等等不需要怎么看，慢慢就懂了，核心就是尽可能凑成   辅元
	
	口语的本质不在于此！
```

1. 找老外说话

```Java
	开始找老外说话，从来不和中国人练口语、英语角全是假的，低效，很难让你持久地输出！

	录音！永远不要在没有录音的情况下说英语

```

1. 复盘录音，梳理其中反应的你的 念头 - 单词 的映射，把不对的地方查字典纠正并导入到墨墨背单词
2. 用看句子挖空想单词的方法 背单词！具体可参考****

### 4.2 写作 a 阶段

#### 逻辑推导

本质连接是什么？终点是什么？

1. 与谈吐一样，写作能力是超越语言的，具体到英语的写作能力，又可以拆为用词准确能力，如口语 a 阶段，逻辑表述能力，类比与或非循环结构的使用，和词句意境能力。
2. 什么是好的写作成果 ==准确的用词 -> 准确的词间关系 -> 准确的句子 -> 准确的句间关系 -> 好的篇==
3. ==准确的用词== 这部分在口语 a 阶段已经初步达到
4. ==准确的词间关系 -> 准确的句子 -> 准确的句间关系 -> 好的篇== 这部分对于口语交流和书面写作来说精确和严谨程度的要求是不同的
5. 重点是词 ->篇的网络结构 完整，每个小点都能做到主动输出

```Java
	对于语法的掌握应该兼具体系化与模糊化，高频、常见即可
```

#### 刻意练习

1. 沉浸在写作社区中，如 Medium，摒弃旧的经济学人，利用好目前 app 的兴趣推流
2. 找托福的五道题，先完成，再完美
3. 利用《新编高级英语语法》搭建 ==准确的词间关系 -> 准确的句子 -> 准确的句间关系 -> 好的篇==网络
4. 在 Medium 中逐个写托福题目，用 Grammarly 修改语法，并纳入 3 的网络体系中，用 ChatGPT 精进用词
5. 找大量的托福雅思高分范文，分析他们的词 ->篇结构，纳入到 3 点网络体系中

比如这是一个中国人的写作，找到错的最厉害的五个点  
通过大量的写进入写作的阶段，通过少量的改，实现高频和准确高性价比的提高  
明天尝试打通 anki 的 api

口录，转文字整理到，每天刷 medium 找到适合自己的英语 feeds，培养英文阅读习惯  
两个月的时间，先争取把 69 个 tpo 写完，再看一个新的境界，收集 180 个错误，表达 200 多个观点  
写完 30 篇的时候发视频

## 五、精进

### 阅读 b 阶段

沉浸在写作社区中，如 Medium，摒弃旧的经济学人，利用好目前 app 的兴趣推流

推特、DIscord 等英语社区中学习 " 当代 " 的英语表达，各种梗

### 听力 b 阶段

油管、博客、美剧

### 口语 b 阶段

口语音视频被 AssemblyAI 处理成分角色文本，ChatGPT 根据语境提出修改意见，我讲修改意见归纳到主动词汇积累和语法网络中。
ChatGPT 的语境处理能力弥补了直接将 STT 的文本丢给 Grammarly 的缺陷

ElevenLabs 生成自己的口语模型，听到自己口语练习的终极形态

出国旅游、出国工作

### 写作 b 阶段

写作的话，是思想打底，文以载道

逐渐体现对于词汇细微之处的驾驭，是上一个阶段的深化。" 雪下得紧了 "

学会反范式，通过破坏语法规则，实现一些高阶表达

## 写在最后

花了多少时间精力，收获后端开发的雏形，尝试很多工具

写作是超越语言的，技能的学习其实也是超越语言的，什么语言的资料并不重要，重要的是什么能让你接近本质，掌握精髓

学习一门技能最高效的方式是，找到这项技能的第一性 (各种映射)，通过持续可理解性输入，做大量刻意练习！

而所有的这一切的第一性原理是：兴趣和热爱！

## 资料与工具

- 间隔复习工具：默默背单词、Anki(API)
- 单词词库：
- 音标知识：B 站英语兔
- 读音示范：B 站英语兔、油管瑞秋英语
- 语法知识：B 站英语兔可提供知识体系、章振邦的《新编高级英语语法》可提供详尽细节
- 音频转文字：网易见外工作台、AssemblyAI
- 油管字幕下载：DownSUB
- 活的 native speaker：很多口语平台，如 Cambly，可以低至 xx/h
- 考试目标物：托福雅思，在小站、考满分等平台均有高质量真题资料
- 精确的语法修改：Grammarly(比 GPT 精确)
- 为语境提供贴切的词汇建议：ChatGPT



[答辩、分享的三个要素.md]
===============

---
draw:
tags: []
title: 答辩、分享的三个要素
date created: 2024-07-21
date modified: 2024-11-12
---
1. 故事一定来源于自己，故事适合当前的 context，不要受模版约束
2. 可以找别人过，
	- 不要被破坏故事
	- 但只接受细节和视角性的建议
		- 当场做成 todolist
3. 万事俱备后，只需要刻意记一下转场切换的过渡就好

[配色方案](配色方案.md)

https://www.yuque.com/jianjiandandan-f7ayu/bzkzyk/eficaq9mai58rsih?singleDoc#《Screen Studio Mac 下精美的录屏工具》



[莫言《透明的红萝卜》细节解读.md]
===================

---
draw:
tags: []
title: 莫言《透明的红萝卜》细节解读
date created: 2024-07-14
date modified: 2024-12-27
---

![image.png|1000](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F07%2F15%2F11-54-21-5e6f5b73b3e6e6d3f1ad31d63c4b6488-20240715115421-411669.png)  

## 1、为什么黑孩去帮小铁匠而不是小石匠？

黑孩被推搡得有点头晕。刚才靠近刘副主任时，他闻到了那张阔嘴里喷出了 一股酒气。一闻到这种味儿他就恶心，后娘嘴里也有这种味。爹走了以后，后娘经常让他拿着 [地瓜干子](https://www.zhihu.com/search?q=%E5%9C%B0%E7%93%9C%E5%B9%B2%E5%AD%90&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A719260348%7D) 到小卖铺里去换酒。后娘一喝就醉，喝醉了他就要挨打，挨拧，挨咬。

小铁匠的脸色就变得更加难看，脾气变得更加暴躁。他开始喝起酒来。黑孩每天都要走过石桥到村里小卖部给他装一瓶 [地瓜烧酒](https://www.zhihu.com/search?q=%E5%9C%B0%E7%93%9C%E7%83%A7%E9%85%92&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A719260348%7D)。

他很惊异很新鲜地看到一根紫红色头巾轻飘飘地落到黄麻杆上，麻杆上的刺儿挂住了 围巾，象挑着一面沉默的旗帜，那件红格儿上衣也落到地上。成片的 [黄麻](https://www.zhihu.com/search?q=%E9%BB%84%E9%BA%BB&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A719260348%7D) 象浪潮一样对着他涌过来。他慢慢地站起来，背过身，一直向前走，一种异样的感觉猛烈冲击着他。

到最后，其实小铁匠扮演了黑孩后母的角色，充满了欺凌打骂，但同时也使一种家的感觉，给了黑孩一种归属感。但更重要的是，在菊子一次次的关心中，黑孩对他仿佛有了一种生母般的依赖，和恋人似的爱恋。当他看到菊子与小石匠野合时内心是由很大震动的，所以尽管小石匠对他有所帮助，但更多的还是一种夺爱之恨。这也就不难解释为什么最后他会帮助欺凌自己的小铁匠而去打帮助过自己的小石匠了。

## 2、老铁匠也曾经抛弃过他的师傅

[淬火](https://www.zhihu.com/search?q=%E6%B7%AC%E7%81%AB&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A719260348%7D) 前，他捋起右手衣袖，把手伸进水桶里试着水温，他的小臂上有一个深紫色的伤疤，圆圆的，中间凸出，尽管这个伤疤不象一只眼睛，但小石匠却觉得这个紫疤象一只古怪的眼睛盯着自己。

正当老铁匠要为手中的钻子淬火时，小铁匠耸身一跳到了桶边，非常迅速地把右手伸进了水桶。老铁匠连想都没想，就把钢钻戳到小伙子的右小臂上。一股 [烧焦皮肉](https://www.zhihu.com/search?q=%E7%83%A7%E7%84%A6%E7%9A%AE%E8%82%89&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A719260348%7D) 的腥臭味儿从桥洞里飞出来，钻进姑娘的鼻孔。

师徒二人同样位置同样缘由的伤口，暗示着两人同样的命运，抛弃与被抛弃。每个人都是受害者但同时也是凶手

## 3、两次戏文为何而发？

这年头，拳头大就有理。" 小铁匠捏起拳头，胳膊上的肉隆起来。小石匠猛然觉得老人那双深深地眍着的眼窝里射出了一股物质，好象暗示着什么，他顿时感到浑身肌肉松弛。老铁匠微微扬起脸，极随便地哼唱了一句说不出是什么味道的戏文或是歌词来。

恋着你刀马娴熟通晓诗书少年英武，跟着你闯荡江湖风餐露宿吃尽了世上千般苦。

" 烧什么你？小杂种，" 小铁匠说，" 别回家，我收你当个干儿吧，又是干儿又是徒弟，跟着我闯荡江湖，保你吃香的喝辣的。"[小铁匠](https://www.zhihu.com/search?q=%E5%B0%8F%E9%93%81%E5%8C%A0&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A719260348%7D) 一语未了，桥洞里响起凄凉亢奋的歌唱声。小石匠浑身立时爆起一层幸福的鸡皮疙瘩，这歌词或是戏文他那天听过一个开头。恋着你刀马娴熟，通晓诗书，少年英武，跟着你闯荡江湖，风餐露宿，受尽了世上千般苦——

老头子把脊梁靠在闸板上，从板缝里吹进来的黄麻地里的风掠过他的头顶，他头顶上几根花白的毛发随着炉里跳动不止的煤火轻轻颤动。他的脸无限感慨，腮上很细的两根咬肌象两条蚯蚓一样蠕动着，双眼恰似两粒燃烧的炭火。

……你全不念三载共枕，如去如雨，一片恩情，当作粪土。奴为你夏夜打扇，冬夜暖足，怀中的香瓜，腹中的火炉……你骏马高官，良田万亩，丢弃奴家招赘相府，我我我我是苦命的奴呀……

第一次是因为小铁匠说 " 拳头大就有理 "，已经授艺三年的老铁匠其实十分敏感，力量上的此消彼长让他感到了可能被抛弃的危机感。第二次是他看到小铁匠欲将黑孩收为徒弟，被抛弃的危机感加深了。戏文其实就是被抛弃者的自白。

## 4、菊子也会被小石匠抛弃

小石匠经常给公社出官差，刘副主任经常带领人马完成各类工程，彼此认识。黑孩看着刘副主任那宽阔的嘴巴。那构成嘴巴的两片紫色嘴唇碰撞着，发出一连串音节：" 小石匠，又是你这个滑头小子！你们村真他妈的会找人，派你这个笊篱捞不住的滑蛋来，够我淘的啦。小工呢？"

姑娘的心高高悬着，嘴巴半张开，睫毛也不眨动一下地瞅着老铁匠微微仰起的表情无限丰富的脸和他细长的脖颈上那个象水银珠一样灵活地上下移动着的喉结。凄婉哀怨的旋律如同秋雨抽打着她心中的田地，她正要哭出来时，那旋律又变得昂扬壮丽浩渺无边，她的心象风中的柳条一样飘荡着，同时，有一种 [麻酥酥](https://www.zhihu.com/search?q=%E9%BA%BB%E9%85%A5%E9%85%A5&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A719260348%7D) 的感觉从脊椎里直冲到头顶，于是她的身体非常自然地歪在小石匠肩上，双手把玩着小石匠那只厚茧重重的大手，眼里泪光点点，身心沉浸在老铁匠的歌里，意里。老铁匠的瘦脸上焕发出夺目的光彩，她仿佛从那儿发现了自己象歌声一样的未来……

他朦胧地看到 [菊子姑娘](https://www.zhihu.com/search?q=%E8%8F%8A%E5%AD%90%E5%A7%91%E5%A8%98&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A719260348%7D) 的右眼里插着一块白色的石片，好象眼里长出一朵银耳。他怪叫一声，捂着眼睛，躺在地上痛苦地扭动着。

小石匠虽然帮助过黑娃，但其实他是以 " 滑头 " 的形象出场的。略有些轻浮。在老铁匠第二次唱戏文时，菊子有很大的情绪波动，甚至 " 她仿佛从那儿发现了自己像歌声一样的未来 " 更是一种暗示，到最后菊子 [眼睛失明](https://www.zhihu.com/search?q=%E7%9C%BC%E7%9D%9B%E5%A4%B1%E6%98%8E&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A719260348%7D)，而这时她与小石匠仅仅是私底下的初期的这样一种关系，没有约束，充满不确定性，很难想象石匠会一直陪伴在这个独眼女人身边，她大概率也是要被抛弃的。

## 5、最后黑娃的衣服是谁给的？

" 冷不冷？" 老铁匠低声问。黑孩惶惑地望着老铁匠，好象根本不理解他问话的意思。" 问你哩！冷吗？" 老铁匠提高了声音。惶惑的神色从他眼里消失了，他垂下头，开始生火。他左手轻拉风箱，右手持煤铲，眼睛望着燃烧的 [麦秸草](https://www.zhihu.com/search?q=%E9%BA%A6%E7%A7%B8%E8%8D%89&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A719260348%7D)。老铁匠从草铺上拿起一件油腻腻的褂子给黑孩披上。黑孩扭动着身体，显出非常难受的样子。老铁匠一离开，他就把褂子脱下来，放回到铺上去。老铁匠摇摇头，蹲下去抽烟。

人们突然发现。黑孩穿上了一件包住屁股的大褂子，褂子是用崭新的、又厚又重的小帆布缝的。这种布非常结实，五年也穿不破。那条大裤头子在褂子下边露出很短的一截，好象褂子的一个花边。黑孩的脚上穿着一双崭新的 [回力球鞋](https://www.zhihu.com/search?q=%E5%9B%9E%E5%8A%9B%E7%90%83%E9%9E%8B&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A719260348%7D)，由于鞋子太大，只好紧紧地系住鞋带，球鞋变得象两条丑陋的胖头 [鲇鱼](https://www.zhihu.com/search?q=%E9%B2%87%E9%B1%BC&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A719260348%7D)。

老铁匠是同情黑孩的，在之前已经给过他一次褂子，所以到最后推断新的衣服也是老铁匠临走前给黑孩留下的。

## 6、为什么最后老者会哭泣？

这个村子挺富。菜园里有白菜，似乎还有萝卜。萝卜缨儿绿得发黑，长得很旺。菜园子中间有两间孤独的房屋，住着一个孤独的老头，

" 小兔崽子，你是哪个村的？"

黑孩迷惘的眼睛里满是泪水。

" 谁让你来搞破坏？"

黑孩的眼睛清澈如水。

" 你叫什么名字？"

黑孩的眼睛里水光潋滟。

" 你爹叫什么名字？"

两行泪水从黑孩眼里流下来。

" 他娘的，是个小哑巴。"

黑孩的嘴唇轻轻嚅动着。

" 队长，行行好，放了他吧。" 瘦老头说。

黑孩转身走了，起初他还好象害羞似地用手捂住小鸡儿，走了几步就松开了手。老头子看着这个一丝不挂的男孩，抽抽答答地哭起来。

其实在文本很早的部分就出现过老者的形象——孤独，年迈独居，不难想象他也失去了亲人，同样是一个被抛弃者。面对偷萝卜的人他固然愤怒，但是在黑孩被一系列质问的眼神中，这个部分作者着墨很多，他看到了与自己相同的感情。同情与怜悯超过了愤怒，所以他向队长求情，最后他看到远去的黑孩，仿佛也看到了自己的命运，自怜之情生，故而哭泣！

## 7、为什么黑孩要寻找 [透明的红萝卜](https://www.zhihu.com/search?q=%E9%80%8F%E6%98%8E%E7%9A%84%E7%BA%A2%E8%90%9D%E5%8D%9C&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A719260348%7D)？

在萝卜地里，他一个挨一个地拔了六个萝卜，把缨儿拧掉扔在地上，萝卜装进水桶……

小铁匠把地瓜转着圈子垒在炉火旁，轻松地拉着火。菊子把萝卜提回来，放在一块干净石头上。一个小萝卜滚下来，沾了一身铁屑停在小石匠脚前，他弯腰把它捡起来。" 拿来，我再去洗洗。"" 算了，光那五个大萝卜就尽够吃了。" 小石匠说着，顺手把那个小萝卜放在铁砧子上。

他看到了一幅奇特美丽的图画：光滑的铁砧子。泛着 [青幽幽](https://www.zhihu.com/search?q=%E9%9D%92%E5%B9%BD%E5%B9%BD&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A719260348%7D) 蓝幽幽的光。泛着青蓝幽幽光的铁砧子上，有一个金色的红萝卜。红萝卜的形状和大小都象一个大个阳梨，还拖着一条长尾巴，尾巴上的根根须须象金色的羊毛。红萝卜晶莹透明，玲珑剔透。透明的、金色的外壳里苞孕着活泼的银色液体。红萝卜的线条流畅优美，从美丽的弧线上泛出一圈金色的光芒。光芒有长有短，长的如 [麦芒](https://www.zhihu.com/search?q=%E9%BA%A6%E8%8A%92&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A719260348%7D)，短的如睫毛，全是金色，……

孩子急促地拉着风箱，瘦身子前倾后仰，炉火照着他汗湿的胸脯，每一根肋巴条都清清楚楚。左胸脯的肋条缝中，他的心脏象只小耗子一样可怜巴巴地跳动着。

最初它能够看到的金色的透明的红萝卜，正是他第一次偷回的六个中最小的一个，而且是被弃的，同时 " 金色外壳中活泼的银色液体 " 与他自己瘦弱的躯体之中跳动的心脏，在形象上也非常相似。对于美丽的透明的红萝卜的追求，其实也含有他对于自我的一种向往，一种对同命运者的惺惺相惜。

## 8、神性的黑娃

姑娘还悄悄地问小石匠黑孩是不是哑巴。小石匠说绝对不是，这孩子可灵性哩，他四五岁时说起话来就象竹筒里晃豌豆，咯崩咯崩脆。可是后来，话越来越少，动不动就象尊小石像一样发呆，谁也不知道他寻思着什么。

黑娃并不是天生如此寡言木讷，从文本看出，他曾经也是个多言活泼的孩子，而如今用土擦拭伤口，无视高温地拿钻子，对自然敏锐的洞察，寻找透明的红萝卜。这一切都说明，饱受的苦难，已经让他麻木，同时也发展出了神性，全文是第三人称叙述的，但读者很容易去站在黑孩的角度阅读，他此时已经不再是一个经历者，而更多的是一个观察者，看着世间的众人。后母被他的父亲抛弃、老铁匠被小铁匠抛弃、失明的菊子也会被石匠抛弃，而看守菜园的老头，晚年孤独，显然也是被抛弃者。所有的人遭受着生理的痛苦和精神的孤独。而透明的红萝卜，" 金色的外壳 " 与 " 银色的液体 " 这充满光明景象的追求正是他神性的体现，在这苍凉的人间，被抛弃的循环中，一点对美好的追求！



[视频大纲/从 chatgpt 转到 claude.md]
=============================

---
draw:
tags: []
title: 从 chatgpt 转到 claude
date created: 2024-07-24
date modified: 2024-11-12
---
1. 号, google
2. 信用卡 rmb - 欧易 --> u -- dupay
3. 聪明 gpt4o <<< [claude](claude.md) = gpt4
4. 回答速度 gpt4o / 3.5 <= claude

[报价检查工具前端设计思路](https://wiki.corp.qunar.com/pages/viewpage.action?pageId=934542983)



[视频大纲/从番茄清单到滴答清单.md]
====================

---
draw:
tags: []
title: 从番茄清单到滴答清单
date created: 2024-08-10
date modified: 2024-11-12
---

<iframe src="//player.bilibili.com/player.html?isOutside=true&aid=112936215383913&bvid=BV1zrYjeREfr&cid=500001644686813&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>

## 神奇的方法

**[番茄工作法](番茄工作法.md)**
1. 把 [认知](https://brain.liugongzi.org/2+%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/3+%E6%B2%89%E6%B7%80/%E6%99%BA%E6%85%A7/%E9%80%89%E6%8B%A9/%E8%AE%A4%E7%9F%A5) 下沉为 [习惯](https://brain.liugongzi.org/%E4%B9%A0%E6%83%AF)，降低心智负担，将近四千个小时的肌肉记忆
2. 通过外界工具，拉平我们对时间的主观感知
3. 劳逸结合，强制切换上下文，避免在错误的路上越走越远
4. 时间货币化，用注意力货币衡量自己的能力。

## 番茄清单时代

1. 考研
2. 英语
3. 转码

## [滴答清单](滴答清单.md) 时代

1. Inbox 处理各种支线任务
2. [WBS](WBS.md)，排期思维
3. [卢曼卡片盒笔记法](卢曼卡片盒笔记法.md)，闪念笔记，随时捕捉灵感
4. 多端同步，语音交互体验感，[最佳实践](最佳实践.md)

![image.png|1000](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F08%2F10%2F13-18-11-c8ed07241d569e5f0743fb4de29d78ad-202408101318895-25a66b.png)



[视频大纲/八个 Mac 上的杀手级应用.md]
========================

---
draw:
tags: []
title: 八个 Mac 上的杀手级应用
date created: 2024-09-10
date modified: 2024-11-12
---

![image.png|1000](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F09%2F10%2F00-07-09-359850e644f95d154f122973b321e9cd-202409100007785-3931dd.png)



[视频大纲/阿里听悟，免费的油管杀手.md]
======================

---
draw:
tags: []
title: 阿里听悟，免费的油管杀手
date created: 2024-08-11
date modified: 2024-11-12
---


1. 分章节总结
2. 分角色提取



[随想录/AI 的能力到底是什么.md]
====================

---
draw:
title: AI 的能力到底是什么
date created: 2024-03-27
date modified: 2025-02-14
---

![Default_archeology_and_java_code_both_1.png|1000](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/Default_archeology_and_java_code_both_1.png?x-oss-process=image/resize,l_500)  
看到一个有趣的问题，如果把 π 的前 1000 位给 GPT，让它预测出后 1000 位，结果可信吗？

<!-- more -->

显然每个人心中都有自己的答案了。但是，换一个场景，比如旅行推荐，为什么你就愿意相信了呢？
从本质来讲，AI 目前最颠覆性的能力还是在语言本身

第二个能力是一定会给你答案，不管对不对。这可能会滋生一些懒惰。比如钱学森之问，不靠解放思想，开化文明去解决，而是靠所谓的 AI 技术给一个飘飘然的答案，可能吗？

第三个是一个小的新领域的冷启动，也就是对于[黑话](黑话)的上手速度会无与伦比得快。本质是过去传统搜索需要 match 5 个固定的 keyword 才可以获取的信息，现在通过简单的自然语言就可以获得。举个例子，我在配置 hexo 博客时，遇到一个配置项

```yml
# Google Analytics  
# See: https://analytics.google.com  
google_analytics:  
  tracking_id: G-CJF78RFFDN  
  # By default, NexT will load an external gtag.js script on your site.  
  # If you only need the pageview feature, set the following option to true to get a better performance.  only_pageview: false  
  # only needed if you are using `only_pageview` mode, https://developers.google.com/analytics/devguides/collection/protocol/ga4  
  measure_protocol_api_secret:
```

翻阅官网后，我并不能直接找出

整个信息革命和计算机的发展历史，真正有意义的是数字化和概率规律的应用。而自动化在计算机之前的纺织机就有了。当然数字化驱动了数字自动化。关于概率化，包括 transformer 最早的注意力机制也是 google 的八个员工在做机器学习的自然语言处理时得到的。

AI 的一个缺陷是，缺乏批判性的观点。拿信息源举例，目前在我们这个群体中，都知道百度搜索效率低，知乎小红书的信息量可能还稍微高一些，再到一些细分领域，比如程序猿社区 V2EX，出国留学一亩三分地。但是如果直接问 AI 他很难告诉你拿个好拿个不好，而只是类似 " 官话 " 的，一本正经的介绍而已。这其实是很恐怖的一点。



[随想录/iphone.md]
===============

---
draw:
tags: []
title: iphone
date created: 2024-11-05
date modified: 2024-12-27
---

最优解是加拿大版，但是很难买到。
如果买不到，次优解是日版

美版：无实体 SIM 卡槽，支持 eSIM，支持卫星通信。 

中港澳版：双实体 SIM 卡槽，不支持 eSIM，不支持卫星通信。 

其他地区版：单实体 SIM 卡槽，支持 eSIM，支持卫星通信。

不止三个版本，频段是有区别的，不能简单用 sim 卡槽来区分。
加日沙特墨西哥版的频段是最全的，泰国台湾都是次一级，频段少一些（台湾 wifi6e 之前也是阉割，现在放开了但是标准还没出，只是笼统说比照欧盟认证）

加拿大版和日版是一样的硬件，不同点在于加拿大版没有拍照声音的限制（日版在日本境内/飞行模式有不可关闭的拍照快门声音）

还有支持的蜂窝信号频段的不同（以及是否支持卫星通信功能等区别）。美版最全，其次是加拿大/日版，然后是欧版、亚太、迪拜等等最后是国行/港行。排序可能不正确但是美版最全，其次是加拿大/日版是可以确定的，站内有很多对比不同版本之间差异的帖子。



[随想录/低级趣味与高级享受.md]
==================

---
draw:
title: 低级趣味与高级享受
date created: 2024-03-31
date modified: 2025-02-14
---

很多个角度去阐释，比如什么人和动物的区别，但其实道理很简单，随便拉一个路人，你觉得和范冰冰相比谁更好看？高低级的享受的区别是刻在 DNA 里的。至于为什么，可能又是另一个话题了。

<!-- more -->

但是！

抖音首次证明打游戏，穿丝袜，擦边扭屁股，脑残搞笑，以及研究数学和物理，欣赏艺术等行为，具备一样的概率 fisher 几何，意味着这些行为，无论高雅低俗，都可以用统一的概率模型建模，且分领域泛化仅仅依赖领域样本数量，

从数学的角度，首次论证的人类自以为是的高雅和低俗，实际是同一种行为规律，有力抨击当前社会贬低某些行为的荒谬。



[随想录/信息时代下，人的同化.md]
===================

---
draw:
title: 信息时代下，人的同化
date created: 2024-05-06
date modified: 2025-02-14
---

excerpt

<!-- more -->

![image.png|1000](https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F05%2F06%2F21-25-58-c15fc0617c8809b1293088206fb61288-20240506212555-5bed5b.png)

今天看了一个有趣的 github 项目，是把他自己的 obsidian 笔记分享出来，clone 下来阅读了一下，内容很庞大，质量也很高，因为其写的很多方面自己也多少有一些涉猎。

了解了一下 BG，也是程序员。发现一个有趣的事，自己和这个老哥关注的话题、领域，有太多重叠相似之处。不知道这是上进者的殊途同归，效率者的莞尔碰面，抑或是信息革命下，对于人的同化。

🔗 github 链接：https://github.com/oldwinter/knowledge-garden  
🔗 在线阅读：[README (oldwinter.top)](https://garden.oldwinter.top/readme#%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B)



[随想录/出厂设置.md]
=============

---
draw:
title: 出厂设置
date created: 2024-04-11
date modified: 2025-02-14
---

每个人出生就和电脑出厂一样，自带一套配置，有的是 2c4g，有的 8c16g，能提升的只有软件。

<!-- more -->

胆小怕事  
执行力弱、
清高、道德洁癖  
社会化程度低  
对利益不敏感  
贪图光环、
贪图稳定、
做事心不狠、
推崇考学（盲目追求高文凭）、
农耕思维（比如什么事都得准备好了再做）、
市场化思维弱



[随想录/别浪费收藏夹里的信息增益.md]
=====================

---
draw: 
title: 别浪费收藏夹里的信息增益
date created: 2024-04-16
date modified: 2025-02-14
---

信息熵是用来描述信息的不确定性的一个度量。想象一下你正在玩一个猜谜游戏，如果这个谜面可能有很多答案，你感觉很迷茫，因为不确定性很高。在数学上，这种 " 迷茫 " 的感觉可以用信息熵来量化：如果一个系统（比如谜底的可能性）非常复杂且不确定，它的熵就很高；如果很确定，比如几乎每次都猜得出谜底，那么它的熵就很低。

信息增益则是用来衡量在知道额外信息后，这种不确定性减少了多少。还是上面的猜谜游戏，如果有人给你一些提示，这个提示可能帮助你排除一些可能的答案，使得你更容易猜到正确答案。这时，你的不确定性减少了，我们说信息增益较高。在决策树模型中，我们用信息增益来选择哪个特征最好用于分割数据，以便快速准确地对数据进行分类。

总的来说，信息熵是一个衡量混乱和不确定性的指标，而信息增益则告诉我们获得某个信息后不确定性减少的程度。通过选择高信息增益的特征来分割数据，我们能更快地清晰地对数据进行分类和决策。



[随想录/喜欢玩游戏不可怕.md]
=================

---
draw:
title: 喜欢玩游戏不可怕
date created: 2024-03-19
date modified: 2025-02-14
---

喜欢玩游戏不可怕，可怕的是沉迷其中而自己又不是作者；
喜欢工作不可怕，可怕的是……

<!-- more -->



[随想录/我是谁.md]
============

---
draw:
title: 我是谁
date created: 2024-03-31
date modified: 2025-02-14
---

曾经喜欢写诗，现在只爱逻辑

<!-- more -->

## 有趣的经历

2015 年，高三刚开始，操场上突然一阵秋风吹来，开始怀疑学习的意义  
2016 年，跑去大西北读书  
2018 年，Steam 和王者荣耀一年肝了 3000h  
2019 年，决定考研去做考古  
2020 年，本科毕业，补考一门课，绩点全班倒数  
2020 年，硕士还没开学就去考古工地待了三个月  
2022 年，决定转码  
2023 年，硕士毕业，来中关村写 Java  
2024 年，年底可能会成为一名托福老师

## 喜欢什么？

## 为什么做程序员？

如果不做程序员,那么意味着之前对于学习的所有探索的收益都将变得很小, 这是目之所及内最学习密集型的职业。



[随想录/维特根斯坦，与代码世界，还有小说.md]
=========================

---
draw:
title: 维特根斯坦，与代码世界，还有小说
date created: 2024-03-31
date modified: 2025-02-14
---

[小说](小说.md) 表达的是生活中那些无法被思想和概念命名的东西。

<!-- more -->

所谓的存在，being 就像程序中的 = 赋值一样。

不断的 =，直到构建出一个 Object 对象。

究其根本，只有两种，一是理性主义给出的运算功能，比如 int float long double，二是表意符号性的，比如 char boolean String，比如 BigDecimal 就是为了兼备表意性和运算性。

但是代码构建出来的世界是现实世界的全部吗？也许只是维特根斯坦说的可说之物罢了。

小说表达的是生活中那些无法被思想和概念命名的东西。——王安忆

哲学必须走过的桥，淌过的河，跨过的山

不可言说之物保持沉默，但是可以降级，先安排一个位置

一部小说或许就是一个不可言说之物

所谓的存在，being 就像程序中的 = 赋值一样。

不断的 =，直到构建出一个 Object 对象。

究其根本，只有两种，一是理性主义给出的运算功能，比如 int float long double，二是表意符号性的，比如 char boolean String，甚至 BigDecimal 也是表意性高于运算性的。

但是代码构建出来的世界是现实世界的全部吗？也许只是维特根斯坦说的可说之物罢了。



[随想录/订阅的网络服务.md]
================

---
draw:
title: 订阅的网络服务
date created: 2024-04-08
date modified: 2025-02-14
---

| 产品                  | 价格              | 重要程度                | 使用频率   |       |     |
| ------------------- | --------------- | ------------------- | ------ | ----- | --- |
| OpenAI API          |                 | dupay               | 0165   |       |     |
| AssemblyAI API      |                 |                     | 5932   |       |     |
| 11 labs             | 22$             | 重要                  | 低频     | ✅     |     |
| obsidian sync       | 低频 但重要          |                     |        |       |     |
| ChatGPT Plus        | 20$             | dupay               | 0165   |       |     |
| Apple Music         | 10.99$          | Apple               | paypal | ✅     |     |
| iCloud+             | 2.99$           | Apple               | paypal |       |     |
| 奶昔                  | 不值              |                     |        |       |     |
| 油管频道                |                 |                     |        |       |     |
| AWS                 | 性价比低 Medium     | 信息密度不高，不如直接看 reddit | 不重要    | 低频    |     |
| 微信读书                | 值得              |                     |        |       |     |
| 奶昔                  | 不值              |                     |        |       |     |
| 油管频道                |                 |                     |        |       |     |
| Paste               | 29.99$/year     | 重要                  | 高频     | ✅     |     |
| Claude              | 20$             | 重要                  | 高频     | ✅     |     |
| paygo               | 3$              | 重要                  | 低频     | ✅     |     |
| Immersive Translate | 579.60 per year | 重要                  | 中频     | ✅     |     |
| QuickQ              | 似乎使用过最纯洁的梯子     | 重要                  | 高频     | ✅<br> |     |
|                     |                 |                     |        |       |     |
|                     |                 |                     |        |       |     |



[零门槛香港开户胎教级攻略 $.md]
===================

---
draw: 
title: 零门槛香港开户胎教级攻略 $
date created: 2024-03-28
date modified: 2025-02-14
---
- [一、有什么用](#%E4%B8%80%E3%80%81%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8)
- [二、开哪些？](#%E4%BA%8C%E3%80%81%E5%BC%80%E5%93%AA%E4%BA%9B%EF%BC%9F)
	- [2.1 必开的，需要线下的](#2.1%20%E5%BF%85%E5%BC%80%E7%9A%84%EF%BC%8C%E9%9C%80%E8%A6%81%E7%BA%BF%E4%B8%8B%E7%9A%84)
	- [2.2 虚拟银行，手机定位在香港就可以线上开](#2.2%20%E8%99%9A%E6%8B%9F%E9%93%B6%E8%A1%8C%EF%BC%8C%E6%89%8B%E6%9C%BA%E5%AE%9A%E4%BD%8D%E5%9C%A8%E9%A6%99%E6%B8%AF%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%BA%BF%E4%B8%8A%E5%BC%80)
	- [2.3 券商](#2.3%20%E5%88%B8%E5%95%86)
- [三、提前准备什么？](#%E4%B8%89%E3%80%81%E6%8F%90%E5%89%8D%E5%87%86%E5%A4%87%E4%BB%80%E4%B9%88%EF%BC%9F)
	- [3.1 务必要提前准备好](#3.1%20%E5%8A%A1%E5%BF%85%E8%A6%81%E6%8F%90%E5%89%8D%E5%87%86%E5%A4%87%E5%A5%BD)
	- [3.2 自然获得](#3.2%20%E8%87%AA%E7%84%B6%E8%8E%B7%E5%BE%97)
	- [3.3 现场也来得及](#3.3%20%E7%8E%B0%E5%9C%BA%E4%B9%9F%E6%9D%A5%E5%BE%97%E5%8F%8A)
- [四、时间线](#%E5%9B%9B%E3%80%81%E6%97%B6%E9%97%B4%E7%BA%BF)
- [五、补充](#%E4%BA%94%E3%80%81%E8%A1%A5%E5%85%85)
	- [5.1 怎么选券商](#5.1%20%E6%80%8E%E4%B9%88%E9%80%89%E5%88%B8%E5%95%86)
	- [5.2 入金](#5.2%20%E5%85%A5%E9%87%91)
	- [5.3 出金](#5.3%20%E5%87%BA%E9%87%91)
- [六、懒人操作](#%E5%85%AD%E3%80%81%E6%87%92%E4%BA%BA%E6%93%8D%E4%BD%9C)

## 一、有什么用

1. 投资港股、美股、境外理财产品、USDT、加密货币、保险。不推荐在支付宝上买 QDII 标普 500/纳斯达克指数。因为国产版 (支付宝…) 的 QDII 标普 500，纳斯达克 ETF 不仅没有分红，而且还有申购费，赎回费，和超高的管理费。时不时还会出现夸张的溢价和限购，长期下来，会多交至少 5-10% 的费用。通过国外券商投资的纳斯达克 100 指数/标普 500ETF, 无申购费和赎回费，还有美元分红，管理费也极低。而且还可以投资特斯拉，微软等世界上最伟大公司的股票
2. 港卡用于海外支付和收款。例如现在做出海项目，用国内的卡基本无法收大额，即使小额收多了也会被限制，要求提供各种证明材料，不给你转入。港卡没限制  
3. 香港银行卡还能在国内分行 ATM 直接刷卡拿钱.  

## 二、开哪些？

三要素：实体银行、虚拟银行、券商

### 2.1 必开的，需要线下的

1. 中银  
2. 汇丰 - 汇丰银行的基础账户——汇丰 One。这个账户没有管理费，也没有资金要求，是一种零成本开户的选择。

### 2.2 虚拟银行，手机定位在香港就可以线上开

1. 众安银行 ZA bank，香港境内手机上开户，开户后有一张虚拟 visa 卡，还可以付费 25hkd 申请一张实体 visa 卡，卡从珠海寄出

### 2.3 券商

下面的券商，长桥一定要肉身在香港连香港的网开，其他的可以之后回大陆再开也可以

| 平台   | 手续费      | 界面交互    | 特色           |     |
| ---- | -------- | ------- | ------------ | --- |
| 富途牛牛 | 不低 (但还行) | 友好      | 交互比较友好       |     |
| 老虎   | 不低 (但还行) | 中等      |              |     |
| 长桥   | 较低       | 一般      | 联系我有办法买 ibit |     |
| 盈透   | 最低       | 上古 (英文) | 功能最全         |     |

## 三、提前准备什么？

### 3.1 务必要提前准备好

- [ ] 身份证
- [ ] 港澳通行证
- [ ] 给主力手机号开通漫游，开各种户需要接验证码。（电信老卡不支持线上开通漫游要线下办理，我就是被坑了）
- [ ] 港币现金，其实有个几百就够用了，没说必须要给新卡冲多少钱才能激活。宽裕的话直接肉身带 2w 过去
- [ ] 中银预约，提前 8 天蹲守预约，中银不预约不行、汇丰的话可以现场拿号

### 3.2 自然获得

- [ ] 通关前，深圳一侧有卖流量卡的，买一张插上手机就有流量了
- [ ] 通关小票、入境时打印的凭证，出入海关时闸机自动打印的一个小白条

### 3.3 现场也来得及

- [ ] 地铁公交都可以用支付宝，出租车可以通过招手的原始方式打
- [ ] 内地地址证明，手机打开招商银行搜账单补寄，就会发一个带你居住地址的 pdf 邮件到你邮箱，让客户经理帮你打印下。
- [ ] 现场打开支付宝，让工作人员看下你的基金购买记录。
- [ ] 各种银行、券商 APP，现用现下即可

## 四、时间线

【7 月 26 日 周五】
00:30 周四刚结束，周五凌晨赶紧去中银香港微信预约

【8 月 2 日 周五】
21:15-00:30 飞机延误，北京首都国际机场 T2 → 深圳宝安机场 T3

【8 月 3 日 周六】
00:50-01:00 步行，下机 → 17 号出口大门，门口前台购买大巴票  
01:20-02:00 大巴，NA1 福田罗湖夜班线，深圳宝安机场 T3 → 投资大厦  
02:00-02:10 打车，投资大厦 → 福田口岸地铁站附近酒店  
08:30-08:40 打车，酒店 → 福田口岸  
本来定的 6 点半的闹钟，结果耳机睡着后从耳朵脱落，最后没听到铃声，靠着信仰在 8:30 醒了，我就知道我今天稳了。
08:40-09:00 步行，福田口岸，买流量卡，进 HK 后坐错地铁导致四十分钟的公共交通路线不成立。
09:00-09:35 赶紧出地铁打车到中银恒发楼分行  
09:35-10:30 中银香港元朗恒发楼分行  
开户的人不多，出示预约凭证后，直接开始流程。虽然手机不能接验证码，打印招行的信用卡账单花了一段时间，但整体丝滑下卡，存了 1k 港币  
10:30-11:00 步行到四百米外汇丰元朗分行，周六是一点下班，人太多号已经拿完。路过花旗银行，进去问了下要 150 砖头，……  
11:00-11:20 很慌，赶紧打车到屯门广场分行，人太多号已经拿完  
11:00-11:30 大脑飞速运转，打车到旁边一个不知名的汇丰，进了商场发现只有几台机子，cao  
11:30-12:00 打车到蝴蝶广场的汇丰  
地图上都不太能搜得到，去了后发现非常小，就两三个服务台，但是没任何人排队，丝滑开户，只不过只给你一个有卡号的纸条，卡片要去上面的屯门广场分行去取。小姐姐说附近好像也有个中银，那么看来这个蝴蝶广场真的是周六开户最佳实践了。和其他地方一比，真的是冰火两重天啊。
12:00-12:30 回到屯门广场，取到卡片，存了 1k 港币  
13:00-16:00 吃了点东西，city walk，去维多利亚港逛了一圈  
16:00-17:00 坐地铁回福田口岸  
在地铁出口发现有 free wifi，同时发现了口岸 bug，即不用漫游就可以接到大陆手机号短信 且 定位仍在香港  
坐在地铁站内长椅，线上开了众安、尝试富途失败后开了长桥  
17:00-19:20 地铁到深圳宝安机场 T3，又 tm 延误……

【8 月 5 日 周一】
09:00-09:35 中银内地开卡  
09:35-10:30 富途开户、长桥富途入金

## 五、补充

### 5.1 怎么选券商

1. **建议都开**，其实真正开始交易后，手续费的因素几乎不会考虑在内。更多考虑的是功能的全面、交互的友好、以及一些特色，比如长桥上我有办法可以买 IBIT（贝莱德出的比特币 ETF），这在其他券商是做不到的。
2. **一定要用邀请码开**，每家都会有几百港币的奖励，相当于 cover 了去香港开卡的费用。我之前开的时候就是不信邪，没用邀请码，错过好多钱
	1. 富途：暂无
	2. 长桥：https://activity.longbridgehk.com/pipeline/2023welcomegift/index.html?account_channel=lb&app_id=longbridge&org_id=1&channel=HM2023001&invite-code=JRV5GO
	3. 老虎：AEMTSW
	4. 盈透：https://ibkr.com/referral/yishou858
	

### 5.2 入金

把人民币换汇成港币，然后转到香港卡里，然后入券商，就可以买美股了。

人民币 -> 港卡中的港币

1. 中银：最好一次性把 5w 额度打满用完，中银大陆一个月汇款7次会被限制，从失败汇款那里算一个自然月解封
2. 汇丰：在大陆开一个兴业银行的寰宇人生账户，每年三十笔转港币到汇丰，都是免手续费的

港币 -> 券商账户

1. 点击券商里面的入金，按操作一步步来就好，很简单。
2. 券商内买美股，需要把港币换成美元。盈透里的美元汇率是更好的，就是市场价买入美元，加上 2USD 费用。

### 5.3 出金

把美股赚的钱转回人民币

1. 不建议这样做，保留一部分海外资产也是一种规避风险的手段
2. 可以从券商里把赚的钱转到众安银行的账户，然后绑定微信、美团、支付宝用作日常消费

## 六、懒人操作

1. 资本只是为其他杠杆提供一个复利系数，真正的个人增长还是在场外
2. 苹果、英伟达、IBIT，按比例一直定投即可



[非科班一年转码找工作可行吗？.md]
===================

---
draw:
tags: []
title: 非科班一年转码找工作可行吗？
date created: 2024-07-14
date modified: 2024-11-12
---
<iframe src="https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fcom~apple~CloudDocs%2FAudio%2F2024%2F04%2F22%2F00-42-10-130c9913aaddec31863d33f19e0a16bc-IMG_7154-4e81c2.mp4" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="border-radius: 30px; overflow: hidden; border: 3px solid #ccc; width: 640px; height: 360px; display: block; margin: 20px auto; aspect-ratio: 16 / 9;" ></iframe>

## 结论

上面是之前从事 [旧石器考古](旧石器考古) 的时候，在野外挖探方的场景，当时就萌生了转码去做程序员，从事室内工作的想法。

可行！先把结论放在开头，下面的是当时每个月的记录，事实上甚至不需要一年，我几乎零基础开始，花了 11 个月，且没有任何实习经历，最后拿了一个 30w+ 的 offer，下面是过程全记录。" 种一棵树最好的时间是十年前，其次是现在 "，如果你还苦闷困顿于坑 b 专业的逻辑性差、低反馈、就业前景差的话，大胆地转吧，心动不如行动。

## 记录

### **2021/11/28 梦开始的地方**

[地理学](https://www.zhihu.com/search?q=%E5%9C%B0%E7%90%86%E5%AD%A6&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2262438716%7D)，硕士 23 年毕业。最近想通了，转码！这个时刻的意义不亚于李云龙炮轰平安县城。所以开个帖记录一下。目标是 22 年末拿个中厂 offer，然后把托福考到 90.

回答组织结构是，有时间的话每天一记，然后十天一整合，然后三十天一整合。到第十或十一个三十天结束。

自己感觉用的不错的一些资源，都写在评论区了。

口语打卡的视频发到 b 站了，大家去支持一下新人 up 主呀，LOL

[【2496】找美国小姐姐练托福口语_哔哩哔哩_bilibili](https://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1J34y1n7eE%3Fshare_source%3Dcopy_web%26vd_source%3D367c81e78abb1d799202f019fde6a526)

感谢老杜，感谢老杜，感谢老杜！！！

---

### **2021/12/28 算法开路**

好了，第一个三十天结束了，做个小梳理吧。

进度：这个月一共投入时间 150h，技术栈过到了 spring。leetcode 刷了 30 道，开始接触回溯。

回顾：基础方面呢，感觉 javase 快速过会比较好，听一听每个模块大概是个啥功能，然后在后边刷算法题还有看其他比如 [jdbc](https://www.zhihu.com/search?q=jdbc&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2262438716%7D)、servlet 这些中多写多看，等对于使用场景有了一定的认识，对于 [面向对象接口](https://www.zhihu.com/search?q=%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%8E%A5%E5%8F%A3&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2262438716%7D) 这些有了深刻理解之后，可以结合几本 [面经](https://www.zhihu.com/search?q=%E9%9D%A2%E7%BB%8F&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2262438716%7D)，整理出各个模块的问题，比如关于异常，面试中常问什么？然后找当时的系统性基础课程，带着问题去听，并且自己总结一些回答，整理一些 demo。这个时候因为自己有了一定的代码量，所以能听的更加有针对性，理解也更加透彻。自己也知道哪里是重点，详略安排也可以更加得当了。mysql 的话，我是过了一半就跳了，在后半个月中的 crm 项目中用过一些，没写太复杂的查询，更多的是一些建表啊，还有管理器上的操作，当然了，这是一个很重要的基本功，准备 [mybatis](https://www.zhihu.com/search?q=mybatis&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2262438716%7D) 更熟练的时候，直接在 java 里面练，知道了更多业务场景，写起语句来也就不那么枯燥了。

[技术栈](https://www.zhihu.com/search?q=%E6%8A%80%E6%9C%AF%E6%A0%88&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2262438716%7D) 方面呢，其实它是一个自下而上，不断封装简化的过程，重要的其实就是思想，还有就是实现起来的熟练程度，一定不能光听课，最好是手里有一套项目代码，然后跟着课程，自己玩复制粘贴，理顺他们的关系。[ssm](https://www.zhihu.com/search?q=ssm&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2262438716%7D) 之前我用的是一个 crm 的项目，之后准备用动力商城的项目，最好都是带视频带源码，而且自己实际测过能运行起来的，别整半天发现最后，本来就跑不通。

算法方面呢，就跟着两个体系就好，一个是 b 站 [青岛大学](https://www.zhihu.com/search?q=%E9%9D%92%E5%B2%9B%E5%A4%A7%E5%AD%A6&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2262438716%7D) 那个女老师的课，恬淡平稳，但是非常扎实，我过到图了，然后做题的话，就是代码 [随想录](https://www.zhihu.com/search?q=%E9%9A%8F%E6%83%B3%E5%BD%95&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2262438716%7D)，中等的题目可以先放一放，从简单的开始。

计算机课程方面呢，[王道考研](https://www.zhihu.com/search?q=%E7%8E%8B%E9%81%93%E8%80%83%E7%A0%94&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2262438716%7D) 喽，本来准备闲暇时间看，但是这个月空闲时间去找外教练英语了，可能以后还是得补一补这方面的吧。

总结：最大的感受就是，虽然仅有一个月，自己也是一个 beg[inne](https://www.zhihu.com/search?q=inne&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2262438716%7D)r，但是起码大概看了一下这件事情的全貌，心里多少有底了，大半年的时间虽然不长，但是听各方面渠道的校招要求的话，自己拼一拼还是能够达到的。加油吧。

转行这件事，无论早晚。如果你能够坚持，那么当你做出选择的那一刻，就意味着你已经成功了！比起几十年漫长的职业生涯，这起步时的三四年非科班的差距又算得了什么呢？相信自己，相信未来！

感谢代码随想录，感谢代码随想录，感谢代码随想录！！！

---

### **2022/01/28 步入正轨**

第二个三十天结束啦，放假回家啦，这几天玩了玩，没怎么学，还把《开端》看完了，嘻嘻。

到今天，正好两个月了，一共投入时间是 280 小时。

这个月的收获就是扫了一遍框架，知道是个啥玩意儿，不慌了。基础的话，找到了对应的题来强化，做个细节怪。

装备也都升级啦，电脑换了 R9000P 然后还加到 32g 内存，一言不合就开四五个 idea，键盘换了 G913tkl 旗舰，舒服的一批，哈哈。

算法题是真的锻炼人，真的是 talk is cheap, show me the code。[螺旋矩阵](https://www.zhihu.com/search?q=%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2262438716%7D) 那个题，刚开始练的时候觉得难的一批，昨天试了试，直接四五个循环就撸出来了。

希望明年没啥破事吧，能稳稳学几个月。这个月争取保到 420h，[转码](https://www.zhihu.com/search?q=%E8%BD%AC%E7%A0%81&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2262438716%7D) 之路，充满快乐。

---

### **2022/02/28 渐入佳境**

正好三个月了，累积投入 360 多小时，平均下来每天 4h 吧，希望能保持这个强度。

代码随想录刷了百分之八十了，所有知识点都覆盖了，这是现在最给我自信的地方，今天回头看了一下当时刚开始时候觉得很难得 [kmp](https://www.zhihu.com/search?q=kmp&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2262438716%7D)，虽然自己也无法空想到，但是从过程推演到代码实现，还是利索很多了，这就是基本功的提高吧。看了一下算法总投入时间是 78h。以后就由原来的每天 2h 降到每天 1h 了。

接下来的任务是无脑跟完一个项目，完成大于完美。每天 2h！

然后慢慢填一些之前跳过的部分，就着 cs 的基础课进行食用。比如 [多线程](https://www.zhihu.com/search?q=%E5%A4%9A%E7%BA%BF%E7%A8%8B&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2262438716%7D) 那里和 jvm、操作系统一起看，servlet 那里和计网一起看。

如果维持现在的强度，算到 11 月份吧，那就是我还有 [960h](https://www.zhihu.com/search?q=960h&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2262438716%7D)，一定可以的！其中刷题部分是 240h，在现在的基础上，再复习拓展两百多小时，我有信心通过大部分笔试了。

剩下的七百多小时就是做完两个项目，和最后大量面试时候的背诵了。

当学习资源丰富易得、自我管理成熟可控的基础上，一点区区的 [行业壁垒](https://www.zhihu.com/search?q=%E8%A1%8C%E4%B8%9A%E5%A3%81%E5%9E%92&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2262438716%7D)，算的了什么呢？

---

### **2022/03/28 按部就班**

哇，转眼四个月了，这个月做了给手术，现在累积时间是 450h。

过去的学习经验让我深知间隔复习的好处，但是之前只是在背单词上狠狠用过它，因为有成熟的 app 可以使用，不用考虑制卡的问题。考研的时候试图用 [anki](https://www.zhihu.com/search?q=anki&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2262438716%7D) 解决政治和专业课的一些背诵，但是都失败了，核心就是制卡太麻烦。最近在搞面经，其实这个也挺适合间隔复习记忆的。一个非常好的消息是，因为我是 [墨墨背单词](https://www.zhihu.com/search?q=%E5%A2%A8%E5%A2%A8%E8%83%8C%E5%8D%95%E8%AF%8D&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2262438716%7D) 的深度用户，前前后后可能用这个背了有一万单词，个人已经被它的模式和界面驯化了，今天发现它还有个类似于 anki 的 markji（app），试了一下，发现无比适合我的面经部分的准备。而且有用户已经上传过类似的牌组了。于是我新建了一个自己的组，直接复制粘贴一些知识，每天梳理一部分进去，估计一个多月以后就可以全部完成了。另外就是有个好处是，集中管理我自己的认知，比如 [hashmap](https://www.zhihu.com/search?q=hashmap&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2262438716%7D) 底层啊、各种锁啊，往往投入时间搞清楚了，但是没有集中的把思考的内容整理起来，造成再见到的时候还需要再次加工思考。现在好了，直接用牌组管理整合，随着以后面试实战，也可以对内容进行不断地迭代。

这么看的话，转行的大部分事情我都已经模式化了，算法把代码随想录刷完，现在只是把剑指和力扣 hot100 补充入那个体系就好，项目的话，[谷粒](https://www.zhihu.com/search?q=%E8%B0%B7%E7%B2%92&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2262438716%7D) 商城我找了带我的，有细节实现不了，随时可以得到远程帮助。[八股](https://www.zhihu.com/search?q=%E5%85%AB%E8%82%A1&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2262438716%7D) 的话，用 markji 整合管理，借助 javaguide 还有 b 站的面经视频 理解 + 记忆就好。

可能我个人有个特点，不知道是缺点还是优点，不管什么事情，我都没法全力以赴（时间上），自己总是喜欢打打球、玩玩游戏、逛逛 b 站什么的，可能永远无法把学习当作自己的全部，现在路径这么清晰，照理来说我应该全时间投入奔大厂啊，可是的确是真的做不到，哈哈。就喜欢带着兴趣不那么累地学一会儿，玩一会。或许也有好处吧，人本来就是丰富的，不应该被任何具体的事情异化。

就这么悠哉游哉地走着吧，哪怕校招没进大厂，但是自己有持续学习的热情，和坚持的自律，进了行业，慢慢也会混出来的。现在这样，刷刷题，看看视频，总结点东西，充实且快乐，很享受这个过程。

性格决定成败吧，我发现这么多年，自己的本质一直就是这样。

---

### **2022/04/28** 迷茫中摸索

这个月被导师 push 了好几次，心态差点炸了，不过还好，师兄论文发了，我也达到毕业要求了，明年写毕业论文的数据思路也都准备好了，不用分心了！女朋友的文章我也挂了，估计下学期还能白嫖一波奖学金，完美！

到现在 [转码之路](https://www.zhihu.com/search?q=%E8%BD%AC%E7%A0%81%E4%B9%8B%E8%B7%AF&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2262438716%7D) 正好五个月了，一共投入 552 小时。现在一算，到秋招还有五六个月。。。我 tm 都不知道怎么打发时间了。感觉上岸绰绰有余。

之前项目的部分兜兜转转一直没有深入，正应了一句话，战略的勤奋才是最重要的，转码一开始我就收藏了别人关于做项目的建议，不管别的，现在本地跑通才是最重要的，但是我一直忽略了这一点，最近花了点钱，把项目部署在本地了，看了下秒杀的效果，心里有底，学起来就舒服多了，niginx、网关、缓存、异步编排把以前的知识慢慢打通了。还是和以前一样自顶而下。

算法参加了一下华为的机考，感觉不难但是也没做出来，机考和平时不一样没具体反馈，所以不好排错，但是基本都有思路，再刷刷就好了。

我发现人老是有逆反心理，之前学英语的时候，天天想着敲代码放松，现在计算机学疲了，又天天想练口语放松，哈哈。

---

### **2022/05/28 曙光初显**

第六个月结束了，转码之路一共投入 648h 了。

这个月以练为主，从 mysql 到前端敲了不少。找了一套特别好的项目从普通的 servlet 到 ssm、sb 三种方式实现一个商城，最近在同步做，尽快搞完。就可以开始 [微服务](https://www.zhihu.com/search?q=%E5%BE%AE%E6%9C%8D%E5%8A%A1&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2262438716%7D) 和分布式实战了。因为之前已经有了认知，所以这个阶段还是多敲多练。

算法到 200 就停了，等秋招前复习一下应该就没什么问题了。

感谢 how2j，感谢 how2j，感谢 how2j！！！

---

### **2022/06/28 谷粒谷粒**

累积 807h 了。

过去的一个月可以称为项目之月，花了三周多把 [how2j](https://www.zhihu.com/search?q=how2j&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2262438716%7D) 的两个项目做完了。其实我 2、3 月份的时候就尝试过一步到位上谷粒，但是中间很受挫，学习到这个阶段已经可以平滑入手了，24 号开始重新弄，到明天差不多就可以把基础篇弄完了.

感谢雷老师，感谢雷老师，感谢雷老师！！！

---

### **2022/07/28 冲锋号响起**

912 小时了，项目差最后一个秒杀模块了。两三天解决掉就开始复习八股，强化记忆了。

一回首八个月了，天呐，时光飞逝呀，是仅仅度生命以时间，还是给时间以生命？我相信自己在越来越向着一个成熟的学习者趋近。口语课的视频也已经出了 95 期了。

[【2517】找英国小姐姐练托福口语_哔哩哔哩_bilibili](https://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV19d4y1S7rL%3Fshare_source%3Dcopy_web%26vd_source%3D367c81e78abb1d799202f019fde6a526)

一路走来，最大的感触就是 mark 的重要性，人是一个 cpu 又怪又强，但是内存不大，硬盘飘渺，io 诡异的动物。把一些状态信息外包给其他工具是很很有必要的。

每天两小时的算法在一周前重新启动了。

[行百里者半九十](https://www.zhihu.com/search?q=%E8%A1%8C%E7%99%BE%E9%87%8C%E8%80%85%E5%8D%8A%E4%B9%9D%E5%8D%81&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2262438716%7D)，最后的冲刺，燃起来了！！！

---

### **2022/08/28** 秋招第一阶段

快一千小时了

这个阶段主要是，熟悉秋招流程、熟悉测评题型、笔了一些，面了三四家，都录音复盘了，和英语外教课一样。

八股一直不想背，自己懒加载一波，面试不会的再去搜集资料加载到脑子，多献祭几家公司八股的体系就慢慢建立起来了。

很多东西之前都学过，学的也不浅，现在只需要一个最后一步记忆的过程，markji 真乃神器，尤其是对我这种用了好几年墨墨背单词的用户来说。

今年形势很惨烈，有传闻大厂 hc 少了六到七成，参加的人数多了三成，不想展开了，还是做好自己吧，11 入宫也好，49 国军也罢，从一开始吸引我的就不光只是薪资，更是对于编程的热爱。

---

### **2022/09/28** 秋招第二阶段

看了下进度表，投了 100 家了，笔了 40 家，面了七八场。

美团 5 个 a 了三个半，一直泡池子。还有一些厂子直接笔试挂了。华子进面了，明天有个中厂的二面，希望顺利吧。

这个时候对于每天复习内容的取舍也很重要，应该是 [bfs](https://www.zhihu.com/search?q=bfs&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2262438716%7D) 而不是 dfs

其他八股的闪卡也边背边做整的差不多了，再背背计网的八股，冲冲冲！

面试录音 b 站都有更。

---

### **2022/10/28 大结局！**

今天收到了中厂 [30w](https://www.zhihu.com/search?q=30w&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2262438716%7D)+ 加的意向。

冥冥之中自有天意吧，去年 1128 到今年 1028，正好十一个月，元旦的时候都不太清楚面向对象到底是个啥玩意儿，学语言，刷算法，学框架，做项目，还有最后补计算机基础，又恰好遇到了互联网寒冬，投了 160 家左右，笔试了 60 场，面了 30 场，终于在这个寒气逼人的秋招里，拿到了一份中厂 offer！天道酬勤，[功不唐捐](https://www.zhihu.com/search?q=%E5%8A%9F%E4%B8%8D%E5%94%90%E6%8D%90&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2262438716%7D)！

这个问题的答案，已经用时间写完了~~


